
509_maadi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000049b4  00004a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800086  00800086  00004a6e  2**0
                  ALLOC
  3 .stab         000050dc  00000000  00000000  00004a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ae1  00000000  00000000  00009b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b62d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b76d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b8dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d526  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e411  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f1c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fd7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 23 	call	0x473e	; 0x473e <main>
      8a:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 24 	jmp	0x4942	; 0x4942 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 24 	jmp	0x4942	; 0x4942 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cd 24 	jmp	0x499a	; 0x499a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <M_UART_Void_UARTInit>:
#include "UART_Interface.h"
#include "UART_Private.h"


void M_UART_Void_UARTInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	//MAKE TRANSMITTER OUTPUT AS IT IS DEFAULT INPUT
	M_DIO_Void_SetPinDirection(PD0_PIN,INPUT);
     b50:	88 e2       	ldi	r24, 0x28	; 40
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PD1_PIN,OUTPUT);
     b58:	89 e2       	ldi	r24, 0x29	; 41
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>

	//TO TALK TO UCSRC WE MUST WRITE 1 IN BIT 15
	u8 Local_U8_UCSRCValue = 0b10000000;
     b60:	80 e8       	ldi	r24, 0x80	; 128
     b62:	89 83       	std	Y+1, r24	; 0x01

	//TO SELECT CHARACTER SIZE -> 8 BIT
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
     b64:	aa e2       	ldi	r26, 0x2A	; 42
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8b 7f       	andi	r24, 0xFB	; 251
     b70:	8c 93       	st	X, r24
	SET_BIT(Local_U8_UCSRCValue,UCSZ1_BIT);
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	84 60       	ori	r24, 0x04	; 4
     b76:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_U8_UCSRCValue,UCSZ0_BIT);
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	82 60       	ori	r24, 0x02	; 2
     b7c:	89 83       	std	Y+1, r24	; 0x01

	//TO SELECT ASYNCHRONOUS MODE
	CLR_BIT(Local_U8_UCSRCValue,UMSEL_BIT);
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	8f 7b       	andi	r24, 0xBF	; 191
     b82:	89 83       	std	Y+1, r24	; 0x01

#if UART_PARITY_MODE   ==   UART_PARITY_DISABLE
	CLR_BIT(Local_U8_UCSRCValue,UMP0_BIT);
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	8f 7e       	andi	r24, 0xEF	; 239
     b88:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_U8_UCSRCValue,UMP1_BIT);
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	8f 7d       	andi	r24, 0xDF	; 223
     b8e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_U8_UCSRCValue,UMP1_BIT);

#endif

#if  UART_STOP_BITS   ==   UART_1_STOP_BIT
	CLR_BIT(Local_U8_UCSRCValue,USBS_BIT);
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	87 7f       	andi	r24, 0xF7	; 247
     b94:	89 83       	std	Y+1, r24	; 0x01
#elif  UART_STOP_BITS   ==   UART_2_STOP_BIT
	SET_BIT(Local_U8_UCSRCValue,USBS_BIT);
#endif

	//TO SELECT BAUD RATE -> 9600
	UBRRL_REG = ((u32)F_OSC / (u32)(16 * (u32)UART_BAUD_RATE )) - 1;
     b96:	e9 e2       	ldi	r30, 0x29	; 41
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	87 e6       	ldi	r24, 0x67	; 103
     b9c:	80 83       	st	Z, r24

	//TO WRITE ONLY ONCE IN THE REGISTER
	UCSRC_REG = Local_U8_UCSRCValue;
     b9e:	e0 e4       	ldi	r30, 0x40	; 64
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	80 83       	st	Z, r24

	//ENABLE TRANSMITTER AND RECIEVER
	SET_BIT(UCSRB_REG,RXEN_BIT);
     ba6:	aa e2       	ldi	r26, 0x2A	; 42
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e2       	ldi	r30, 0x2A	; 42
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	80 61       	ori	r24, 0x10	; 16
     bb2:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,TXEN_BIT);
     bb4:	aa e2       	ldi	r26, 0x2A	; 42
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e2       	ldi	r30, 0x2A	; 42
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	88 60       	ori	r24, 0x08	; 8
     bc0:	8c 93       	st	X, r24

}
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <M_UART_Void_UARTSend>:

void M_UART_Void_UARTSend(u8 Copy_U8_Data)
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <M_UART_Void_UARTSend+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <M_UART_Void_UARTSend+0x8>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	8d 83       	std	Y+5, r24	; 0x05
   UDR_REG = Copy_U8_Data;
     bda:	ec e2       	ldi	r30, 0x2C	; 44
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	8d 81       	ldd	r24, Y+5	; 0x05
     be0:	80 83       	st	Z, r24
   u32 Local_U32_Counter = 0;
     be2:	19 82       	std	Y+1, r1	; 0x01
     be4:	1a 82       	std	Y+2, r1	; 0x02
     be6:	1b 82       	std	Y+3, r1	; 0x03
     be8:	1c 82       	std	Y+4, r1	; 0x04
     bea:	13 c0       	rjmp	.+38     	; 0xc12 <M_UART_Void_UARTSend+0x48>
   //Check flag first before exiting the function
   while(Local_U32_Counter < POLLING_TIME)
   {
  	 Local_U32_Counter++;
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	ab 81       	ldd	r26, Y+3	; 0x03
     bf2:	bc 81       	ldd	r27, Y+4	; 0x04
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	a1 1d       	adc	r26, r1
     bf8:	b1 1d       	adc	r27, r1
     bfa:	89 83       	std	Y+1, r24	; 0x01
     bfc:	9a 83       	std	Y+2, r25	; 0x02
     bfe:	ab 83       	std	Y+3, r26	; 0x03
     c00:	bc 83       	std	Y+4, r27	; 0x04
   	 if(GET_BIT(UCSRA_REG,RXC_BIT) == UART_FINISHED_TRANSMITTING)
     c02:	eb e2       	ldi	r30, 0x2B	; 43
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	88 1f       	adc	r24, r24
     c0a:	88 27       	eor	r24, r24
     c0c:	88 1f       	adc	r24, r24
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	61 f0       	breq	.+24     	; 0xc2a <M_UART_Void_UARTSend+0x60>
void M_UART_Void_UARTSend(u8 Copy_U8_Data)
{
   UDR_REG = Copy_U8_Data;
   u32 Local_U32_Counter = 0;
   //Check flag first before exiting the function
   while(Local_U32_Counter < POLLING_TIME)
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	ab 81       	ldd	r26, Y+3	; 0x03
     c18:	bc 81       	ldd	r27, Y+4	; 0x04
     c1a:	80 38       	cpi	r24, 0x80	; 128
     c1c:	24 e8       	ldi	r18, 0x84	; 132
     c1e:	92 07       	cpc	r25, r18
     c20:	2e e1       	ldi	r18, 0x1E	; 30
     c22:	a2 07       	cpc	r26, r18
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	b2 07       	cpc	r27, r18
     c28:	08 f3       	brcs	.-62     	; 0xbec <M_UART_Void_UARTSend+0x22>
   	 if(GET_BIT(UCSRA_REG,RXC_BIT) == UART_FINISHED_TRANSMITTING)
 	 {
   			break;
     }
   	}
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <M_UART_U8_UARTReceive>:

u8   M_UART_U8_UARTReceive(void)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <M_UART_U8_UARTReceive+0x6>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <M_UART_U8_UARTReceive+0x8>
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
	//Check flag first, then return
	u32 Local_U32_Counter = 0;
     c46:	19 82       	std	Y+1, r1	; 0x01
     c48:	1a 82       	std	Y+2, r1	; 0x02
     c4a:	1b 82       	std	Y+3, r1	; 0x03
     c4c:	1c 82       	std	Y+4, r1	; 0x04
     c4e:	13 c0       	rjmp	.+38     	; 0xc76 <M_UART_U8_UARTReceive+0x3c>
	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	ab 81       	ldd	r26, Y+3	; 0x03
     c56:	bc 81       	ldd	r27, Y+4	; 0x04
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	a1 1d       	adc	r26, r1
     c5c:	b1 1d       	adc	r27, r1
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	ab 83       	std	Y+3, r26	; 0x03
     c64:	bc 83       	std	Y+4, r27	; 0x04
		if(GET_BIT(UCSRA_REG,RXC_BIT) == UART_FINISHED_RECIEVING)
     c66:	eb e2       	ldi	r30, 0x2B	; 43
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	88 1f       	adc	r24, r24
     c6e:	88 27       	eor	r24, r24
     c70:	88 1f       	adc	r24, r24
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	61 f0       	breq	.+24     	; 0xc8e <M_UART_U8_UARTReceive+0x54>

u8   M_UART_U8_UARTReceive(void)
{
	//Check flag first, then return
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < POLLING_TIME)
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	ab 81       	ldd	r26, Y+3	; 0x03
     c7c:	bc 81       	ldd	r27, Y+4	; 0x04
     c7e:	80 38       	cpi	r24, 0x80	; 128
     c80:	24 e8       	ldi	r18, 0x84	; 132
     c82:	92 07       	cpc	r25, r18
     c84:	2e e1       	ldi	r18, 0x1E	; 30
     c86:	a2 07       	cpc	r26, r18
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	b2 07       	cpc	r27, r18
     c8c:	08 f3       	brcs	.-62     	; 0xc50 <M_UART_U8_UARTReceive+0x16>
		if(GET_BIT(UCSRA_REG,RXC_BIT) == UART_FINISHED_RECIEVING)
		{
			break;
		}
	}
	return UDR_REG;
     c8e:	ec e2       	ldi	r30, 0x2C	; 44
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
}
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <M_Timer_Void_TimerInit>:
#define        CS02          2
#define        I_BIT         7
#define        TOIE0_BIT     0

void M_Timer_Void_TimerInit(void)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	//TO SELECT NORMAL MODE
	CLR_BIT(TCCR0_REG,WGM00);
     caa:	a3 e5       	ldi	r26, 0x53	; 83
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e3 e5       	ldi	r30, 0x53	; 83
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8f 7b       	andi	r24, 0xBF	; 191
     cb6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01);
     cb8:	a3 e5       	ldi	r26, 0x53	; 83
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e3 e5       	ldi	r30, 0x53	; 83
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	87 7f       	andi	r24, 0xF7	; 247
     cc4:	8c 93       	st	X, r24

	//TO SELECT DIVISON FACTOR IN PRESCALER -> 1024
	SET_BIT(TCCR0_REG,CS00);
     cc6:	a3 e5       	ldi	r26, 0x53	; 83
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e3 e5       	ldi	r30, 0x53	; 83
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	81 60       	ori	r24, 0x01	; 1
     cd2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01);
     cd4:	a3 e5       	ldi	r26, 0x53	; 83
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e3 e5       	ldi	r30, 0x53	; 83
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8d 7f       	andi	r24, 0xFD	; 253
     ce0:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,CS02);
     ce2:	a3 e5       	ldi	r26, 0x53	; 83
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e3 e5       	ldi	r30, 0x53	; 83
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	84 60       	ori	r24, 0x04	; 4
     cee:	8c 93       	st	X, r24

	//To enable Global Interrupt
	SET_BIT(SREG_REG,I_BIT);
     cf0:	af e5       	ldi	r26, 0x5F	; 95
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ef e5       	ldi	r30, 0x5F	; 95
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	80 68       	ori	r24, 0x80	; 128
     cfc:	8c 93       	st	X, r24

	//To enable Local Interrupt
	SET_BIT(TIMSK_REG,TOIE0_BIT);
     cfe:	a9 e5       	ldi	r26, 0x59	; 89
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e9 e5       	ldi	r30, 0x59	; 89
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	81 60       	ori	r24, 0x01	; 1
     d0a:	8c 93       	st	X, r24
	case TIMER2_CHANNEL:
		break;
	default:
		break;
	}*/
}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <M_Timer_Void_TimerSetTime>:

void M_Timer_Void_TimerSetTime(u32 Copy_U32_DesiredTime)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	2c 97       	sbiw	r28, 0x0c	; 12
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	69 87       	std	Y+9, r22	; 0x09
     d28:	7a 87       	std	Y+10, r23	; 0x0a
     d2a:	8b 87       	std	Y+11, r24	; 0x0b
     d2c:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_U32_TickTime   = 1024 / 16;//result in microsecond
     d2e:	80 e4       	ldi	r24, 0x40	; 64
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a0 e0       	ldi	r26, 0x00	; 0
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	8d 83       	std	Y+5, r24	; 0x05
     d38:	9e 83       	std	Y+6, r25	; 0x06
     d3a:	af 83       	std	Y+7, r26	; 0x07
     d3c:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
     d3e:	89 85       	ldd	r24, Y+9	; 0x09
     d40:	9a 85       	ldd	r25, Y+10	; 0x0a
     d42:	ab 85       	ldd	r26, Y+11	; 0x0b
     d44:	bc 85       	ldd	r27, Y+12	; 0x0c
     d46:	28 ee       	ldi	r18, 0xE8	; 232
     d48:	33 e0       	ldi	r19, 0x03	; 3
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 39 24 	call	0x4872	; 0x4872 <__mulsi3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	2d 81       	ldd	r18, Y+5	; 0x05
     d5c:	3e 81       	ldd	r19, Y+6	; 0x06
     d5e:	4f 81       	ldd	r20, Y+7	; 0x07
     d60:	58 85       	ldd	r21, Y+8	; 0x08
     d62:	bc 01       	movw	r22, r24
     d64:	cd 01       	movw	r24, r26
     d66:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
     d6a:	da 01       	movw	r26, r20
     d6c:	c9 01       	movw	r24, r18
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	ab 83       	std	Y+3, r26	; 0x03
     d74:	bc 83       	std	Y+4, r27	; 0x04
	Timer_U32_NumOfOverflows = Local_U32_TotalTicks / 256;
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	ab 81       	ldd	r26, Y+3	; 0x03
     d7c:	bc 81       	ldd	r27, Y+4	; 0x04
     d7e:	89 2f       	mov	r24, r25
     d80:	9a 2f       	mov	r25, r26
     d82:	ab 2f       	mov	r26, r27
     d84:	bb 27       	eor	r27, r27
     d86:	80 93 86 00 	sts	0x0086, r24
     d8a:	90 93 87 00 	sts	0x0087, r25
     d8e:	a0 93 88 00 	sts	0x0088, r26
     d92:	b0 93 89 00 	sts	0x0089, r27

}
     d96:	2c 96       	adiw	r28, 0x0c	; 12
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <M_Timer_Void_SetCallBack>:

void M_Timer_Void_SetCallBack(u8 Copy_U8_TimerChannel,void(*Copy_ptr)(void))
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	00 d0       	rcall	.+0      	; 0xdae <M_Timer_Void_SetCallBack+0x6>
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <M_Timer_Void_SetCallBack+0x8>
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	7b 83       	std	Y+3, r23	; 0x03
     dba:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_TimerChannel)
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3d 83       	std	Y+5, r19	; 0x05
     dc4:	2c 83       	std	Y+4, r18	; 0x04
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	81 f0       	breq	.+32     	; 0xdf0 <M_Timer_Void_SetCallBack+0x48>
     dd0:	2c 81       	ldd	r18, Y+4	; 0x04
     dd2:	3d 81       	ldd	r19, Y+5	; 0x05
     dd4:	22 30       	cpi	r18, 0x02	; 2
     dd6:	31 05       	cpc	r19, r1
     dd8:	91 f0       	breq	.+36     	; 0xdfe <M_Timer_Void_SetCallBack+0x56>
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	9d 81       	ldd	r25, Y+5	; 0x05
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	a1 f4       	brne	.+40     	; 0xe0a <M_Timer_Void_SetCallBack+0x62>
	{
	case TIMER0_CHANNEL:
		Timer0_CallBack = Copy_ptr;
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	90 93 93 00 	sts	0x0093, r25
     dea:	80 93 92 00 	sts	0x0092, r24
     dee:	0d c0       	rjmp	.+26     	; 0xe0a <M_Timer_Void_SetCallBack+0x62>
		break;
	case TIMER1_CHANNEL:
		Timer1_CallBack = Copy_ptr;
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	9b 81       	ldd	r25, Y+3	; 0x03
     df4:	90 93 91 00 	sts	0x0091, r25
     df8:	80 93 90 00 	sts	0x0090, r24
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <M_Timer_Void_SetCallBack+0x62>
		break;
	case TIMER2_CHANNEL:
		Timer2_CallBack = Copy_ptr;
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	90 93 8f 00 	sts	0x008F, r25
     e06:	80 93 8e 00 	sts	0x008E, r24
		break;
	default:
		break;
	}
}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <__vector_11>:

ISR(TIMER0_OVF_vect)
{
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	2f 93       	push	r18
     e26:	3f 93       	push	r19
     e28:	4f 93       	push	r20
     e2a:	5f 93       	push	r21
     e2c:	6f 93       	push	r22
     e2e:	7f 93       	push	r23
     e30:	8f 93       	push	r24
     e32:	9f 93       	push	r25
     e34:	af 93       	push	r26
     e36:	bf 93       	push	r27
     e38:	ef 93       	push	r30
     e3a:	ff 93       	push	r31
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
     e44:	80 91 8a 00 	lds	r24, 0x008A
     e48:	90 91 8b 00 	lds	r25, 0x008B
     e4c:	a0 91 8c 00 	lds	r26, 0x008C
     e50:	b0 91 8d 00 	lds	r27, 0x008D
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	a1 1d       	adc	r26, r1
     e58:	b1 1d       	adc	r27, r1
     e5a:	80 93 8a 00 	sts	0x008A, r24
     e5e:	90 93 8b 00 	sts	0x008B, r25
     e62:	a0 93 8c 00 	sts	0x008C, r26
     e66:	b0 93 8d 00 	sts	0x008D, r27
	if(Local_U32_Counter == Timer_U32_NumOfOverflows)
     e6a:	20 91 8a 00 	lds	r18, 0x008A
     e6e:	30 91 8b 00 	lds	r19, 0x008B
     e72:	40 91 8c 00 	lds	r20, 0x008C
     e76:	50 91 8d 00 	lds	r21, 0x008D
     e7a:	80 91 86 00 	lds	r24, 0x0086
     e7e:	90 91 87 00 	lds	r25, 0x0087
     e82:	a0 91 88 00 	lds	r26, 0x0088
     e86:	b0 91 89 00 	lds	r27, 0x0089
     e8a:	28 17       	cp	r18, r24
     e8c:	39 07       	cpc	r19, r25
     e8e:	4a 07       	cpc	r20, r26
     e90:	5b 07       	cpc	r21, r27
     e92:	71 f4       	brne	.+28     	; 0xeb0 <__vector_11+0x96>
	{
		H_LED_Void_LedSetOn(LED2);
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 d6 13 	call	0x27ac	; 0x27ac <H_LED_Void_LedSetOn>
		H_LED_Void_LedSetOff(LED2);
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	0e 94 04 14 	call	0x2808	; 0x2808 <H_LED_Void_LedSetOff>

		Local_U32_Counter=0;
     ea0:	10 92 8a 00 	sts	0x008A, r1
     ea4:	10 92 8b 00 	sts	0x008B, r1
     ea8:	10 92 8c 00 	sts	0x008C, r1
     eac:	10 92 8d 00 	sts	0x008D, r1
	}
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <M_SPI_Void_SPIInit>:

#include "SPI_Interface.h"
#include "SPI_Private.h"

void M_SPI_Void_SPIInit(void)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
#if      SPI_MODE   ==    SPI_MASTER_MODE
    SET_BIT(SPCR_REG,MSTR_BIT);
     ede:	ad e2       	ldi	r26, 0x2D	; 45
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ed e2       	ldi	r30, 0x2D	; 45
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 61       	ori	r24, 0x10	; 16
     eea:	8c 93       	st	X, r24

    //TO SELECT DIV FACTOR -> 128
    SET_BIT(SPCR_REG,SPR0_BIT);
     eec:	ad e2       	ldi	r26, 0x2D	; 45
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ed e2       	ldi	r30, 0x2D	; 45
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	81 60       	ori	r24, 0x01	; 1
     ef8:	8c 93       	st	X, r24
    SET_BIT(SPCR_REG,SPR1_BIT);
     efa:	ad e2       	ldi	r26, 0x2D	; 45
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ed e2       	ldi	r30, 0x2D	; 45
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	8c 93       	st	X, r24

    //TO SELECT MISO,MOSI,SS,SCK I/P AND O/P
    M_DIO_Void_SetPinDirection(PB4_PIN,OUTPUT);
     f08:	88 e1       	ldi	r24, 0x18	; 24
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
    M_DIO_Void_SetPinDirection(PB5_PIN,OUTPUT);
     f10:	89 e1       	ldi	r24, 0x19	; 25
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
    M_DIO_Void_SetPinDirection(PB6_PIN,INPUT);
     f18:	8a e1       	ldi	r24, 0x1A	; 26
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
    M_DIO_Void_SetPinDirection(PB7_PIN,OUTPUT);
     f20:	8b e1       	ldi	r24, 0x1B	; 27
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
    M_DIO_Void_SetPinDirection(PB6_PIN,OUTPUT);
    M_DIO_Void_SetPinDirection(PB7_PIN,INPUT);

#endif
	//TO SELECT SENDING FROM LEAST SIGNIFICANT BIT
	SET_BIT(SPCR_REG,DORD_BIT);
     f28:	ad e2       	ldi	r26, 0x2D	; 45
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ed e2       	ldi	r30, 0x2D	; 45
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 62       	ori	r24, 0x20	; 32
     f34:	8c 93       	st	X, r24

	//TO ENABLE SPI
	SET_BIT(SPCR_REG,SPE_BIT);
     f36:	ad e2       	ldi	r26, 0x2D	; 45
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ed e2       	ldi	r30, 0x2D	; 45
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 64       	ori	r24, 0x40	; 64
     f42:	8c 93       	st	X, r24
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <M_SPI_U8_SPITransive>:

u8   M_SPI_U8_SPITransive(u8 Copy_U8_DataSent)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <M_SPI_U8_SPITransive+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <M_SPI_U8_SPITransive+0x8>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	8d 83       	std	Y+5, r24	; 0x05
	SPDR_REG = Copy_U8_DataSent;
     f5a:	ef e2       	ldi	r30, 0x2F	; 47
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	80 83       	st	Z, r24
	u32 Local_U32_Counter = 0;
     f62:	19 82       	std	Y+1, r1	; 0x01
     f64:	1a 82       	std	Y+2, r1	; 0x02
     f66:	1b 82       	std	Y+3, r1	; 0x03
     f68:	1c 82       	std	Y+4, r1	; 0x04
     f6a:	13 c0       	rjmp	.+38     	; 0xf92 <M_SPI_U8_SPITransive+0x48>
    //Check register has finished receiving before exiting the while
    while(Local_U32_Counter < POLLING_TIME)
    {
         Local_U32_Counter++;
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	ab 81       	ldd	r26, Y+3	; 0x03
     f72:	bc 81       	ldd	r27, Y+4	; 0x04
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	a1 1d       	adc	r26, r1
     f78:	b1 1d       	adc	r27, r1
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	ab 83       	std	Y+3, r26	; 0x03
     f80:	bc 83       	std	Y+4, r27	; 0x04
	  	 if(GET_BIT(SPSR_REG,SPIF_BIT) == SPI_FINISHED_TRANSIVE)
     f82:	ee e2       	ldi	r30, 0x2E	; 46
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 1f       	adc	r24, r24
     f8a:	88 27       	eor	r24, r24
     f8c:	88 1f       	adc	r24, r24
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	61 f0       	breq	.+24     	; 0xfaa <M_SPI_U8_SPITransive+0x60>
u8   M_SPI_U8_SPITransive(u8 Copy_U8_DataSent)
{
	SPDR_REG = Copy_U8_DataSent;
	u32 Local_U32_Counter = 0;
    //Check register has finished receiving before exiting the while
    while(Local_U32_Counter < POLLING_TIME)
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	ab 81       	ldd	r26, Y+3	; 0x03
     f98:	bc 81       	ldd	r27, Y+4	; 0x04
     f9a:	80 38       	cpi	r24, 0x80	; 128
     f9c:	24 e8       	ldi	r18, 0x84	; 132
     f9e:	92 07       	cpc	r25, r18
     fa0:	2e e1       	ldi	r18, 0x1E	; 30
     fa2:	a2 07       	cpc	r26, r18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	b2 07       	cpc	r27, r18
     fa8:	08 f3       	brcs	.-62     	; 0xf6c <M_SPI_U8_SPITransive+0x22>
	  	 if(GET_BIT(SPSR_REG,SPIF_BIT) == SPI_FINISHED_TRANSIVE)
	 	 {
	   			break;
	     }
	 }
	return SPDR_REG;
     faa:	ef e2       	ldi	r30, 0x2F	; 47
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <M_I2C_Void_I2CInit>:
#include "I2C_Interface.h"
#include "I2C_Private.h"


void M_I2C_Void_I2CInit(void)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
#if     I2C_MODE       ==         I2C_MASTER_MODE
	/*TO SELECT F_SCL -> 4OO KHZ*/
	TWBR_REG = 12;
     fc8:	e0 e2       	ldi	r30, 0x20	; 32
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	8c e0       	ldi	r24, 0x0C	; 12
     fce:	80 83       	st	Z, r24
#elif     I2C_MODE       ==         I2C_SLAVE_MODE
	TWAR_REG = (SLAVE_ADDRESS << 1) | GENERAL_CALL_RESPONSE;
#endif

	/*TO ENABLE I2C CIRCUIT*/
	SET_BIT(TWCR_REG,TWEN_BIT);
     fd0:	a6 e5       	ldi	r26, 0x56	; 86
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e6 e5       	ldi	r30, 0x56	; 86
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	84 60       	ori	r24, 0x04	; 4
     fdc:	8c 93       	st	X, r24
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <M_I2C_Void_I2CStartCondition>:

void M_I2C_Void_I2CStartCondition(void)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	/*TO MAKE A START CONDITION*/
	SET_BIT(TWCR_REG,TWSTA_BIT);
     fec:	a6 e5       	ldi	r26, 0x56	; 86
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e6 e5       	ldi	r30, 0x56	; 86
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 62       	ori	r24, 0x20	; 32
     ff8:	8c 93       	st	X, r24

	/*TO CLEAR THE FLAG (MUST BE WRITTEN BEFORE EVERY FUNCTION)*/
	SET_BIT(TWCR_REG,TWINT_BIT);
     ffa:	a6 e5       	ldi	r26, 0x56	; 86
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e6 e5       	ldi	r30, 0x56	; 86
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 68       	ori	r24, 0x80	; 128
    1006:	8c 93       	st	X, r24

	/*TO REMAIN STUCK TILL BYTE FINISHES WRITING*/
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1008:	e6 e5       	ldi	r30, 0x56	; 86
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	88 23       	and	r24, r24
    1010:	dc f7       	brge	.-10     	; 0x1008 <M_I2C_Void_I2CStartCondition+0x24>

	/*Bat2aked le tany mara hasal start condition ala el bus mn bara wla la*/
	while((TWSR_REG & 0xF8) != START_CONDITION_HAS_BEEN_TRANSMITTED);
    1012:	e1 e2       	ldi	r30, 0x21	; 33
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	88 7f       	andi	r24, 0xF8	; 248
    101e:	90 70       	andi	r25, 0x00	; 0
    1020:	88 30       	cpi	r24, 0x08	; 8
    1022:	91 05       	cpc	r25, r1
    1024:	b1 f7       	brne	.-20     	; 0x1012 <M_I2C_Void_I2CStartCondition+0x2e>

}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <M_I2C_Void_I2CStopCondition>:

void M_I2C_Void_I2CStopCondition(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_REG,TWSTO_BIT);
    1034:	a6 e5       	ldi	r26, 0x56	; 86
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e6 e5       	ldi	r30, 0x56	; 86
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 61       	ori	r24, 0x10	; 16
    1040:	8c 93       	st	X, r24
}
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <M_I2C_Void_I2CRepeatedStart>:

void M_I2C_Void_I2CRepeatedStart(void)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	/*TO MAKE A START CONDITION*/
	SET_BIT(TWCR_REG,TWSTA_BIT);
    1050:	a6 e5       	ldi	r26, 0x56	; 86
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e6 e5       	ldi	r30, 0x56	; 86
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 62       	ori	r24, 0x20	; 32
    105c:	8c 93       	st	X, r24

	/*TO CLEAR THE FLAG (MUST BE WRITTEN BEFORE EVERY FUNCTION)*/
	SET_BIT(TWCR_REG,TWINT_BIT);
    105e:	a6 e5       	ldi	r26, 0x56	; 86
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e6 e5       	ldi	r30, 0x56	; 86
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 68       	ori	r24, 0x80	; 128
    106a:	8c 93       	st	X, r24

	/*TO REMAIN STUCK TILL BYTE FINISHES WRITING*/
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    106c:	e6 e5       	ldi	r30, 0x56	; 86
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	88 23       	and	r24, r24
    1074:	dc f7       	brge	.-10     	; 0x106c <M_I2C_Void_I2CRepeatedStart+0x24>

	/*Bat2aked le tany mara hasal repeated start condition ala el bus mn bara wla la*/
	while((TWSR_REG & 0xF8) != REPEATED_START_CONDITION_HAS_BEEN_TRANSMITTED);
    1076:	e1 e2       	ldi	r30, 0x21	; 33
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	88 7f       	andi	r24, 0xF8	; 248
    1082:	90 70       	andi	r25, 0x00	; 0
    1084:	80 31       	cpi	r24, 0x10	; 16
    1086:	91 05       	cpc	r25, r1
    1088:	b1 f7       	brne	.-20     	; 0x1076 <M_I2C_Void_I2CRepeatedStart+0x2e>
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <M_I2C_Void_I2CSendSlaveAddressWrite>:

void M_I2C_Void_I2CSendSlaveAddressWrite(u8 Copy_U8_Address)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
	TWDR_REG = Copy_U8_Address << 1;//ashan homa 7 bits bas w akher wahda heya el operation
    109c:	e3 e2       	ldi	r30, 0x23	; 35
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	88 0f       	add	r24, r24
    10a4:	80 83       	st	Z, r24

	/*TO CLEAR THE FLAG (MUST BE WRITTEN BEFORE EVERY FUNCTION)*/
	SET_BIT(TWCR_REG,TWINT_BIT);
    10a6:	a6 e5       	ldi	r26, 0x56	; 86
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e6 e5       	ldi	r30, 0x56	; 86
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 68       	ori	r24, 0x80	; 128
    10b2:	8c 93       	st	X, r24

	/*TO REMAIN STUCK TILL BYTE FINISHES WRITING*/
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    10b4:	e6 e5       	ldi	r30, 0x56	; 86
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	88 23       	and	r24, r24
    10bc:	dc f7       	brge	.-10     	; 0x10b4 <M_I2C_Void_I2CSendSlaveAddressWrite+0x24>

	/*Bat2aked le tany mara hasal send slave address ala el bus mn bara wla la*/
	while((TWSR_REG & 0xF8) != SLAVE_ADDRESS_W_TRANSMITTED_ACK_RECIEVE);
    10be:	e1 e2       	ldi	r30, 0x21	; 33
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	88 7f       	andi	r24, 0xF8	; 248
    10ca:	90 70       	andi	r25, 0x00	; 0
    10cc:	88 31       	cpi	r24, 0x18	; 24
    10ce:	91 05       	cpc	r25, r1
    10d0:	b1 f7       	brne	.-20     	; 0x10be <M_I2C_Void_I2CSendSlaveAddressWrite+0x2e>
}
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <M_I2C_Void_I2CSendSlaveAddressRead>:

void M_I2C_Void_I2CSendSlaveAddressRead(u8 Copy_U8_Address)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	0f 92       	push	r0
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	89 83       	std	Y+1, r24	; 0x01
	TWDR_REG = (Copy_U8_Address << 1) | 1;//to make last bit 1 to read
    10e6:	e3 e2       	ldi	r30, 0x23	; 35
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	80 83       	st	Z, r24

	/*TO CLEAR THE FLAG (MUST BE WRITTEN BEFORE EVERY FUNCTION)*/
	SET_BIT(TWCR_REG,TWINT_BIT);
    10f8:	a6 e5       	ldi	r26, 0x56	; 86
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e6 e5       	ldi	r30, 0x56	; 86
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	80 68       	ori	r24, 0x80	; 128
    1104:	8c 93       	st	X, r24

	/*TO REMAIN STUCK TILL BYTE FINISHES WRITING*/
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1106:	e6 e5       	ldi	r30, 0x56	; 86
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 23       	and	r24, r24
    110e:	dc f7       	brge	.-10     	; 0x1106 <M_I2C_Void_I2CSendSlaveAddressRead+0x2c>

	/*Bat2aked le tany mara hasal send slave address ala el bus mn bara wla la*/
		while((TWSR_REG & 0xF8) != SLAVE_ADDRESS_R_TRANSMITTED_ACK_RECIEVE);
    1110:	e1 e2       	ldi	r30, 0x21	; 33
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	88 7f       	andi	r24, 0xF8	; 248
    111c:	90 70       	andi	r25, 0x00	; 0
    111e:	80 34       	cpi	r24, 0x40	; 64
    1120:	91 05       	cpc	r25, r1
    1122:	b1 f7       	brne	.-20     	; 0x1110 <M_I2C_Void_I2CSendSlaveAddressRead+0x36>
}
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <M_I2C_Void_I2CSendByte>:

void M_I2C_Void_I2CSendByte(u8 Copy_U8_Data)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
    TWDR_REG = Copy_U8_Data;
    1138:	e3 e2       	ldi	r30, 0x23	; 35
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	80 83       	st	Z, r24

    /*TO CLEAR THE FLAG (MUST BE WRITTEN BEFORE EVERY FUNCTION)*/
    SET_BIT(TWCR_REG,TWINT_BIT);
    1140:	a6 e5       	ldi	r26, 0x56	; 86
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e6 e5       	ldi	r30, 0x56	; 86
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	80 68       	ori	r24, 0x80	; 128
    114c:	8c 93       	st	X, r24

    /*TO REMAIN STUCK TILL BYTE FINISHES WRITING*/
    while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    114e:	e6 e5       	ldi	r30, 0x56	; 86
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	88 23       	and	r24, r24
    1156:	dc f7       	brge	.-10     	; 0x114e <M_I2C_Void_I2CSendByte+0x22>

    /*Bat2aked le tany mara hasal send slave address ala el bus mn bara wla la*/
    while((TWSR_REG & 0xF8) != BYTE_TRANSMITTED_ACK_RECIEVE);
    1158:	e1 e2       	ldi	r30, 0x21	; 33
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	88 7f       	andi	r24, 0xF8	; 248
    1164:	90 70       	andi	r25, 0x00	; 0
    1166:	88 32       	cpi	r24, 0x28	; 40
    1168:	91 05       	cpc	r25, r1
    116a:	b1 f7       	brne	.-20     	; 0x1158 <M_I2C_Void_I2CSendByte+0x2c>
}
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <M_I2C_Void_I2CReadByte>:

u8   M_I2C_Void_I2CReadByte(void)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_Data = TWDR_REG;
    117e:	e3 e2       	ldi	r30, 0x23	; 35
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	89 83       	std	Y+1, r24	; 0x01

	/*TO CLEAR THE FLAG (MUST BE WRITTEN BEFORE EVERY FUNCTION)*/
	SET_BIT(TWCR_REG,TWINT_BIT);
    1186:	a6 e5       	ldi	r26, 0x56	; 86
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e6 e5       	ldi	r30, 0x56	; 86
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 68       	ori	r24, 0x80	; 128
    1192:	8c 93       	st	X, r24

	/*TO REMAIN STUCK TILL BYTE FINISHES WRITING*/
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1194:	e6 e5       	ldi	r30, 0x56	; 86
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	88 23       	and	r24, r24
    119c:	dc f7       	brge	.-10     	; 0x1194 <M_I2C_Void_I2CReadByte+0x20>

    /*Bat2aked le tany mara hasal send slave address ala el bus mn bara wla la*/
	while((TWSR_REG & 0xF8) != BYTE_RECIEVE_ACK_TRANSMITTED);
    119e:	e1 e2       	ldi	r30, 0x21	; 33
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	88 7f       	andi	r24, 0xF8	; 248
    11aa:	90 70       	andi	r25, 0x00	; 0
    11ac:	80 35       	cpi	r24, 0x50	; 80
    11ae:	91 05       	cpc	r25, r1
    11b0:	b1 f7       	brne	.-20     	; 0x119e <M_I2C_Void_I2CReadByte+0x2a>

	return Local_U8_Data;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <M_EXT_INT_Void_ExtIntInit>:
#include "EXT_INT_Interface.h"
#include "EXT_INT_Private.h"

//MicroController Unit Control Register
void M_EXT_INT_Void_ExtIntInit(u8 Copy_U8_Num)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <M_EXT_INT_Void_ExtIntInit+0x6>
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Num)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3b 83       	std	Y+3, r19	; 0x03
    11d2:	2a 83       	std	Y+2, r18	; 0x02
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	9b 81       	ldd	r25, Y+3	; 0x03
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 05       	cpc	r25, r1
    11dc:	89 f0       	breq	.+34     	; 0x1200 <M_EXT_INT_Void_ExtIntInit+0x44>
    11de:	2a 81       	ldd	r18, Y+2	; 0x02
    11e0:	3b 81       	ldd	r19, Y+3	; 0x03
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	a1 f0       	breq	.+40     	; 0x1210 <M_EXT_INT_Void_ExtIntInit+0x54>
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	b9 f4       	brne	.+46     	; 0x121e <M_EXT_INT_Void_ExtIntInit+0x62>
	CLR_BIT(MCUCR_REG,ISC01_BIT);

#endif

	//To enable local INT
	SET_BIT(GICR_REG,INT0_BIT);
    11f0:	ab e5       	ldi	r26, 0x5B	; 91
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	eb e5       	ldi	r30, 0x5B	; 91
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 64       	ori	r24, 0x40	; 64
    11fc:	8c 93       	st	X, r24
    11fe:	0f c0       	rjmp	.+30     	; 0x121e <M_EXT_INT_Void_ExtIntInit+0x62>
	SET_BIT(MCUCR_REG,ISC10_BIT);
	CLR_BIT(MCUCR_REG,ISC11_BIT);

#endif
		//To enable local INT
		SET_BIT(GICR_REG,INT1_BIT);
    1200:	ab e5       	ldi	r26, 0x5B	; 91
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	eb e5       	ldi	r30, 0x5B	; 91
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	8c 93       	st	X, r24
    120e:	07 c0       	rjmp	.+14     	; 0x121e <M_EXT_INT_Void_ExtIntInit+0x62>

	CLR_BIT(MCUCSR_REG,ISC2_BIT);

#endif
		//To enable local INT
		SET_BIT(GICR_REG,INT2_BIT);
    1210:	ab e5       	ldi	r26, 0x5B	; 91
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	eb e5       	ldi	r30, 0x5B	; 91
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 62       	ori	r24, 0x20	; 32
    121c:	8c 93       	st	X, r24
		break;
	default:
		break;
}
	//To enable global INT
	SET_BIT(SREG_REG,I_BIT);
    121e:	af e5       	ldi	r26, 0x5F	; 95
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ef e5       	ldi	r30, 0x5F	; 95
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 68       	ori	r24, 0x80	; 128
    122a:	8c 93       	st	X, r24

}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <M_DIO_Void_SetPinDirection>:

#include "DIO_Interface.h"
#include "DIO_Private.h"

void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num, u8 Copy_U8_State)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	2a 97       	sbiw	r28, 0x0a	; 10
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	8b 83       	std	Y+3, r24	; 0x03
    124e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9a e0       	ldi	r25, 0x0A	; 10
    1254:	69 2f       	mov	r22, r25
    1256:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    125a:	89 2f       	mov	r24, r25
    125c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9a e0       	ldi	r25, 0x0A	; 10
    1262:	69 2f       	mov	r22, r25
    1264:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    1268:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_U8_State)
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3a 87       	std	Y+10, r19	; 0x0a
    1272:	29 87       	std	Y+9, r18	; 0x09
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	9a 85       	ldd	r25, Y+10	; 0x0a
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	39 f0       	breq	.+14     	; 0x128a <M_DIO_Void_SetPinDirection+0x52>
    127c:	29 85       	ldd	r18, Y+9	; 0x09
    127e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1280:	21 30       	cpi	r18, 0x01	; 1
    1282:	31 05       	cpc	r19, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <M_DIO_Void_SetPinDirection+0x50>
    1286:	76 c0       	rjmp	.+236    	; 0x1374 <M_DIO_Void_SetPinDirection+0x13c>
    1288:	e4 c0       	rjmp	.+456    	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch (Local_U8_Port)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	38 87       	std	Y+8, r19	; 0x08
    1292:	2f 83       	std	Y+7, r18	; 0x07
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	98 85       	ldd	r25, Y+8	; 0x08
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	91 05       	cpc	r25, r1
    129c:	61 f1       	breq	.+88     	; 0x12f6 <M_DIO_Void_SetPinDirection+0xbe>
    129e:	2f 81       	ldd	r18, Y+7	; 0x07
    12a0:	38 85       	ldd	r19, Y+8	; 0x08
    12a2:	23 30       	cpi	r18, 0x03	; 3
    12a4:	31 05       	cpc	r19, r1
    12a6:	34 f4       	brge	.+12     	; 0x12b4 <M_DIO_Void_SetPinDirection+0x7c>
    12a8:	8f 81       	ldd	r24, Y+7	; 0x07
    12aa:	98 85       	ldd	r25, Y+8	; 0x08
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	69 f0       	breq	.+26     	; 0x12cc <M_DIO_Void_SetPinDirection+0x94>
    12b2:	cf c0       	rjmp	.+414    	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
    12b4:	2f 81       	ldd	r18, Y+7	; 0x07
    12b6:	38 85       	ldd	r19, Y+8	; 0x08
    12b8:	23 30       	cpi	r18, 0x03	; 3
    12ba:	31 05       	cpc	r19, r1
    12bc:	89 f1       	breq	.+98     	; 0x1320 <M_DIO_Void_SetPinDirection+0xe8>
    12be:	8f 81       	ldd	r24, Y+7	; 0x07
    12c0:	98 85       	ldd	r25, Y+8	; 0x08
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	91 05       	cpc	r25, r1
    12c6:	09 f4       	brne	.+2      	; 0x12ca <M_DIO_Void_SetPinDirection+0x92>
    12c8:	40 c0       	rjmp	.+128    	; 0x134a <M_DIO_Void_SetPinDirection+0x112>
    12ca:	c3 c0       	rjmp	.+390    	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case PORTA:     CLR_BIT(DDRA_REG, Local_U8_Pin);    break;
    12cc:	aa e3       	ldi	r26, 0x3A	; 58
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ea e3       	ldi	r30, 0x3A	; 58
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <M_DIO_Void_SetPinDirection+0xb2>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <M_DIO_Void_SetPinDirection+0xae>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	ae c0       	rjmp	.+348    	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
		case PORTB:		CLR_BIT(DDRB_REG, Local_U8_Pin);    break;
    12f6:	a7 e3       	ldi	r26, 0x37	; 55
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e7 e3       	ldi	r30, 0x37	; 55
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <M_DIO_Void_SetPinDirection+0xdc>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <M_DIO_Void_SetPinDirection+0xd8>
    1318:	80 95       	com	r24
    131a:	84 23       	and	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	99 c0       	rjmp	.+306    	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
		case PORTC:     CLR_BIT(DDRC_REG, Local_U8_Pin);    break;
    1320:	a4 e3       	ldi	r26, 0x34	; 52
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e4 e3       	ldi	r30, 0x34	; 52
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <M_DIO_Void_SetPinDirection+0x106>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <M_DIO_Void_SetPinDirection+0x102>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	84 c0       	rjmp	.+264    	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
		case PORTD:     CLR_BIT(DDRD_REG, Local_U8_Pin);    break;
    134a:	a1 e3       	ldi	r26, 0x31	; 49
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e1 e3       	ldi	r30, 0x31	; 49
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <M_DIO_Void_SetPinDirection+0x130>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <M_DIO_Void_SetPinDirection+0x12c>
    136c:	80 95       	com	r24
    136e:	84 23       	and	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	6f c0       	rjmp	.+222    	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
		default:        break;
		}
		break;
	case OUTPUT:
		switch (Local_U8_Port)
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3e 83       	std	Y+6, r19	; 0x06
    137c:	2d 83       	std	Y+5, r18	; 0x05
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	91 05       	cpc	r25, r1
    1386:	51 f1       	breq	.+84     	; 0x13dc <M_DIO_Void_SetPinDirection+0x1a4>
    1388:	2d 81       	ldd	r18, Y+5	; 0x05
    138a:	3e 81       	ldd	r19, Y+6	; 0x06
    138c:	23 30       	cpi	r18, 0x03	; 3
    138e:	31 05       	cpc	r19, r1
    1390:	34 f4       	brge	.+12     	; 0x139e <M_DIO_Void_SetPinDirection+0x166>
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	9e 81       	ldd	r25, Y+6	; 0x06
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	61 f0       	breq	.+24     	; 0x13b4 <M_DIO_Void_SetPinDirection+0x17c>
    139c:	5a c0       	rjmp	.+180    	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
    139e:	2d 81       	ldd	r18, Y+5	; 0x05
    13a0:	3e 81       	ldd	r19, Y+6	; 0x06
    13a2:	23 30       	cpi	r18, 0x03	; 3
    13a4:	31 05       	cpc	r19, r1
    13a6:	71 f1       	breq	.+92     	; 0x1404 <M_DIO_Void_SetPinDirection+0x1cc>
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	91 05       	cpc	r25, r1
    13b0:	e9 f1       	breq	.+122    	; 0x142c <M_DIO_Void_SetPinDirection+0x1f4>
    13b2:	4f c0       	rjmp	.+158    	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case PORTA:	   SET_BIT(DDRA_REG, Local_U8_Pin);	    break;
    13b4:	aa e3       	ldi	r26, 0x3A	; 58
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ea e3       	ldi	r30, 0x3A	; 58
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <M_DIO_Void_SetPinDirection+0x19a>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <M_DIO_Void_SetPinDirection+0x196>
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	3b c0       	rjmp	.+118    	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
		case PORTB:    SET_BIT(DDRB_REG, Local_U8_Pin);  	break;
    13dc:	a7 e3       	ldi	r26, 0x37	; 55
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e7 e3       	ldi	r30, 0x37	; 55
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <M_DIO_Void_SetPinDirection+0x1c2>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <M_DIO_Void_SetPinDirection+0x1be>
    13fe:	84 2b       	or	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	27 c0       	rjmp	.+78     	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
		case PORTC:    SET_BIT(DDRC_REG, Local_U8_Pin); 	break;
    1404:	a4 e3       	ldi	r26, 0x34	; 52
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e4 e3       	ldi	r30, 0x34	; 52
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <M_DIO_Void_SetPinDirection+0x1ea>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <M_DIO_Void_SetPinDirection+0x1e6>
    1426:	84 2b       	or	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	13 c0       	rjmp	.+38     	; 0x1452 <M_DIO_Void_SetPinDirection+0x21a>
		case PORTD:    SET_BIT(DDRD_REG, Local_U8_Pin); 	break;
    142c:	a1 e3       	ldi	r26, 0x31	; 49
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e1 e3       	ldi	r30, 0x31	; 49
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <M_DIO_Void_SetPinDirection+0x212>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <M_DIO_Void_SetPinDirection+0x20e>
    144e:	84 2b       	or	r24, r20
    1450:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1452:	2a 96       	adiw	r28, 0x0a	; 10
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <M_DIO_Void_SetPinValue>:

void M_DIO_Void_SetPinValue(u8 Copy_U8_Num, u8 Copy_U8_State)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	2a 97       	sbiw	r28, 0x0a	; 10
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	8b 83       	std	Y+3, r24	; 0x03
    147a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9a e0       	ldi	r25, 0x0A	; 10
    1480:	69 2f       	mov	r22, r25
    1482:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    1486:	89 2f       	mov	r24, r25
    1488:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9a e0       	ldi	r25, 0x0A	; 10
    148e:	69 2f       	mov	r22, r25
    1490:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    1494:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_U8_State) {
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3a 87       	std	Y+10, r19	; 0x0a
    149e:	29 87       	std	Y+9, r18	; 0x09
    14a0:	89 85       	ldd	r24, Y+9	; 0x09
    14a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	39 f0       	breq	.+14     	; 0x14b6 <M_DIO_Void_SetPinValue+0x52>
    14a8:	29 85       	ldd	r18, Y+9	; 0x09
    14aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    14ac:	21 30       	cpi	r18, 0x01	; 1
    14ae:	31 05       	cpc	r19, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <M_DIO_Void_SetPinValue+0x50>
    14b2:	76 c0       	rjmp	.+236    	; 0x15a0 <M_DIO_Void_SetPinValue+0x13c>
    14b4:	e4 c0       	rjmp	.+456    	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
	case LOW:
		switch (Local_U8_Port) {
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	38 87       	std	Y+8, r19	; 0x08
    14be:	2f 83       	std	Y+7, r18	; 0x07
    14c0:	8f 81       	ldd	r24, Y+7	; 0x07
    14c2:	98 85       	ldd	r25, Y+8	; 0x08
    14c4:	82 30       	cpi	r24, 0x02	; 2
    14c6:	91 05       	cpc	r25, r1
    14c8:	61 f1       	breq	.+88     	; 0x1522 <M_DIO_Void_SetPinValue+0xbe>
    14ca:	2f 81       	ldd	r18, Y+7	; 0x07
    14cc:	38 85       	ldd	r19, Y+8	; 0x08
    14ce:	23 30       	cpi	r18, 0x03	; 3
    14d0:	31 05       	cpc	r19, r1
    14d2:	34 f4       	brge	.+12     	; 0x14e0 <M_DIO_Void_SetPinValue+0x7c>
    14d4:	8f 81       	ldd	r24, Y+7	; 0x07
    14d6:	98 85       	ldd	r25, Y+8	; 0x08
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	69 f0       	breq	.+26     	; 0x14f8 <M_DIO_Void_SetPinValue+0x94>
    14de:	cf c0       	rjmp	.+414    	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
    14e0:	2f 81       	ldd	r18, Y+7	; 0x07
    14e2:	38 85       	ldd	r19, Y+8	; 0x08
    14e4:	23 30       	cpi	r18, 0x03	; 3
    14e6:	31 05       	cpc	r19, r1
    14e8:	89 f1       	breq	.+98     	; 0x154c <M_DIO_Void_SetPinValue+0xe8>
    14ea:	8f 81       	ldd	r24, Y+7	; 0x07
    14ec:	98 85       	ldd	r25, Y+8	; 0x08
    14ee:	84 30       	cpi	r24, 0x04	; 4
    14f0:	91 05       	cpc	r25, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <M_DIO_Void_SetPinValue+0x92>
    14f4:	40 c0       	rjmp	.+128    	; 0x1576 <M_DIO_Void_SetPinValue+0x112>
    14f6:	c3 c0       	rjmp	.+390    	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
		case PORTA:     CLR_BIT(PORTA_REG, Local_U8_Pin);    break;
    14f8:	ab e3       	ldi	r26, 0x3B	; 59
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	eb e3       	ldi	r30, 0x3B	; 59
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <M_DIO_Void_SetPinValue+0xb2>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <M_DIO_Void_SetPinValue+0xae>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	ae c0       	rjmp	.+348    	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
		case PORTB:		CLR_BIT(PORTB_REG, Local_U8_Pin);    break;
    1522:	a8 e3       	ldi	r26, 0x38	; 56
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e8 e3       	ldi	r30, 0x38	; 56
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <M_DIO_Void_SetPinValue+0xdc>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <M_DIO_Void_SetPinValue+0xd8>
    1544:	80 95       	com	r24
    1546:	84 23       	and	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	99 c0       	rjmp	.+306    	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
		case PORTC:     CLR_BIT(PORTC_REG, Local_U8_Pin);    break;
    154c:	a5 e3       	ldi	r26, 0x35	; 53
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e5 e3       	ldi	r30, 0x35	; 53
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <M_DIO_Void_SetPinValue+0x106>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <M_DIO_Void_SetPinValue+0x102>
    156e:	80 95       	com	r24
    1570:	84 23       	and	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	84 c0       	rjmp	.+264    	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
		case PORTD:     CLR_BIT(PORTD_REG, Local_U8_Pin);    break;
    1576:	a2 e3       	ldi	r26, 0x32	; 50
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e2 e3       	ldi	r30, 0x32	; 50
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <M_DIO_Void_SetPinValue+0x130>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <M_DIO_Void_SetPinValue+0x12c>
    1598:	80 95       	com	r24
    159a:	84 23       	and	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	6f c0       	rjmp	.+222    	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
		default:        break;
		}
		break;
	case HIGH:
		switch (Local_U8_Port) {
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	3e 83       	std	Y+6, r19	; 0x06
    15a8:	2d 83       	std	Y+5, r18	; 0x05
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	91 05       	cpc	r25, r1
    15b2:	51 f1       	breq	.+84     	; 0x1608 <M_DIO_Void_SetPinValue+0x1a4>
    15b4:	2d 81       	ldd	r18, Y+5	; 0x05
    15b6:	3e 81       	ldd	r19, Y+6	; 0x06
    15b8:	23 30       	cpi	r18, 0x03	; 3
    15ba:	31 05       	cpc	r19, r1
    15bc:	34 f4       	brge	.+12     	; 0x15ca <M_DIO_Void_SetPinValue+0x166>
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	61 f0       	breq	.+24     	; 0x15e0 <M_DIO_Void_SetPinValue+0x17c>
    15c8:	5a c0       	rjmp	.+180    	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
    15ca:	2d 81       	ldd	r18, Y+5	; 0x05
    15cc:	3e 81       	ldd	r19, Y+6	; 0x06
    15ce:	23 30       	cpi	r18, 0x03	; 3
    15d0:	31 05       	cpc	r19, r1
    15d2:	71 f1       	breq	.+92     	; 0x1630 <M_DIO_Void_SetPinValue+0x1cc>
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	84 30       	cpi	r24, 0x04	; 4
    15da:	91 05       	cpc	r25, r1
    15dc:	e9 f1       	breq	.+122    	; 0x1658 <M_DIO_Void_SetPinValue+0x1f4>
    15de:	4f c0       	rjmp	.+158    	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
		case PORTA:	   SET_BIT(PORTA_REG, Local_U8_Pin);    break;
    15e0:	ab e3       	ldi	r26, 0x3B	; 59
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <M_DIO_Void_SetPinValue+0x19a>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <M_DIO_Void_SetPinValue+0x196>
    1602:	84 2b       	or	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	3b c0       	rjmp	.+118    	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
		case PORTB:    SET_BIT(PORTB_REG, Local_U8_Pin);  	break;
    1608:	a8 e3       	ldi	r26, 0x38	; 56
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e8 e3       	ldi	r30, 0x38	; 56
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <M_DIO_Void_SetPinValue+0x1c2>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <M_DIO_Void_SetPinValue+0x1be>
    162a:	84 2b       	or	r24, r20
    162c:	8c 93       	st	X, r24
    162e:	27 c0       	rjmp	.+78     	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
		case PORTC:    SET_BIT(PORTC_REG, Local_U8_Pin); 	break;
    1630:	a5 e3       	ldi	r26, 0x35	; 53
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e3       	ldi	r30, 0x35	; 53
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <M_DIO_Void_SetPinValue+0x1ea>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <M_DIO_Void_SetPinValue+0x1e6>
    1652:	84 2b       	or	r24, r20
    1654:	8c 93       	st	X, r24
    1656:	13 c0       	rjmp	.+38     	; 0x167e <M_DIO_Void_SetPinValue+0x21a>
		case PORTD:    SET_BIT(PORTD_REG, Local_U8_Pin); 	break;
    1658:	a2 e3       	ldi	r26, 0x32	; 50
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e2 e3       	ldi	r30, 0x32	; 50
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <M_DIO_Void_SetPinValue+0x212>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <M_DIO_Void_SetPinValue+0x20e>
    167a:	84 2b       	or	r24, r20
    167c:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    167e:	2a 96       	adiw	r28, 0x0a	; 10
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <M_DIO_Void_SetPinPullUpResistor>:

void M_DIO_Void_SetPinPullUpResistor(u8 Copy_U8_Num, u8 Copy_U8_State)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	2a 97       	sbiw	r28, 0x0a	; 10
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	8b 83       	std	Y+3, r24	; 0x03
    16a6:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	9a e0       	ldi	r25, 0x0A	; 10
    16ac:	69 2f       	mov	r22, r25
    16ae:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    16b2:	89 2f       	mov	r24, r25
    16b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9a e0       	ldi	r25, 0x0A	; 10
    16ba:	69 2f       	mov	r22, r25
    16bc:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    16c0:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_U8_State)
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3a 87       	std	Y+10, r19	; 0x0a
    16ca:	29 87       	std	Y+9, r18	; 0x09
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	39 f0       	breq	.+14     	; 0x16e2 <M_DIO_Void_SetPinPullUpResistor+0x52>
    16d4:	29 85       	ldd	r18, Y+9	; 0x09
    16d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16d8:	21 30       	cpi	r18, 0x01	; 1
    16da:	31 05       	cpc	r19, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <M_DIO_Void_SetPinPullUpResistor+0x50>
    16de:	76 c0       	rjmp	.+236    	; 0x17cc <M_DIO_Void_SetPinPullUpResistor+0x13c>
    16e0:	e4 c0       	rjmp	.+456    	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
	{
	case DISABLE:
		switch (Local_U8_Port)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	38 87       	std	Y+8, r19	; 0x08
    16ea:	2f 83       	std	Y+7, r18	; 0x07
    16ec:	8f 81       	ldd	r24, Y+7	; 0x07
    16ee:	98 85       	ldd	r25, Y+8	; 0x08
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	91 05       	cpc	r25, r1
    16f4:	61 f1       	breq	.+88     	; 0x174e <M_DIO_Void_SetPinPullUpResistor+0xbe>
    16f6:	2f 81       	ldd	r18, Y+7	; 0x07
    16f8:	38 85       	ldd	r19, Y+8	; 0x08
    16fa:	23 30       	cpi	r18, 0x03	; 3
    16fc:	31 05       	cpc	r19, r1
    16fe:	34 f4       	brge	.+12     	; 0x170c <M_DIO_Void_SetPinPullUpResistor+0x7c>
    1700:	8f 81       	ldd	r24, Y+7	; 0x07
    1702:	98 85       	ldd	r25, Y+8	; 0x08
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	91 05       	cpc	r25, r1
    1708:	69 f0       	breq	.+26     	; 0x1724 <M_DIO_Void_SetPinPullUpResistor+0x94>
    170a:	cf c0       	rjmp	.+414    	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
    170c:	2f 81       	ldd	r18, Y+7	; 0x07
    170e:	38 85       	ldd	r19, Y+8	; 0x08
    1710:	23 30       	cpi	r18, 0x03	; 3
    1712:	31 05       	cpc	r19, r1
    1714:	89 f1       	breq	.+98     	; 0x1778 <M_DIO_Void_SetPinPullUpResistor+0xe8>
    1716:	8f 81       	ldd	r24, Y+7	; 0x07
    1718:	98 85       	ldd	r25, Y+8	; 0x08
    171a:	84 30       	cpi	r24, 0x04	; 4
    171c:	91 05       	cpc	r25, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <M_DIO_Void_SetPinPullUpResistor+0x92>
    1720:	40 c0       	rjmp	.+128    	; 0x17a2 <M_DIO_Void_SetPinPullUpResistor+0x112>
    1722:	c3 c0       	rjmp	.+390    	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
		{
		case PORTA:     CLR_BIT(PORTA_REG, Local_U8_Pin);    break;
    1724:	ab e3       	ldi	r26, 0x3B	; 59
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	eb e3       	ldi	r30, 0x3B	; 59
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <M_DIO_Void_SetPinPullUpResistor+0xb2>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <M_DIO_Void_SetPinPullUpResistor+0xae>
    1746:	80 95       	com	r24
    1748:	84 23       	and	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	ae c0       	rjmp	.+348    	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case PORTB:		CLR_BIT(PORTB_REG, Local_U8_Pin);    break;
    174e:	a8 e3       	ldi	r26, 0x38	; 56
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e8 e3       	ldi	r30, 0x38	; 56
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <M_DIO_Void_SetPinPullUpResistor+0xdc>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <M_DIO_Void_SetPinPullUpResistor+0xd8>
    1770:	80 95       	com	r24
    1772:	84 23       	and	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	99 c0       	rjmp	.+306    	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case PORTC:     CLR_BIT(PORTC_REG, Local_U8_Pin);    break;
    1778:	a5 e3       	ldi	r26, 0x35	; 53
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e5 e3       	ldi	r30, 0x35	; 53
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <M_DIO_Void_SetPinPullUpResistor+0x106>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <M_DIO_Void_SetPinPullUpResistor+0x102>
    179a:	80 95       	com	r24
    179c:	84 23       	and	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	84 c0       	rjmp	.+264    	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case PORTD:     CLR_BIT(PORTD_REG, Local_U8_Pin);    break;
    17a2:	a2 e3       	ldi	r26, 0x32	; 50
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <M_DIO_Void_SetPinPullUpResistor+0x130>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <M_DIO_Void_SetPinPullUpResistor+0x12c>
    17c4:	80 95       	com	r24
    17c6:	84 23       	and	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	6f c0       	rjmp	.+222    	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
		default:        break;
		}
		break;
	case ENABLE:
		switch (Local_U8_Port)
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	3e 83       	std	Y+6, r19	; 0x06
    17d4:	2d 83       	std	Y+5, r18	; 0x05
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	91 05       	cpc	r25, r1
    17de:	51 f1       	breq	.+84     	; 0x1834 <M_DIO_Void_SetPinPullUpResistor+0x1a4>
    17e0:	2d 81       	ldd	r18, Y+5	; 0x05
    17e2:	3e 81       	ldd	r19, Y+6	; 0x06
    17e4:	23 30       	cpi	r18, 0x03	; 3
    17e6:	31 05       	cpc	r19, r1
    17e8:	34 f4       	brge	.+12     	; 0x17f6 <M_DIO_Void_SetPinPullUpResistor+0x166>
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	91 05       	cpc	r25, r1
    17f2:	61 f0       	breq	.+24     	; 0x180c <M_DIO_Void_SetPinPullUpResistor+0x17c>
    17f4:	5a c0       	rjmp	.+180    	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
    17f6:	2d 81       	ldd	r18, Y+5	; 0x05
    17f8:	3e 81       	ldd	r19, Y+6	; 0x06
    17fa:	23 30       	cpi	r18, 0x03	; 3
    17fc:	31 05       	cpc	r19, r1
    17fe:	71 f1       	breq	.+92     	; 0x185c <M_DIO_Void_SetPinPullUpResistor+0x1cc>
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	9e 81       	ldd	r25, Y+6	; 0x06
    1804:	84 30       	cpi	r24, 0x04	; 4
    1806:	91 05       	cpc	r25, r1
    1808:	e9 f1       	breq	.+122    	; 0x1884 <M_DIO_Void_SetPinPullUpResistor+0x1f4>
    180a:	4f c0       	rjmp	.+158    	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
		{
		case PORTA:	   SET_BIT(PORTA_REG, Local_U8_Pin);    break;
    180c:	ab e3       	ldi	r26, 0x3B	; 59
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	eb e3       	ldi	r30, 0x3B	; 59
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	48 2f       	mov	r20, r24
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 2e       	mov	r0, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <M_DIO_Void_SetPinPullUpResistor+0x19a>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	0a 94       	dec	r0
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <M_DIO_Void_SetPinPullUpResistor+0x196>
    182e:	84 2b       	or	r24, r20
    1830:	8c 93       	st	X, r24
    1832:	3b c0       	rjmp	.+118    	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case PORTB:    SET_BIT(PORTB_REG, Local_U8_Pin);  	break;
    1834:	a8 e3       	ldi	r26, 0x38	; 56
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e8 e3       	ldi	r30, 0x38	; 56
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 2e       	mov	r0, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <M_DIO_Void_SetPinPullUpResistor+0x1c2>
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	0a 94       	dec	r0
    1854:	e2 f7       	brpl	.-8      	; 0x184e <M_DIO_Void_SetPinPullUpResistor+0x1be>
    1856:	84 2b       	or	r24, r20
    1858:	8c 93       	st	X, r24
    185a:	27 c0       	rjmp	.+78     	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case PORTC:    SET_BIT(PORTC_REG, Local_U8_Pin); 	break;
    185c:	a5 e3       	ldi	r26, 0x35	; 53
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e5 e3       	ldi	r30, 0x35	; 53
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	48 2f       	mov	r20, r24
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 2e       	mov	r0, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <M_DIO_Void_SetPinPullUpResistor+0x1ea>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <M_DIO_Void_SetPinPullUpResistor+0x1e6>
    187e:	84 2b       	or	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	13 c0       	rjmp	.+38     	; 0x18aa <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case PORTD:    SET_BIT(PORTD_REG, Local_U8_Pin); 	break;
    1884:	a2 e3       	ldi	r26, 0x32	; 50
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e2 e3       	ldi	r30, 0x32	; 50
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <M_DIO_Void_SetPinPullUpResistor+0x212>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <M_DIO_Void_SetPinPullUpResistor+0x20e>
    18a6:	84 2b       	or	r24, r20
    18a8:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    18aa:	2a 96       	adiw	r28, 0x0a	; 10
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <M_DIO_Void_TogPin>:

void M_DIO_Void_TogPin(u8 Copy_U8_Num)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <M_DIO_Void_TogPin+0x6>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <M_DIO_Void_TogPin+0x8>
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9a e0       	ldi	r25, 0x0A	; 10
    18d0:	69 2f       	mov	r22, r25
    18d2:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    18d6:	89 2f       	mov	r24, r25
    18d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9a e0       	ldi	r25, 0x0A	; 10
    18de:	69 2f       	mov	r22, r25
    18e0:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    18e4:	89 83       	std	Y+1, r24	; 0x01

		switch (Local_U8_Port)
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	3d 83       	std	Y+5, r19	; 0x05
    18ee:	2c 83       	std	Y+4, r18	; 0x04
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	91 05       	cpc	r25, r1
    18f8:	51 f1       	breq	.+84     	; 0x194e <M_DIO_Void_TogPin+0x92>
    18fa:	2c 81       	ldd	r18, Y+4	; 0x04
    18fc:	3d 81       	ldd	r19, Y+5	; 0x05
    18fe:	23 30       	cpi	r18, 0x03	; 3
    1900:	31 05       	cpc	r19, r1
    1902:	34 f4       	brge	.+12     	; 0x1910 <M_DIO_Void_TogPin+0x54>
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	91 05       	cpc	r25, r1
    190c:	61 f0       	breq	.+24     	; 0x1926 <M_DIO_Void_TogPin+0x6a>
    190e:	5a c0       	rjmp	.+180    	; 0x19c4 <M_DIO_Void_TogPin+0x108>
    1910:	2c 81       	ldd	r18, Y+4	; 0x04
    1912:	3d 81       	ldd	r19, Y+5	; 0x05
    1914:	23 30       	cpi	r18, 0x03	; 3
    1916:	31 05       	cpc	r19, r1
    1918:	71 f1       	breq	.+92     	; 0x1976 <M_DIO_Void_TogPin+0xba>
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	84 30       	cpi	r24, 0x04	; 4
    1920:	91 05       	cpc	r25, r1
    1922:	e9 f1       	breq	.+122    	; 0x199e <M_DIO_Void_TogPin+0xe2>
    1924:	4f c0       	rjmp	.+158    	; 0x19c4 <M_DIO_Void_TogPin+0x108>
		{
			case PORTA:     TOG_BIT(PORTA_REG, Local_U8_Pin);    break;
    1926:	ab e3       	ldi	r26, 0x3B	; 59
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	eb e3       	ldi	r30, 0x3B	; 59
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <M_DIO_Void_TogPin+0x88>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <M_DIO_Void_TogPin+0x84>
    1948:	84 27       	eor	r24, r20
    194a:	8c 93       	st	X, r24
    194c:	3b c0       	rjmp	.+118    	; 0x19c4 <M_DIO_Void_TogPin+0x108>
			case PORTB:		TOG_BIT(PORTB_REG, Local_U8_Pin);    break;
    194e:	a8 e3       	ldi	r26, 0x38	; 56
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e8 e3       	ldi	r30, 0x38	; 56
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 2e       	mov	r0, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <M_DIO_Void_TogPin+0xb0>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	0a 94       	dec	r0
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <M_DIO_Void_TogPin+0xac>
    1970:	84 27       	eor	r24, r20
    1972:	8c 93       	st	X, r24
    1974:	27 c0       	rjmp	.+78     	; 0x19c4 <M_DIO_Void_TogPin+0x108>
			case PORTC:     TOG_BIT(PORTC_REG, Local_U8_Pin);    break;
    1976:	a5 e3       	ldi	r26, 0x35	; 53
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e5 e3       	ldi	r30, 0x35	; 53
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <M_DIO_Void_TogPin+0xd8>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <M_DIO_Void_TogPin+0xd4>
    1998:	84 27       	eor	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	13 c0       	rjmp	.+38     	; 0x19c4 <M_DIO_Void_TogPin+0x108>
			case PORTD:     TOG_BIT(PORTD_REG, Local_U8_Pin);    break;
    199e:	a2 e3       	ldi	r26, 0x32	; 50
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e2 e3       	ldi	r30, 0x32	; 50
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <M_DIO_Void_TogPin+0x100>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <M_DIO_Void_TogPin+0xfc>
    19c0:	84 27       	eor	r24, r20
    19c2:	8c 93       	st	X, r24
			default:                                             break;
        }
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <M_DIO_U8_GetPinValue>:

u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <M_DIO_U8_GetPinValue+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <M_DIO_U8_GetPinValue+0x8>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <M_DIO_U8_GetPinValue+0xa>
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	9a e0       	ldi	r25, 0x0A	; 10
    19e8:	69 2f       	mov	r22, r25
    19ea:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    19ee:	89 2f       	mov	r24, r25
    19f0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Port = Copy_U8_Num / 10;
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	9a e0       	ldi	r25, 0x0A	; 10
    19f6:	69 2f       	mov	r22, r25
    19f8:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    19fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading=0;
    19fe:	19 82       	std	Y+1, r1	; 0x01
	switch (Local_U8_Port)
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	3e 83       	std	Y+6, r19	; 0x06
    1a08:	2d 83       	std	Y+5, r18	; 0x05
    1a0a:	4d 81       	ldd	r20, Y+5	; 0x05
    1a0c:	5e 81       	ldd	r21, Y+6	; 0x06
    1a0e:	42 30       	cpi	r20, 0x02	; 2
    1a10:	51 05       	cpc	r21, r1
    1a12:	41 f1       	breq	.+80     	; 0x1a64 <M_DIO_U8_GetPinValue+0x90>
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	9e 81       	ldd	r25, Y+6	; 0x06
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	34 f4       	brge	.+12     	; 0x1a2a <M_DIO_U8_GetPinValue+0x56>
    1a1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a20:	3e 81       	ldd	r19, Y+6	; 0x06
    1a22:	21 30       	cpi	r18, 0x01	; 1
    1a24:	31 05       	cpc	r19, r1
    1a26:	61 f0       	breq	.+24     	; 0x1a40 <M_DIO_U8_GetPinValue+0x6c>
    1a28:	52 c0       	rjmp	.+164    	; 0x1ace <M_DIO_U8_GetPinValue+0xfa>
    1a2a:	4d 81       	ldd	r20, Y+5	; 0x05
    1a2c:	5e 81       	ldd	r21, Y+6	; 0x06
    1a2e:	43 30       	cpi	r20, 0x03	; 3
    1a30:	51 05       	cpc	r21, r1
    1a32:	51 f1       	breq	.+84     	; 0x1a88 <M_DIO_U8_GetPinValue+0xb4>
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	84 30       	cpi	r24, 0x04	; 4
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	b9 f1       	breq	.+110    	; 0x1aac <M_DIO_U8_GetPinValue+0xd8>
    1a3e:	47 c0       	rjmp	.+142    	; 0x1ace <M_DIO_U8_GetPinValue+0xfa>
	{
		case PORTA:   Local_U8_Reading = GET_BIT(PINA_REG, Local_U8_Pin);    break;
    1a40:	e9 e3       	ldi	r30, 0x39	; 57
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a9 01       	movw	r20, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <M_DIO_U8_GetPinValue+0x84>
    1a54:	55 95       	asr	r21
    1a56:	47 95       	ror	r20
    1a58:	8a 95       	dec	r24
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <M_DIO_U8_GetPinValue+0x80>
    1a5c:	ca 01       	movw	r24, r20
    1a5e:	81 70       	andi	r24, 0x01	; 1
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	35 c0       	rjmp	.+106    	; 0x1ace <M_DIO_U8_GetPinValue+0xfa>
		case PORTB:   Local_U8_Reading = GET_BIT(PINB_REG, Local_U8_Pin);    break;
    1a64:	e6 e3       	ldi	r30, 0x36	; 54
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a9 01       	movw	r20, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <M_DIO_U8_GetPinValue+0xa8>
    1a78:	55 95       	asr	r21
    1a7a:	47 95       	ror	r20
    1a7c:	8a 95       	dec	r24
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <M_DIO_U8_GetPinValue+0xa4>
    1a80:	ca 01       	movw	r24, r20
    1a82:	81 70       	andi	r24, 0x01	; 1
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	23 c0       	rjmp	.+70     	; 0x1ace <M_DIO_U8_GetPinValue+0xfa>
		case PORTC:   Local_U8_Reading = GET_BIT(PINC_REG, Local_U8_Pin);    break;
    1a88:	e3 e3       	ldi	r30, 0x33	; 51
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a9 01       	movw	r20, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <M_DIO_U8_GetPinValue+0xcc>
    1a9c:	55 95       	asr	r21
    1a9e:	47 95       	ror	r20
    1aa0:	8a 95       	dec	r24
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <M_DIO_U8_GetPinValue+0xc8>
    1aa4:	ca 01       	movw	r24, r20
    1aa6:	81 70       	andi	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	11 c0       	rjmp	.+34     	; 0x1ace <M_DIO_U8_GetPinValue+0xfa>
		case PORTD:   Local_U8_Reading = GET_BIT(PIND_REG, Local_U8_Pin);    break;
    1aac:	e0 e3       	ldi	r30, 0x30	; 48
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a9 01       	movw	r20, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <M_DIO_U8_GetPinValue+0xf0>
    1ac0:	55 95       	asr	r21
    1ac2:	47 95       	ror	r20
    1ac4:	8a 95       	dec	r24
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <M_DIO_U8_GetPinValue+0xec>
    1ac8:	ca 01       	movw	r24, r20
    1aca:	81 70       	andi	r24, 0x01	; 1
    1acc:	89 83       	std	Y+1, r24	; 0x01
		default:                                                             break;
	}
	return Local_U8_Reading;
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad0:	26 96       	adiw	r28, 0x06	; 6
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <M_ADC_Void_ADCInit>:

#include "ADC_Interface.h"
#include "ADC_Private.h"

void M_ADC_Void_ADCInit(void)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
#if      ADC_V_REF_MODE  ==      AVCC
	//To select Vref -> AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
    1aea:	a7 e2       	ldi	r26, 0x27	; 39
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e7 e2       	ldi	r30, 0x27	; 39
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	80 64       	ori	r24, 0x40	; 64
    1af6:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    1af8:	a7 e2       	ldi	r26, 0x27	; 39
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e7 e2       	ldi	r30, 0x27	; 39
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8f 77       	andi	r24, 0x7F	; 127
    1b04:	8c 93       	st	X, r24
#elif      ADC_V_REF_MODE  ==      _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
    //ADC right Adjust
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    1b06:	a7 e2       	ldi	r26, 0x27	; 39
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e7 e2       	ldi	r30, 0x27	; 39
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8f 7d       	andi	r24, 0xDF	; 223
    1b12:	8c 93       	st	X, r24

#if    ADC_PRESCALER_DIV      ==    128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    1b14:	a6 e2       	ldi	r26, 0x26	; 38
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e6 e2       	ldi	r30, 0x26	; 38
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	81 60       	ori	r24, 0x01	; 1
    1b20:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    1b22:	a6 e2       	ldi	r26, 0x26	; 38
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e6 e2       	ldi	r30, 0x26	; 38
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	82 60       	ori	r24, 0x02	; 2
    1b2e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    1b30:	a6 e2       	ldi	r26, 0x26	; 38
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e6 e2       	ldi	r30, 0x26	; 38
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	84 60       	ori	r24, 0x04	; 4
    1b3c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#endif

	//Auto Trigger Enable
	SET_BIT(ADCSRA_REG,ADATE_PIN);
    1b3e:	a6 e2       	ldi	r26, 0x26	; 38
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e6 e2       	ldi	r30, 0x26	; 38
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 62       	ori	r24, 0x20	; 32
    1b4a:	8c 93       	st	X, r24

	//Enable
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    1b4c:	a6 e2       	ldi	r26, 0x26	; 38
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e6 e2       	ldi	r30, 0x26	; 38
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 68       	ori	r24, 0x80	; 128
    1b58:	8c 93       	st	X, r24
}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <M_ADC_U16_ADCRead>:

u16 M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <M_ADC_U16_ADCRead+0x6>
    1b66:	0f 92       	push	r0
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_AdcChannel)//TO select pin
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	3b 83       	std	Y+3, r19	; 0x03
    1b76:	2a 83       	std	Y+2, r18	; 0x02
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <M_ADC_U16_ADCRead+0x24>
    1b82:	9b c0       	rjmp	.+310    	; 0x1cba <M_ADC_U16_ADCRead+0x15a>
    1b84:	2a 81       	ldd	r18, Y+2	; 0x02
    1b86:	3b 81       	ldd	r19, Y+3	; 0x03
    1b88:	24 30       	cpi	r18, 0x04	; 4
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	8c f4       	brge	.+34     	; 0x1bb0 <M_ADC_U16_ADCRead+0x50>
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	91 05       	cpc	r25, r1
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <M_ADC_U16_ADCRead+0x3a>
    1b98:	48 c0       	rjmp	.+144    	; 0x1c2a <M_ADC_U16_ADCRead+0xca>
    1b9a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b9c:	3b 81       	ldd	r19, Y+3	; 0x03
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	0c f0       	brlt	.+2      	; 0x1ba6 <M_ADC_U16_ADCRead+0x46>
    1ba4:	66 c0       	rjmp	.+204    	; 0x1c72 <M_ADC_U16_ADCRead+0x112>
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	d1 f0       	breq	.+52     	; 0x1be2 <M_ADC_U16_ADCRead+0x82>
    1bae:	38 c1       	rjmp	.+624    	; 0x1e20 <M_ADC_U16_ADCRead+0x2c0>
    1bb0:	2a 81       	ldd	r18, Y+2	; 0x02
    1bb2:	3b 81       	ldd	r19, Y+3	; 0x03
    1bb4:	25 30       	cpi	r18, 0x05	; 5
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <M_ADC_U16_ADCRead+0x5c>
    1bba:	c7 c0       	rjmp	.+398    	; 0x1d4a <M_ADC_U16_ADCRead+0x1ea>
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc0:	85 30       	cpi	r24, 0x05	; 5
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	0c f4       	brge	.+2      	; 0x1bc8 <M_ADC_U16_ADCRead+0x68>
    1bc6:	9d c0       	rjmp	.+314    	; 0x1d02 <M_ADC_U16_ADCRead+0x1a2>
    1bc8:	2a 81       	ldd	r18, Y+2	; 0x02
    1bca:	3b 81       	ldd	r19, Y+3	; 0x03
    1bcc:	26 30       	cpi	r18, 0x06	; 6
    1bce:	31 05       	cpc	r19, r1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <M_ADC_U16_ADCRead+0x74>
    1bd2:	df c0       	rjmp	.+446    	; 0x1d92 <M_ADC_U16_ADCRead+0x232>
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd8:	87 30       	cpi	r24, 0x07	; 7
    1bda:	91 05       	cpc	r25, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <M_ADC_U16_ADCRead+0x80>
    1bde:	fd c0       	rjmp	.+506    	; 0x1dda <M_ADC_U16_ADCRead+0x27a>
    1be0:	1f c1       	rjmp	.+574    	; 0x1e20 <M_ADC_U16_ADCRead+0x2c0>
	{
	case ADC_CHANNEL_0:
	    {
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    1be2:	a7 e2       	ldi	r26, 0x27	; 39
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e7 e2       	ldi	r30, 0x27	; 39
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8e 7f       	andi	r24, 0xFE	; 254
    1bee:	8c 93       	st	X, r24
	    CLR_BIT(ADMUX_REG,MUX1_BIT);
    1bf0:	a7 e2       	ldi	r26, 0x27	; 39
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e7 e2       	ldi	r30, 0x27	; 39
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	8d 7f       	andi	r24, 0xFD	; 253
    1bfc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    1bfe:	a7 e2       	ldi	r26, 0x27	; 39
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e7 e2       	ldi	r30, 0x27	; 39
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	8b 7f       	andi	r24, 0xFB	; 251
    1c0a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    1c0c:	a7 e2       	ldi	r26, 0x27	; 39
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e7 e2       	ldi	r30, 0x27	; 39
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	87 7f       	andi	r24, 0xF7	; 247
    1c18:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    1c1a:	a7 e2       	ldi	r26, 0x27	; 39
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e7 e2       	ldi	r30, 0x27	; 39
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7e       	andi	r24, 0xEF	; 239
    1c26:	8c 93       	st	X, r24
    1c28:	fb c0       	rjmp	.+502    	; 0x1e20 <M_ADC_U16_ADCRead+0x2c0>
		break;
	    }
	case ADC_CHANNEL_1:
	    {
		SET_BIT(ADMUX_REG, MUX0_BIT);
    1c2a:	a7 e2       	ldi	r26, 0x27	; 39
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e7 e2       	ldi	r30, 0x27	; 39
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	81 60       	ori	r24, 0x01	; 1
    1c36:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG, MUX1_BIT);
    1c38:	a7 e2       	ldi	r26, 0x27	; 39
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e7 e2       	ldi	r30, 0x27	; 39
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	8d 7f       	andi	r24, 0xFD	; 253
    1c44:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG, MUX2_BIT);
    1c46:	a7 e2       	ldi	r26, 0x27	; 39
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e7 e2       	ldi	r30, 0x27	; 39
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8b 7f       	andi	r24, 0xFB	; 251
    1c52:	8c 93       	st	X, r24
	    CLR_BIT(ADMUX_REG, MUX3_BIT);
    1c54:	a7 e2       	ldi	r26, 0x27	; 39
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e7 e2       	ldi	r30, 0x27	; 39
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	87 7f       	andi	r24, 0xF7	; 247
    1c60:	8c 93       	st	X, r24
	    CLR_BIT(ADMUX_REG, MUX4_BIT);
    1c62:	a7 e2       	ldi	r26, 0x27	; 39
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e7 e2       	ldi	r30, 0x27	; 39
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8f 7e       	andi	r24, 0xEF	; 239
    1c6e:	8c 93       	st	X, r24
    1c70:	d7 c0       	rjmp	.+430    	; 0x1e20 <M_ADC_U16_ADCRead+0x2c0>
	    break;
	    }
	case ADC_CHANNEL_2:
		{
		CLR_BIT(ADMUX_REG, MUX0_BIT);
    1c72:	a7 e2       	ldi	r26, 0x27	; 39
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e7 e2       	ldi	r30, 0x27	; 39
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8e 7f       	andi	r24, 0xFE	; 254
    1c7e:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG, MUX1_BIT);
    1c80:	a7 e2       	ldi	r26, 0x27	; 39
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e7 e2       	ldi	r30, 0x27	; 39
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	82 60       	ori	r24, 0x02	; 2
    1c8c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG, MUX2_BIT);
    1c8e:	a7 e2       	ldi	r26, 0x27	; 39
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e7 e2       	ldi	r30, 0x27	; 39
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8b 7f       	andi	r24, 0xFB	; 251
    1c9a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG, MUX3_BIT);
    1c9c:	a7 e2       	ldi	r26, 0x27	; 39
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e7 e2       	ldi	r30, 0x27	; 39
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	87 7f       	andi	r24, 0xF7	; 247
    1ca8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG, MUX4_BIT);
    1caa:	a7 e2       	ldi	r26, 0x27	; 39
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e7 e2       	ldi	r30, 0x27	; 39
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8f 7e       	andi	r24, 0xEF	; 239
    1cb6:	8c 93       	st	X, r24
    1cb8:	b3 c0       	rjmp	.+358    	; 0x1e20 <M_ADC_U16_ADCRead+0x2c0>
		break;
	    }
	case ADC_CHANNEL_3:
		{
			SET_BIT(ADMUX_REG, MUX0_BIT);
    1cba:	a7 e2       	ldi	r26, 0x27	; 39
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e7 e2       	ldi	r30, 0x27	; 39
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	81 60       	ori	r24, 0x01	; 1
    1cc6:	8c 93       	st	X, r24
			SET_BIT(ADMUX_REG, MUX1_BIT);
    1cc8:	a7 e2       	ldi	r26, 0x27	; 39
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e7 e2       	ldi	r30, 0x27	; 39
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	82 60       	ori	r24, 0x02	; 2
    1cd4:	8c 93       	st	X, r24
			CLR_BIT(ADMUX_REG, MUX2_BIT);
    1cd6:	a7 e2       	ldi	r26, 0x27	; 39
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e7 e2       	ldi	r30, 0x27	; 39
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	8b 7f       	andi	r24, 0xFB	; 251
    1ce2:	8c 93       	st	X, r24
		    CLR_BIT(ADMUX_REG, MUX3_BIT);
    1ce4:	a7 e2       	ldi	r26, 0x27	; 39
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e7 e2       	ldi	r30, 0x27	; 39
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	87 7f       	andi	r24, 0xF7	; 247
    1cf0:	8c 93       	st	X, r24
		    CLR_BIT(ADMUX_REG, MUX4_BIT);
    1cf2:	a7 e2       	ldi	r26, 0x27	; 39
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e7 e2       	ldi	r30, 0x27	; 39
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8f 7e       	andi	r24, 0xEF	; 239
    1cfe:	8c 93       	st	X, r24
    1d00:	8f c0       	rjmp	.+286    	; 0x1e20 <M_ADC_U16_ADCRead+0x2c0>
		break;
		}
	case ADC_CHANNEL_4:
		{
			CLR_BIT(ADMUX_REG, MUX0_BIT);
    1d02:	a7 e2       	ldi	r26, 0x27	; 39
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e7 e2       	ldi	r30, 0x27	; 39
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8e 7f       	andi	r24, 0xFE	; 254
    1d0e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX_REG, MUX1_BIT);
    1d10:	a7 e2       	ldi	r26, 0x27	; 39
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e7 e2       	ldi	r30, 0x27	; 39
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	8d 7f       	andi	r24, 0xFD	; 253
    1d1c:	8c 93       	st	X, r24
			SET_BIT(ADMUX_REG, MUX2_BIT);
    1d1e:	a7 e2       	ldi	r26, 0x27	; 39
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e7 e2       	ldi	r30, 0x27	; 39
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	84 60       	ori	r24, 0x04	; 4
    1d2a:	8c 93       	st	X, r24
		    CLR_BIT(ADMUX_REG, MUX3_BIT);
    1d2c:	a7 e2       	ldi	r26, 0x27	; 39
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e7 e2       	ldi	r30, 0x27	; 39
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	87 7f       	andi	r24, 0xF7	; 247
    1d38:	8c 93       	st	X, r24
		    CLR_BIT(ADMUX_REG, MUX4_BIT);
    1d3a:	a7 e2       	ldi	r26, 0x27	; 39
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e7 e2       	ldi	r30, 0x27	; 39
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8f 7e       	andi	r24, 0xEF	; 239
    1d46:	8c 93       	st	X, r24
    1d48:	6b c0       	rjmp	.+214    	; 0x1e20 <M_ADC_U16_ADCRead+0x2c0>
		break;
		}
	case ADC_CHANNEL_5:
		{
			SET_BIT(ADMUX_REG, MUX0_BIT);
    1d4a:	a7 e2       	ldi	r26, 0x27	; 39
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e7 e2       	ldi	r30, 0x27	; 39
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	81 60       	ori	r24, 0x01	; 1
    1d56:	8c 93       	st	X, r24
			CLR_BIT(ADMUX_REG, MUX1_BIT);
    1d58:	a7 e2       	ldi	r26, 0x27	; 39
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e7 e2       	ldi	r30, 0x27	; 39
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8d 7f       	andi	r24, 0xFD	; 253
    1d64:	8c 93       	st	X, r24
			SET_BIT(ADMUX_REG, MUX2_BIT);
    1d66:	a7 e2       	ldi	r26, 0x27	; 39
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e7 e2       	ldi	r30, 0x27	; 39
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	84 60       	ori	r24, 0x04	; 4
    1d72:	8c 93       	st	X, r24
		    CLR_BIT(ADMUX_REG, MUX3_BIT);
    1d74:	a7 e2       	ldi	r26, 0x27	; 39
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e7 e2       	ldi	r30, 0x27	; 39
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	87 7f       	andi	r24, 0xF7	; 247
    1d80:	8c 93       	st	X, r24
		    CLR_BIT(ADMUX_REG, MUX4_BIT);
    1d82:	a7 e2       	ldi	r26, 0x27	; 39
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e7 e2       	ldi	r30, 0x27	; 39
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8f 7e       	andi	r24, 0xEF	; 239
    1d8e:	8c 93       	st	X, r24
    1d90:	47 c0       	rjmp	.+142    	; 0x1e20 <M_ADC_U16_ADCRead+0x2c0>
		break;
		}
	case ADC_CHANNEL_6:
		{
			CLR_BIT(ADMUX_REG, MUX0_BIT);
    1d92:	a7 e2       	ldi	r26, 0x27	; 39
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e7 e2       	ldi	r30, 0x27	; 39
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8e 7f       	andi	r24, 0xFE	; 254
    1d9e:	8c 93       	st	X, r24
			SET_BIT(ADMUX_REG, MUX1_BIT);
    1da0:	a7 e2       	ldi	r26, 0x27	; 39
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e7 e2       	ldi	r30, 0x27	; 39
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	82 60       	ori	r24, 0x02	; 2
    1dac:	8c 93       	st	X, r24
			SET_BIT(ADMUX_REG, MUX2_BIT);
    1dae:	a7 e2       	ldi	r26, 0x27	; 39
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e7 e2       	ldi	r30, 0x27	; 39
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	84 60       	ori	r24, 0x04	; 4
    1dba:	8c 93       	st	X, r24
		    CLR_BIT(ADMUX_REG, MUX3_BIT);
    1dbc:	a7 e2       	ldi	r26, 0x27	; 39
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e7 e2       	ldi	r30, 0x27	; 39
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	87 7f       	andi	r24, 0xF7	; 247
    1dc8:	8c 93       	st	X, r24
		    CLR_BIT(ADMUX_REG, MUX4_BIT);
    1dca:	a7 e2       	ldi	r26, 0x27	; 39
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e7 e2       	ldi	r30, 0x27	; 39
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 7e       	andi	r24, 0xEF	; 239
    1dd6:	8c 93       	st	X, r24
    1dd8:	23 c0       	rjmp	.+70     	; 0x1e20 <M_ADC_U16_ADCRead+0x2c0>
		break;
		}
	case ADC_CHANNEL_7:
		{
			SET_BIT(ADMUX_REG, MUX0_BIT);
    1dda:	a7 e2       	ldi	r26, 0x27	; 39
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e7 e2       	ldi	r30, 0x27	; 39
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	81 60       	ori	r24, 0x01	; 1
    1de6:	8c 93       	st	X, r24
			SET_BIT(ADMUX_REG, MUX1_BIT);
    1de8:	a7 e2       	ldi	r26, 0x27	; 39
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e7 e2       	ldi	r30, 0x27	; 39
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	82 60       	ori	r24, 0x02	; 2
    1df4:	8c 93       	st	X, r24
			SET_BIT(ADMUX_REG, MUX2_BIT);
    1df6:	a7 e2       	ldi	r26, 0x27	; 39
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e7 e2       	ldi	r30, 0x27	; 39
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	84 60       	ori	r24, 0x04	; 4
    1e02:	8c 93       	st	X, r24
		    CLR_BIT(ADMUX_REG, MUX3_BIT);
    1e04:	a7 e2       	ldi	r26, 0x27	; 39
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e7 e2       	ldi	r30, 0x27	; 39
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	87 7f       	andi	r24, 0xF7	; 247
    1e10:	8c 93       	st	X, r24
		    CLR_BIT(ADMUX_REG, MUX4_BIT);
    1e12:	a7 e2       	ldi	r26, 0x27	; 39
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e7 e2       	ldi	r30, 0x27	; 39
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8f 7e       	andi	r24, 0xEF	; 239
    1e1e:	8c 93       	st	X, r24
		break;
		}
	default:  break;
	}
    //Start Conversion kol mara bghar feha el eraya
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    1e20:	a6 e2       	ldi	r26, 0x26	; 38
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e6 e2       	ldi	r30, 0x26	; 38
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 64       	ori	r24, 0x40	; 64
    1e2c:	8c 93       	st	X, r24

    //bdal el delay ashan ana msh arfa haykhls katb fl register emta
	while(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_DELAY);
    1e2e:	e6 e2       	ldi	r30, 0x26	; 38
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	82 95       	swap	r24
    1e36:	8f 70       	andi	r24, 0x0F	; 15
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	81 70       	andi	r24, 0x01	; 1
    1e3e:	90 70       	andi	r25, 0x00	; 0
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	a9 f3       	breq	.-22     	; 0x1e2e <M_ADC_U16_ADCRead+0x2ce>
    return ADCL_REG;
    1e44:	e4 e2       	ldi	r30, 0x24	; 36
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <H_SSD_Void_SSDInit>:

#include "SSD_Interface.h"
#include "SSD_Private.h"

void H_SSD_Void_SSDInit(void)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
   M_DIO_Void_SetPinDirection(SSD_A_PIN,OUTPUT);
    1e60:	8e e0       	ldi	r24, 0x0E	; 14
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
   M_DIO_Void_SetPinDirection(SSD_B_PIN,OUTPUT);
    1e68:	8f e0       	ldi	r24, 0x0F	; 15
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
   M_DIO_Void_SetPinDirection(SSD_C_PIN,OUTPUT);
    1e70:	80 e1       	ldi	r24, 0x10	; 16
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
   M_DIO_Void_SetPinDirection(SSD_D_PIN,OUTPUT);
    1e78:	81 e1       	ldi	r24, 0x11	; 17
    1e7a:	61 e0       	ldi	r22, 0x01	; 1
    1e7c:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>

   M_DIO_Void_SetPinDirection(SSD_EN1_PIN,OUTPUT);
    1e80:	86 e1       	ldi	r24, 0x16	; 22
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
   M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
    1e88:	85 e1       	ldi	r24, 0x15	; 21
    1e8a:	61 e0       	ldi	r22, 0x01	; 1
    1e8c:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>

}
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <H_SSD_Void_SSDDigitDisplay>:

//I can't call this function outside this file so thats why it is static
static void H_SSD_Void_SSDDigitDisplay(u8 Copy_U8_Number)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <H_SSD_Void_SSDDigitDisplay+0x6>
    1e9c:	0f 92       	push	r0
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Number)
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	3b 83       	std	Y+3, r19	; 0x03
    1eac:	2a 83       	std	Y+2, r18	; 0x02
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb2:	84 30       	cpi	r24, 0x04	; 4
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <H_SSD_Void_SSDDigitDisplay+0x24>
    1eb8:	8b c0       	rjmp	.+278    	; 0x1fd0 <H_SSD_Void_SSDDigitDisplay+0x13a>
    1eba:	2a 81       	ldd	r18, Y+2	; 0x02
    1ebc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ebe:	25 30       	cpi	r18, 0x05	; 5
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	ec f4       	brge	.+58     	; 0x1efe <H_SSD_Void_SSDDigitDisplay+0x68>
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	91 05       	cpc	r25, r1
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <H_SSD_Void_SSDDigitDisplay+0x3a>
    1ece:	4d c0       	rjmp	.+154    	; 0x1f6a <H_SSD_Void_SSDDigitDisplay+0xd4>
    1ed0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ed2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <H_SSD_Void_SSDDigitDisplay+0x4e>
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	99 f1       	breq	.+102    	; 0x1f48 <H_SSD_Void_SSDDigitDisplay+0xb2>
    1ee2:	db c0       	rjmp	.+438    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
    1ee4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <H_SSD_Void_SSDDigitDisplay+0x5a>
    1eee:	4e c0       	rjmp	.+156    	; 0x1f8c <H_SSD_Void_SSDDigitDisplay+0xf6>
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	83 30       	cpi	r24, 0x03	; 3
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <H_SSD_Void_SSDDigitDisplay+0x66>
    1efa:	59 c0       	rjmp	.+178    	; 0x1fae <H_SSD_Void_SSDDigitDisplay+0x118>
    1efc:	ce c0       	rjmp	.+412    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
    1efe:	2a 81       	ldd	r18, Y+2	; 0x02
    1f00:	3b 81       	ldd	r19, Y+3	; 0x03
    1f02:	27 30       	cpi	r18, 0x07	; 7
    1f04:	31 05       	cpc	r19, r1
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <H_SSD_Void_SSDDigitDisplay+0x74>
    1f08:	96 c0       	rjmp	.+300    	; 0x2036 <H_SSD_Void_SSDDigitDisplay+0x1a0>
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0e:	88 30       	cpi	r24, 0x08	; 8
    1f10:	91 05       	cpc	r25, r1
    1f12:	6c f4       	brge	.+26     	; 0x1f2e <H_SSD_Void_SSDDigitDisplay+0x98>
    1f14:	2a 81       	ldd	r18, Y+2	; 0x02
    1f16:	3b 81       	ldd	r19, Y+3	; 0x03
    1f18:	25 30       	cpi	r18, 0x05	; 5
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <H_SSD_Void_SSDDigitDisplay+0x8a>
    1f1e:	69 c0       	rjmp	.+210    	; 0x1ff2 <H_SSD_Void_SSDDigitDisplay+0x15c>
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	9b 81       	ldd	r25, Y+3	; 0x03
    1f24:	86 30       	cpi	r24, 0x06	; 6
    1f26:	91 05       	cpc	r25, r1
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <H_SSD_Void_SSDDigitDisplay+0x96>
    1f2a:	74 c0       	rjmp	.+232    	; 0x2014 <H_SSD_Void_SSDDigitDisplay+0x17e>
    1f2c:	b6 c0       	rjmp	.+364    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
    1f2e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f30:	3b 81       	ldd	r19, Y+3	; 0x03
    1f32:	28 30       	cpi	r18, 0x08	; 8
    1f34:	31 05       	cpc	r19, r1
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <H_SSD_Void_SSDDigitDisplay+0xa4>
    1f38:	8f c0       	rjmp	.+286    	; 0x2058 <H_SSD_Void_SSDDigitDisplay+0x1c2>
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3e:	89 30       	cpi	r24, 0x09	; 9
    1f40:	91 05       	cpc	r25, r1
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <H_SSD_Void_SSDDigitDisplay+0xb0>
    1f44:	9a c0       	rjmp	.+308    	; 0x207a <H_SSD_Void_SSDDigitDisplay+0x1e4>
    1f46:	a9 c0       	rjmp	.+338    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
	{
	case 0:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1f48:	8e e0       	ldi	r24, 0x0E	; 14
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1f50:	8f e0       	ldi	r24, 0x0F	; 15
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1f58:	80 e1       	ldi	r24, 0x10	; 16
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1f60:	81 e1       	ldi	r24, 0x11	; 17
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    1f68:	98 c0       	rjmp	.+304    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
		break;
	case 1:
			M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1f6a:	8e e0       	ldi	r24, 0x0E	; 14
    1f6c:	61 e0       	ldi	r22, 0x01	; 1
    1f6e:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1f72:	8f e0       	ldi	r24, 0x0F	; 15
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1f7a:	80 e1       	ldi	r24, 0x10	; 16
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1f82:	81 e1       	ldi	r24, 0x11	; 17
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    1f8a:	87 c0       	rjmp	.+270    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
			break;

	case 2:
			M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1f8c:	8e e0       	ldi	r24, 0x0E	; 14
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    1f94:	8f e0       	ldi	r24, 0x0F	; 15
    1f96:	61 e0       	ldi	r22, 0x01	; 1
    1f98:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1f9c:	80 e1       	ldi	r24, 0x10	; 16
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1fa4:	81 e1       	ldi	r24, 0x11	; 17
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    1fac:	76 c0       	rjmp	.+236    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
			break;
	case 3:
			M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1fae:	8e e0       	ldi	r24, 0x0E	; 14
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    1fb6:	8f e0       	ldi	r24, 0x0F	; 15
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1fbe:	80 e1       	ldi	r24, 0x10	; 16
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1fc6:	81 e1       	ldi	r24, 0x11	; 17
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    1fce:	65 c0       	rjmp	.+202    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
			break;
	case 4:
			M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1fd0:	8e e0       	ldi	r24, 0x0E	; 14
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1fd8:	8f e0       	ldi	r24, 0x0F	; 15
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    1fe0:	80 e1       	ldi	r24, 0x10	; 16
    1fe2:	61 e0       	ldi	r22, 0x01	; 1
    1fe4:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1fe8:	81 e1       	ldi	r24, 0x11	; 17
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    1ff0:	54 c0       	rjmp	.+168    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
			break;
	case 5:
			M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1ff2:	8e e0       	ldi	r24, 0x0E	; 14
    1ff4:	61 e0       	ldi	r22, 0x01	; 1
    1ff6:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1ffa:	8f e0       	ldi	r24, 0x0F	; 15
    1ffc:	60 e0       	ldi	r22, 0x00	; 0
    1ffe:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    2002:	80 e1       	ldi	r24, 0x10	; 16
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    200a:	81 e1       	ldi	r24, 0x11	; 17
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2012:	43 c0       	rjmp	.+134    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
			break;
	case 6:
			M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    2014:	8e e0       	ldi	r24, 0x0E	; 14
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    201c:	8f e0       	ldi	r24, 0x0F	; 15
    201e:	61 e0       	ldi	r22, 0x01	; 1
    2020:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    2024:	80 e1       	ldi	r24, 0x10	; 16
    2026:	61 e0       	ldi	r22, 0x01	; 1
    2028:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    202c:	81 e1       	ldi	r24, 0x11	; 17
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2034:	32 c0       	rjmp	.+100    	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
			break;
	case 7:
			M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    2036:	8e e0       	ldi	r24, 0x0E	; 14
    2038:	61 e0       	ldi	r22, 0x01	; 1
    203a:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    203e:	8f e0       	ldi	r24, 0x0F	; 15
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    2046:	80 e1       	ldi	r24, 0x10	; 16
    2048:	61 e0       	ldi	r22, 0x01	; 1
    204a:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    204e:	81 e1       	ldi	r24, 0x11	; 17
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2056:	21 c0       	rjmp	.+66     	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
			break;
	case 8:
			M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    2058:	8e e0       	ldi	r24, 0x0E	; 14
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    2060:	8f e0       	ldi	r24, 0x0F	; 15
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    2068:	80 e1       	ldi	r24, 0x10	; 16
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_D_PIN,HIGH);
    2070:	81 e1       	ldi	r24, 0x11	; 17
    2072:	61 e0       	ldi	r22, 0x01	; 1
    2074:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2078:	10 c0       	rjmp	.+32     	; 0x209a <H_SSD_Void_SSDDigitDisplay+0x204>
			break;
	case 9:
			M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    207a:	8e e0       	ldi	r24, 0x0E	; 14
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    2082:	8f e0       	ldi	r24, 0x0F	; 15
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    208a:	80 e1       	ldi	r24, 0x10	; 16
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			M_DIO_Void_SetPinValue(SSD_D_PIN,HIGH);
    2092:	81 e1       	ldi	r24, 0x11	; 17
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
			break;
	}
}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <H_SSD_Void_SSDWriteNumber>:

void H_SSD_Void_SSDWriteNumber(u8 Copy_U8_Number)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	a3 97       	sbiw	r28, 0x23	; 35
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	8b a3       	std	Y+35, r24	; 0x23
	u32 Local_U32_Counter = 0;
    20bc:	1f 8e       	std	Y+31, r1	; 0x1f
    20be:	18 a2       	std	Y+32, r1	; 0x20
    20c0:	19 a2       	std	Y+33, r1	; 0x21
    20c2:	1a a2       	std	Y+34, r1	; 0x22
    20c4:	12 c1       	rjmp	.+548    	; 0x22ea <H_SSD_Void_SSDWriteNumber+0x244>
	for(;Local_U32_Counter<500;Local_U32_Counter++)
	{
	u8 Local_U8_Ones = Copy_U8_Number % 10;
    20c6:	8b a1       	ldd	r24, Y+35	; 0x23
    20c8:	9a e0       	ldi	r25, 0x0A	; 10
    20ca:	69 2f       	mov	r22, r25
    20cc:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    20d0:	89 2f       	mov	r24, r25
    20d2:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Local_U8_Tens = Copy_U8_Number / 10;
    20d4:	8b a1       	ldd	r24, Y+35	; 0x23
    20d6:	9a e0       	ldi	r25, 0x0A	; 10
    20d8:	69 2f       	mov	r22, r25
    20da:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__udivmodqi4>
    20de:	8d 8f       	std	Y+29, r24	; 0x1d

	H_SSD_Void_SSDDigitDisplay(Local_U8_Ones);
    20e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20e2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <H_SSD_Void_SSDDigitDisplay>

    M_DIO_Void_SetPinValue(SSD_EN2_PIN,HIGH);
    20e6:	85 e1       	ldi	r24, 0x15	; 21
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a0 e8       	ldi	r26, 0x80	; 128
    20f4:	bf e3       	ldi	r27, 0x3F	; 63
    20f6:	89 8f       	std	Y+25, r24	; 0x19
    20f8:	9a 8f       	std	Y+26, r25	; 0x1a
    20fa:	ab 8f       	std	Y+27, r26	; 0x1b
    20fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4a e7       	ldi	r20, 0x7A	; 122
    210c:	55 e4       	ldi	r21, 0x45	; 69
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8d 8b       	std	Y+21, r24	; 0x15
    2118:	9e 8b       	std	Y+22, r25	; 0x16
    211a:	af 8b       	std	Y+23, r26	; 0x17
    211c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    211e:	6d 89       	ldd	r22, Y+21	; 0x15
    2120:	7e 89       	ldd	r23, Y+22	; 0x16
    2122:	8f 89       	ldd	r24, Y+23	; 0x17
    2124:	98 8d       	ldd	r25, Y+24	; 0x18
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	2c f4       	brge	.+10     	; 0x2140 <H_SSD_Void_SSDWriteNumber+0x9a>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9c 8b       	std	Y+20, r25	; 0x14
    213c:	8b 8b       	std	Y+19, r24	; 0x13
    213e:	3f c0       	rjmp	.+126    	; 0x21be <H_SSD_Void_SSDWriteNumber+0x118>
	else if (__tmp > 65535)
    2140:	6d 89       	ldd	r22, Y+21	; 0x15
    2142:	7e 89       	ldd	r23, Y+22	; 0x16
    2144:	8f 89       	ldd	r24, Y+23	; 0x17
    2146:	98 8d       	ldd	r25, Y+24	; 0x18
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	3f ef       	ldi	r19, 0xFF	; 255
    214c:	4f e7       	ldi	r20, 0x7F	; 127
    214e:	57 e4       	ldi	r21, 0x47	; 71
    2150:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2154:	18 16       	cp	r1, r24
    2156:	4c f5       	brge	.+82     	; 0x21aa <H_SSD_Void_SSDWriteNumber+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2158:	69 8d       	ldd	r22, Y+25	; 0x19
    215a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	51 e4       	ldi	r21, 0x41	; 65
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9c 8b       	std	Y+20, r25	; 0x14
    217e:	8b 8b       	std	Y+19, r24	; 0x13
    2180:	0f c0       	rjmp	.+30     	; 0x21a0 <H_SSD_Void_SSDWriteNumber+0xfa>
    2182:	80 e9       	ldi	r24, 0x90	; 144
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	9a 8b       	std	Y+18, r25	; 0x12
    2188:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    218a:	89 89       	ldd	r24, Y+17	; 0x11
    218c:	9a 89       	ldd	r25, Y+18	; 0x12
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <H_SSD_Void_SSDWriteNumber+0xe8>
    2192:	9a 8b       	std	Y+18, r25	; 0x12
    2194:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2196:	8b 89       	ldd	r24, Y+19	; 0x13
    2198:	9c 89       	ldd	r25, Y+20	; 0x14
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	9c 8b       	std	Y+20, r25	; 0x14
    219e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	69 f7       	brne	.-38     	; 0x2182 <H_SSD_Void_SSDWriteNumber+0xdc>
    21a8:	14 c0       	rjmp	.+40     	; 0x21d2 <H_SSD_Void_SSDWriteNumber+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21aa:	6d 89       	ldd	r22, Y+21	; 0x15
    21ac:	7e 89       	ldd	r23, Y+22	; 0x16
    21ae:	8f 89       	ldd	r24, Y+23	; 0x17
    21b0:	98 8d       	ldd	r25, Y+24	; 0x18
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9c 8b       	std	Y+20, r25	; 0x14
    21bc:	8b 8b       	std	Y+19, r24	; 0x13
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	98 8b       	std	Y+16, r25	; 0x10
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	98 89       	ldd	r25, Y+16	; 0x10
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <H_SSD_Void_SSDWriteNumber+0x124>
    21ce:	98 8b       	std	Y+16, r25	; 0x10
    21d0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);

    M_DIO_Void_SetPinValue(SSD_EN2_PIN,LOW);
    21d2:	85 e1       	ldi	r24, 0x15	; 21
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>

    H_SSD_Void_SSDDigitDisplay(Local_U8_Tens);
    21da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21dc:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <H_SSD_Void_SSDDigitDisplay>
    M_DIO_Void_SetPinValue(SSD_EN1_PIN,HIGH);
    21e0:	86 e1       	ldi	r24, 0x16	; 22
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 e8       	ldi	r26, 0x80	; 128
    21ee:	bf e3       	ldi	r27, 0x3F	; 63
    21f0:	8b 87       	std	Y+11, r24	; 0x0b
    21f2:	9c 87       	std	Y+12, r25	; 0x0c
    21f4:	ad 87       	std	Y+13, r26	; 0x0d
    21f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a e7       	ldi	r20, 0x7A	; 122
    2206:	55 e4       	ldi	r21, 0x45	; 69
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8f 83       	std	Y+7, r24	; 0x07
    2212:	98 87       	std	Y+8, r25	; 0x08
    2214:	a9 87       	std	Y+9, r26	; 0x09
    2216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <H_SSD_Void_SSDWriteNumber+0x194>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <H_SSD_Void_SSDWriteNumber+0x212>
	else if (__tmp > 65535)
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <H_SSD_Void_SSDWriteNumber+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	0f c0       	rjmp	.+30     	; 0x229a <H_SSD_Void_SSDWriteNumber+0x1f4>
    227c:	80 e9       	ldi	r24, 0x90	; 144
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <H_SSD_Void_SSDWriteNumber+0x1e2>
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <H_SSD_Void_SSDWriteNumber+0x1d6>
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <H_SSD_Void_SSDWriteNumber+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <H_SSD_Void_SSDWriteNumber+0x21e>
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    M_DIO_Void_SetPinValue(SSD_EN1_PIN,LOW);
    22cc:	86 e1       	ldi	r24, 0x16	; 22
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
}

void H_SSD_Void_SSDWriteNumber(u8 Copy_U8_Number)
{
	u32 Local_U32_Counter = 0;
	for(;Local_U32_Counter<500;Local_U32_Counter++)
    22d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d6:	98 a1       	ldd	r25, Y+32	; 0x20
    22d8:	a9 a1       	ldd	r26, Y+33	; 0x21
    22da:	ba a1       	ldd	r27, Y+34	; 0x22
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	a1 1d       	adc	r26, r1
    22e0:	b1 1d       	adc	r27, r1
    22e2:	8f 8f       	std	Y+31, r24	; 0x1f
    22e4:	98 a3       	std	Y+32, r25	; 0x20
    22e6:	a9 a3       	std	Y+33, r26	; 0x21
    22e8:	ba a3       	std	Y+34, r27	; 0x22
    22ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ec:	98 a1       	ldd	r25, Y+32	; 0x20
    22ee:	a9 a1       	ldd	r26, Y+33	; 0x21
    22f0:	ba a1       	ldd	r27, Y+34	; 0x22
    22f2:	84 3f       	cpi	r24, 0xF4	; 244
    22f4:	21 e0       	ldi	r18, 0x01	; 1
    22f6:	92 07       	cpc	r25, r18
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	a2 07       	cpc	r26, r18
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	b2 07       	cpc	r27, r18
    2300:	08 f4       	brcc	.+2      	; 0x2304 <H_SSD_Void_SSDWriteNumber+0x25e>
    2302:	e1 ce       	rjmp	.-574    	; 0x20c6 <H_SSD_Void_SSDWriteNumber+0x20>
    H_SSD_Void_SSDDigitDisplay(Local_U8_Tens);
    M_DIO_Void_SetPinValue(SSD_EN1_PIN,HIGH);
    _delay_ms(1);
    M_DIO_Void_SetPinValue(SSD_EN1_PIN,LOW);
	}
}
    2304:	a3 96       	adiw	r28, 0x23	; 35
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <H_PB_Void_PBInit>:
 */

#include "PB_Interface.h"

void H_PB_Void_PBInit(u8 Copy_u8_PushButton)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	00 d0       	rcall	.+0      	; 0x231c <H_PB_Void_PBInit+0x6>
    231c:	0f 92       	push	r0
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8_PushButton)
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	3b 83       	std	Y+3, r19	; 0x03
    232c:	2a 83       	std	Y+2, r18	; 0x02
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	9b 81       	ldd	r25, Y+3	; 0x03
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	91 05       	cpc	r25, r1
    2336:	71 f0       	breq	.+28     	; 0x2354 <H_PB_Void_PBInit+0x3e>
    2338:	2a 81       	ldd	r18, Y+2	; 0x02
    233a:	3b 81       	ldd	r19, Y+3	; 0x03
    233c:	22 30       	cpi	r18, 0x02	; 2
    233e:	31 05       	cpc	r19, r1
    2340:	71 f0       	breq	.+28     	; 0x235e <H_PB_Void_PBInit+0x48>
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	9b 81       	ldd	r25, Y+3	; 0x03
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	71 f4       	brne	.+28     	; 0x2366 <H_PB_Void_PBInit+0x50>
	{
	case PB0:    M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN, INPUT);   break;
    234a:	84 e1       	ldi	r24, 0x14	; 20
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
    2352:	09 c0       	rjmp	.+18     	; 0x2366 <H_PB_Void_PBInit+0x50>
	case PB1:    M_DIO_Void_SetPinDirection(PUSH_BUTTON1_PIN, INPUT);   break;
    2354:	8e e2       	ldi	r24, 0x2E	; 46
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
    235c:	04 c0       	rjmp	.+8      	; 0x2366 <H_PB_Void_PBInit+0x50>
	case PB2:    M_DIO_Void_SetPinDirection(PUSH_BUTTON2_PIN, INPUT);   break;
    235e:	8a e2       	ldi	r24, 0x2A	; 42
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	default:                                                            break;
	}
}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <H_PB_U8_PBRead>:
u8 H_PB_U8_PBRead(u8 Copy_u8_PushButton)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	ae 97       	sbiw	r28, 0x2e	; 46
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	8c a7       	std	Y+44, r24	; 0x2c
	u8 Local_U8_Reading = RELEASED;
    2388:	1b a6       	std	Y+43, r1	; 0x2b
	switch (Copy_u8_PushButton)
    238a:	8c a5       	ldd	r24, Y+44	; 0x2c
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	3e a7       	std	Y+46, r19	; 0x2e
    2392:	2d a7       	std	Y+45, r18	; 0x2d
    2394:	8d a5       	ldd	r24, Y+45	; 0x2d
    2396:	9e a5       	ldd	r25, Y+46	; 0x2e
    2398:	81 30       	cpi	r24, 0x01	; 1
    239a:	91 05       	cpc	r25, r1
    239c:	09 f4       	brne	.+2      	; 0x23a0 <H_PB_U8_PBRead+0x2e>
    239e:	8c c0       	rjmp	.+280    	; 0x24b8 <H_PB_U8_PBRead+0x146>
    23a0:	2d a5       	ldd	r18, Y+45	; 0x2d
    23a2:	3e a5       	ldd	r19, Y+46	; 0x2e
    23a4:	22 30       	cpi	r18, 0x02	; 2
    23a6:	31 05       	cpc	r19, r1
    23a8:	09 f4       	brne	.+2      	; 0x23ac <H_PB_U8_PBRead+0x3a>
    23aa:	0c c1       	rjmp	.+536    	; 0x25c4 <H_PB_U8_PBRead+0x252>
    23ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    23ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <H_PB_U8_PBRead+0x44>
    23b4:	8b c1       	rjmp	.+790    	; 0x26cc <H_PB_U8_PBRead+0x35a>
	{
	case PB0:
	{
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    23b6:	84 e1       	ldi	r24, 0x14	; 20
    23b8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    23bc:	81 30       	cpi	r24, 0x01	; 1
    23be:	09 f0       	breq	.+2      	; 0x23c2 <H_PB_U8_PBRead+0x50>
    23c0:	85 c1       	rjmp	.+778    	; 0x26cc <H_PB_U8_PBRead+0x35a>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a2 e0       	ldi	r26, 0x02	; 2
    23c8:	b3 e4       	ldi	r27, 0x43	; 67
    23ca:	8f a3       	std	Y+39, r24	; 0x27
    23cc:	98 a7       	std	Y+40, r25	; 0x28
    23ce:	a9 a7       	std	Y+41, r26	; 0x29
    23d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d2:	6f a1       	ldd	r22, Y+39	; 0x27
    23d4:	78 a5       	ldd	r23, Y+40	; 0x28
    23d6:	89 a5       	ldd	r24, Y+41	; 0x29
    23d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	4a e7       	ldi	r20, 0x7A	; 122
    23e0:	55 e4       	ldi	r21, 0x45	; 69
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	8b a3       	std	Y+35, r24	; 0x23
    23ec:	9c a3       	std	Y+36, r25	; 0x24
    23ee:	ad a3       	std	Y+37, r26	; 0x25
    23f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23f2:	6b a1       	ldd	r22, Y+35	; 0x23
    23f4:	7c a1       	ldd	r23, Y+36	; 0x24
    23f6:	8d a1       	ldd	r24, Y+37	; 0x25
    23f8:	9e a1       	ldd	r25, Y+38	; 0x26
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2406:	88 23       	and	r24, r24
    2408:	2c f4       	brge	.+10     	; 0x2414 <H_PB_U8_PBRead+0xa2>
		__ticks = 1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9a a3       	std	Y+34, r25	; 0x22
    2410:	89 a3       	std	Y+33, r24	; 0x21
    2412:	3f c0       	rjmp	.+126    	; 0x2492 <H_PB_U8_PBRead+0x120>
	else if (__tmp > 65535)
    2414:	6b a1       	ldd	r22, Y+35	; 0x23
    2416:	7c a1       	ldd	r23, Y+36	; 0x24
    2418:	8d a1       	ldd	r24, Y+37	; 0x25
    241a:	9e a1       	ldd	r25, Y+38	; 0x26
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	4f e7       	ldi	r20, 0x7F	; 127
    2422:	57 e4       	ldi	r21, 0x47	; 71
    2424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2428:	18 16       	cp	r1, r24
    242a:	4c f5       	brge	.+82     	; 0x247e <H_PB_U8_PBRead+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	6f a1       	ldd	r22, Y+39	; 0x27
    242e:	78 a5       	ldd	r23, Y+40	; 0x28
    2430:	89 a5       	ldd	r24, Y+41	; 0x29
    2432:	9a a5       	ldd	r25, Y+42	; 0x2a
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9a a3       	std	Y+34, r25	; 0x22
    2452:	89 a3       	std	Y+33, r24	; 0x21
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <H_PB_U8_PBRead+0x102>
    2456:	80 e9       	ldi	r24, 0x90	; 144
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	98 a3       	std	Y+32, r25	; 0x20
    245c:	8f 8f       	std	Y+31, r24	; 0x1f
    245e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2460:	98 a1       	ldd	r25, Y+32	; 0x20
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <H_PB_U8_PBRead+0xf0>
    2466:	98 a3       	std	Y+32, r25	; 0x20
    2468:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	89 a1       	ldd	r24, Y+33	; 0x21
    246c:	9a a1       	ldd	r25, Y+34	; 0x22
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	9a a3       	std	Y+34, r25	; 0x22
    2472:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	89 a1       	ldd	r24, Y+33	; 0x21
    2476:	9a a1       	ldd	r25, Y+34	; 0x22
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	69 f7       	brne	.-38     	; 0x2456 <H_PB_U8_PBRead+0xe4>
    247c:	14 c0       	rjmp	.+40     	; 0x24a6 <H_PB_U8_PBRead+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247e:	6b a1       	ldd	r22, Y+35	; 0x23
    2480:	7c a1       	ldd	r23, Y+36	; 0x24
    2482:	8d a1       	ldd	r24, Y+37	; 0x25
    2484:	9e a1       	ldd	r25, Y+38	; 0x26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9a a3       	std	Y+34, r25	; 0x22
    2490:	89 a3       	std	Y+33, r24	; 0x21
    2492:	89 a1       	ldd	r24, Y+33	; 0x21
    2494:	9a a1       	ldd	r25, Y+34	; 0x22
    2496:	9e 8f       	std	Y+30, r25	; 0x1e
    2498:	8d 8f       	std	Y+29, r24	; 0x1d
    249a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    249c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <H_PB_U8_PBRead+0x12c>
    24a2:	9e 8f       	std	Y+30, r25	; 0x1e
    24a4:	8d 8f       	std	Y+29, r24	; 0x1d
		   {
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    24a6:	84 e1       	ldi	r24, 0x14	; 20
    24a8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    24ac:	81 30       	cpi	r24, 0x01	; 1
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <H_PB_U8_PBRead+0x140>
    24b0:	0d c1       	rjmp	.+538    	; 0x26cc <H_PB_U8_PBRead+0x35a>
				{
				//while(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED);
		        Local_U8_Reading = PRESSED;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	8b a7       	std	Y+43, r24	; 0x2b
    24b6:	0a c1       	rjmp	.+532    	; 0x26cc <H_PB_U8_PBRead+0x35a>
		   }
	}
	break;
	case PB1:
	{
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    24b8:	8e e2       	ldi	r24, 0x2E	; 46
    24ba:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <H_PB_U8_PBRead+0x152>
    24c2:	04 c1       	rjmp	.+520    	; 0x26cc <H_PB_U8_PBRead+0x35a>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a2 e0       	ldi	r26, 0x02	; 2
    24ca:	b3 e4       	ldi	r27, 0x43	; 67
    24cc:	89 8f       	std	Y+25, r24	; 0x19
    24ce:	9a 8f       	std	Y+26, r25	; 0x1a
    24d0:	ab 8f       	std	Y+27, r26	; 0x1b
    24d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	69 8d       	ldd	r22, Y+25	; 0x19
    24d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a e7       	ldi	r20, 0x7A	; 122
    24e2:	55 e4       	ldi	r21, 0x45	; 69
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8d 8b       	std	Y+21, r24	; 0x15
    24ee:	9e 8b       	std	Y+22, r25	; 0x16
    24f0:	af 8b       	std	Y+23, r26	; 0x17
    24f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24f4:	6d 89       	ldd	r22, Y+21	; 0x15
    24f6:	7e 89       	ldd	r23, Y+22	; 0x16
    24f8:	8f 89       	ldd	r24, Y+23	; 0x17
    24fa:	98 8d       	ldd	r25, Y+24	; 0x18
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <H_PB_U8_PBRead+0x1a4>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9c 8b       	std	Y+20, r25	; 0x14
    2512:	8b 8b       	std	Y+19, r24	; 0x13
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <H_PB_U8_PBRead+0x222>
	else if (__tmp > 65535)
    2516:	6d 89       	ldd	r22, Y+21	; 0x15
    2518:	7e 89       	ldd	r23, Y+22	; 0x16
    251a:	8f 89       	ldd	r24, Y+23	; 0x17
    251c:	98 8d       	ldd	r25, Y+24	; 0x18
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <H_PB_U8_PBRead+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	69 8d       	ldd	r22, Y+25	; 0x19
    2530:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2532:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2534:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9c 8b       	std	Y+20, r25	; 0x14
    2554:	8b 8b       	std	Y+19, r24	; 0x13
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <H_PB_U8_PBRead+0x204>
    2558:	80 e9       	ldi	r24, 0x90	; 144
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	9a 8b       	std	Y+18, r25	; 0x12
    255e:	89 8b       	std	Y+17, r24	; 0x11
    2560:	89 89       	ldd	r24, Y+17	; 0x11
    2562:	9a 89       	ldd	r25, Y+18	; 0x12
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <H_PB_U8_PBRead+0x1f2>
    2568:	9a 8b       	std	Y+18, r25	; 0x12
    256a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	8b 89       	ldd	r24, Y+19	; 0x13
    256e:	9c 89       	ldd	r25, Y+20	; 0x14
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9c 8b       	std	Y+20, r25	; 0x14
    2574:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	8b 89       	ldd	r24, Y+19	; 0x13
    2578:	9c 89       	ldd	r25, Y+20	; 0x14
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <H_PB_U8_PBRead+0x1e6>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <H_PB_U8_PBRead+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6d 89       	ldd	r22, Y+21	; 0x15
    2582:	7e 89       	ldd	r23, Y+22	; 0x16
    2584:	8f 89       	ldd	r24, Y+23	; 0x17
    2586:	98 8d       	ldd	r25, Y+24	; 0x18
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9c 8b       	std	Y+20, r25	; 0x14
    2592:	8b 8b       	std	Y+19, r24	; 0x13
    2594:	8b 89       	ldd	r24, Y+19	; 0x13
    2596:	9c 89       	ldd	r25, Y+20	; 0x14
    2598:	98 8b       	std	Y+16, r25	; 0x10
    259a:	8f 87       	std	Y+15, r24	; 0x0f
    259c:	8f 85       	ldd	r24, Y+15	; 0x0f
    259e:	98 89       	ldd	r25, Y+16	; 0x10
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <H_PB_U8_PBRead+0x22e>
    25a4:	98 8b       	std	Y+16, r25	; 0x10
    25a6:	8f 87       	std	Y+15, r24	; 0x0f
			   {
				_delay_ms(PB_DEBOUNCING_TIME);
				if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    25a8:	8e e2       	ldi	r24, 0x2E	; 46
    25aa:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <H_PB_U8_PBRead+0x242>
    25b2:	8c c0       	rjmp	.+280    	; 0x26cc <H_PB_U8_PBRead+0x35a>
					{
					while(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED);
    25b4:	8e e2       	ldi	r24, 0x2E	; 46
    25b6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    25ba:	81 30       	cpi	r24, 0x01	; 1
    25bc:	d9 f3       	breq	.-10     	; 0x25b4 <H_PB_U8_PBRead+0x242>
			        Local_U8_Reading = PRESSED;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	8b a7       	std	Y+43, r24	; 0x2b
    25c2:	84 c0       	rjmp	.+264    	; 0x26cc <H_PB_U8_PBRead+0x35a>
			   }
		}
		break;
	case PB2:
	{
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    25c4:	8a e2       	ldi	r24, 0x2A	; 42
    25c6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <H_PB_U8_PBRead+0x25e>
    25ce:	7e c0       	rjmp	.+252    	; 0x26cc <H_PB_U8_PBRead+0x35a>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a2 e0       	ldi	r26, 0x02	; 2
    25d6:	b3 e4       	ldi	r27, 0x43	; 67
    25d8:	8b 87       	std	Y+11, r24	; 0x0b
    25da:	9c 87       	std	Y+12, r25	; 0x0c
    25dc:	ad 87       	std	Y+13, r26	; 0x0d
    25de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a e7       	ldi	r20, 0x7A	; 122
    25ee:	55 e4       	ldi	r21, 0x45	; 69
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	a9 87       	std	Y+9, r26	; 0x09
    25fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <H_PB_U8_PBRead+0x2b0>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <H_PB_U8_PBRead+0x32e>
	else if (__tmp > 65535)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <H_PB_U8_PBRead+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6b 85       	ldd	r22, Y+11	; 0x0b
    263c:	7c 85       	ldd	r23, Y+12	; 0x0c
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <H_PB_U8_PBRead+0x310>
    2664:	80 e9       	ldi	r24, 0x90	; 144
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <H_PB_U8_PBRead+0x2fe>
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <H_PB_U8_PBRead+0x2f2>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <H_PB_U8_PBRead+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <H_PB_U8_PBRead+0x33a>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
			   {
				_delay_ms(PB_DEBOUNCING_TIME);
				if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    26b4:	8a e2       	ldi	r24, 0x2A	; 42
    26b6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    26ba:	81 30       	cpi	r24, 0x01	; 1
    26bc:	39 f4       	brne	.+14     	; 0x26cc <H_PB_U8_PBRead+0x35a>
					{
					while(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED);
    26be:	8a e2       	ldi	r24, 0x2A	; 42
    26c0:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    26c4:	81 30       	cpi	r24, 0x01	; 1
    26c6:	d9 f3       	breq	.-10     	; 0x26be <H_PB_U8_PBRead+0x34c>
			        Local_U8_Reading = PRESSED;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	8b a7       	std	Y+43, r24	; 0x2b
			   }
		}
		break;
	default:                                                              	break;
	}
	return Local_U8_Reading;
    26cc:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    26ce:	ae 96       	adiw	r28, 0x2e	; 46
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <H_LM35_Void_LM35Init>:
 */

#include "LM35_Interface.h"

void H_LM35_Void_LM35Init(void)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
	M_ADC_Void_ADCInit();
    26e8:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <M_ADC_Void_ADCInit>
}
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <H_LM35_U16_LM35Read>:

u16 H_LM35_U16_LM35Read(void)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <H_LM35_U16_LM35Read+0x6>
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <H_LM35_U16_LM35Read+0x8>
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
	u16 Local_U16_AddValue = M_ADC_U16_ADCRead(LM25_PIN);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <M_ADC_U16_ADCRead>
    2704:	9c 83       	std	Y+4, r25	; 0x04
    2706:	8b 83       	std	Y+3, r24	; 0x03
    u16 Local_U16_Temp     = ((u32)Local_U16_AddValue * 500) / 1023;
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	cc 01       	movw	r24, r24
    270e:	a0 e0       	ldi	r26, 0x00	; 0
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	24 ef       	ldi	r18, 0xF4	; 244
    2714:	31 e0       	ldi	r19, 0x01	; 1
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 39 24 	call	0x4872	; 0x4872 <__mulsi3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	2f ef       	ldi	r18, 0xFF	; 255
    2728:	33 e0       	ldi	r19, 0x03	; 3
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    2736:	da 01       	movw	r26, r20
    2738:	c9 01       	movw	r24, r18
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
    return Local_U16_Temp;
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <H_LED_Void_LedInit>:
 */

#include "LED_Interface.h"

void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <H_LED_Void_LedInit+0x6>
    2756:	0f 92       	push	r0
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	3b 83       	std	Y+3, r19	; 0x03
    2766:	2a 83       	std	Y+2, r18	; 0x02
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	9b 81       	ldd	r25, Y+3	; 0x03
    276c:	81 30       	cpi	r24, 0x01	; 1
    276e:	91 05       	cpc	r25, r1
    2770:	71 f0       	breq	.+28     	; 0x278e <H_LED_Void_LedInit+0x3e>
    2772:	2a 81       	ldd	r18, Y+2	; 0x02
    2774:	3b 81       	ldd	r19, Y+3	; 0x03
    2776:	22 30       	cpi	r18, 0x02	; 2
    2778:	31 05       	cpc	r19, r1
    277a:	71 f0       	breq	.+28     	; 0x2798 <H_LED_Void_LedInit+0x48>
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	9b 81       	ldd	r25, Y+3	; 0x03
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	71 f4       	brne	.+28     	; 0x27a0 <H_LED_Void_LedInit+0x50>
		{
		case LED0:      M_DIO_Void_SetPinValue(LED0_PIN,OUTPUT);    break;
    2784:	80 e2       	ldi	r24, 0x20	; 32
    2786:	61 e0       	ldi	r22, 0x01	; 1
    2788:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    278c:	09 c0       	rjmp	.+18     	; 0x27a0 <H_LED_Void_LedInit+0x50>
		case LED1:		M_DIO_Void_SetPinValue(LED1_PIN,OUTPUT);	break;
    278e:	85 e2       	ldi	r24, 0x25	; 37
    2790:	61 e0       	ldi	r22, 0x01	; 1
    2792:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2796:	04 c0       	rjmp	.+8      	; 0x27a0 <H_LED_Void_LedInit+0x50>
		case LED2:		M_DIO_Void_SetPinValue(LED2_PIN,OUTPUT);	break;
    2798:	8b e2       	ldi	r24, 0x2B	; 43
    279a:	61 e0       	ldi	r22, 0x01	; 1
    279c:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
		default:        break;
		}
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <H_LED_Void_LedSetOn>:

void H_LED_Void_LedSetOn(u8 Copy_U8_Led)
{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <H_LED_Void_LedSetOn+0x6>
    27b2:	0f 92       	push	r0
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	3b 83       	std	Y+3, r19	; 0x03
    27c2:	2a 83       	std	Y+2, r18	; 0x02
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	9b 81       	ldd	r25, Y+3	; 0x03
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	91 05       	cpc	r25, r1
    27cc:	71 f0       	breq	.+28     	; 0x27ea <H_LED_Void_LedSetOn+0x3e>
    27ce:	2a 81       	ldd	r18, Y+2	; 0x02
    27d0:	3b 81       	ldd	r19, Y+3	; 0x03
    27d2:	22 30       	cpi	r18, 0x02	; 2
    27d4:	31 05       	cpc	r19, r1
    27d6:	71 f0       	breq	.+28     	; 0x27f4 <H_LED_Void_LedSetOn+0x48>
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	9b 81       	ldd	r25, Y+3	; 0x03
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	71 f4       	brne	.+28     	; 0x27fc <H_LED_Void_LedSetOn+0x50>
	    {
	    case LED0:		M_DIO_Void_SetPinValue(LED0_PIN,HIGH);     	break;
    27e0:	80 e2       	ldi	r24, 0x20	; 32
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    27e8:	09 c0       	rjmp	.+18     	; 0x27fc <H_LED_Void_LedSetOn+0x50>
	    case LED1:		M_DIO_Void_SetPinValue(LED1_PIN,HIGH);	    break;
    27ea:	85 e2       	ldi	r24, 0x25	; 37
    27ec:	61 e0       	ldi	r22, 0x01	; 1
    27ee:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    27f2:	04 c0       	rjmp	.+8      	; 0x27fc <H_LED_Void_LedSetOn+0x50>
	    case LED2:		M_DIO_Void_SetPinValue(LED2_PIN,HIGH);	    break;
    27f4:	8b e2       	ldi	r24, 0x2B	; 43
    27f6:	61 e0       	ldi	r22, 0x01	; 1
    27f8:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
	    default:	    break;
	    }
}
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <H_LED_Void_LedSetOff>:

void H_LED_Void_LedSetOff(u8 Copy_U8_Led)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	00 d0       	rcall	.+0      	; 0x280e <H_LED_Void_LedSetOff+0x6>
    280e:	0f 92       	push	r0
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	3b 83       	std	Y+3, r19	; 0x03
    281e:	2a 83       	std	Y+2, r18	; 0x02
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	9b 81       	ldd	r25, Y+3	; 0x03
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	91 05       	cpc	r25, r1
    2828:	71 f0       	breq	.+28     	; 0x2846 <H_LED_Void_LedSetOff+0x3e>
    282a:	2a 81       	ldd	r18, Y+2	; 0x02
    282c:	3b 81       	ldd	r19, Y+3	; 0x03
    282e:	22 30       	cpi	r18, 0x02	; 2
    2830:	31 05       	cpc	r19, r1
    2832:	71 f0       	breq	.+28     	; 0x2850 <H_LED_Void_LedSetOff+0x48>
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	9b 81       	ldd	r25, Y+3	; 0x03
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	71 f4       	brne	.+28     	; 0x2858 <H_LED_Void_LedSetOff+0x50>
		{
		case LED0:		M_DIO_Void_SetPinValue(LED0_PIN,LOW);		break;
    283c:	80 e2       	ldi	r24, 0x20	; 32
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2844:	09 c0       	rjmp	.+18     	; 0x2858 <H_LED_Void_LedSetOff+0x50>
		case LED1:		M_DIO_Void_SetPinValue(LED1_PIN,LOW);		break;
    2846:	85 e2       	ldi	r24, 0x25	; 37
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    284e:	04 c0       	rjmp	.+8      	; 0x2858 <H_LED_Void_LedSetOff+0x50>
		case LED2:		M_DIO_Void_SetPinValue(LED2_PIN,LOW);		break;
    2850:	8b e2       	ldi	r24, 0x2B	; 43
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
		default:	    break;
		}
}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <H_LED_Void_LedTog>:

void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	00 d0       	rcall	.+0      	; 0x286a <H_LED_Void_LedTog+0x6>
    286a:	0f 92       	push	r0
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	3b 83       	std	Y+3, r19	; 0x03
    287a:	2a 83       	std	Y+2, r18	; 0x02
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	9b 81       	ldd	r25, Y+3	; 0x03
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	91 05       	cpc	r25, r1
    2884:	69 f0       	breq	.+26     	; 0x28a0 <H_LED_Void_LedTog+0x3c>
    2886:	2a 81       	ldd	r18, Y+2	; 0x02
    2888:	3b 81       	ldd	r19, Y+3	; 0x03
    288a:	22 30       	cpi	r18, 0x02	; 2
    288c:	31 05       	cpc	r19, r1
    288e:	61 f0       	breq	.+24     	; 0x28a8 <H_LED_Void_LedTog+0x44>
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	9b 81       	ldd	r25, Y+3	; 0x03
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	59 f4       	brne	.+22     	; 0x28ae <H_LED_Void_LedTog+0x4a>
			{
			case LED0:		M_DIO_Void_TogPin(LED0_PIN);		break;
    2898:	80 e2       	ldi	r24, 0x20	; 32
    289a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <M_DIO_Void_TogPin>
    289e:	07 c0       	rjmp	.+14     	; 0x28ae <H_LED_Void_LedTog+0x4a>
			case LED1:		M_DIO_Void_TogPin(LED1_PIN);		break;
    28a0:	85 e2       	ldi	r24, 0x25	; 37
    28a2:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <M_DIO_Void_TogPin>
    28a6:	03 c0       	rjmp	.+6      	; 0x28ae <H_LED_Void_LedTog+0x4a>
			case LED2:		M_DIO_Void_TogPin(LED2_PIN);		break;
    28a8:	8b e2       	ldi	r24, 0x2B	; 43
    28aa:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <M_DIO_Void_TogPin>
			default:	    break;
			}
}
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	08 95       	ret

000028ba <H_LCD_Void_LCDInit>:

#include "LCD_Interface.h"
#include "LCD_Private.h"

void H_LCD_Void_LCDInit(void)
{
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);

#elif     LCD_MODE     ==     _4_BIT_MODE

	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    28c2:	8e e0       	ldi	r24, 0x0E	; 14
    28c4:	61 e0       	ldi	r22, 0x01	; 1
    28c6:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    28ca:	8f e0       	ldi	r24, 0x0F	; 15
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    28d2:	80 e1       	ldi	r24, 0x10	; 16
    28d4:	61 e0       	ldi	r22, 0x01	; 1
    28d6:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    28da:	81 e1       	ldi	r24, 0x11	; 17
    28dc:	61 e0       	ldi	r22, 0x01	; 1
    28de:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    28e2:	85 e1       	ldi	r24, 0x15	; 21
    28e4:	61 e0       	ldi	r22, 0x01	; 1
    28e6:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    28ea:	87 e1       	ldi	r24, 0x17	; 23
    28ec:	61 e0       	ldi	r22, 0x01	; 1
    28ee:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
    28f2:	86 e1       	ldi	r24, 0x16	; 22
    28f4:	61 e0       	ldi	r22, 0x01	; 1
    28f6:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
    28fa:	86 e1       	ldi	r24, 0x16	; 22
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>

	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_1);
    2902:	83 e3       	ldi	r24, 0x33	; 51
    2904:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_2);
    2908:	82 e3       	ldi	r24, 0x32	; 50
    290a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_3);
    290e:	88 e2       	ldi	r24, 0x28	; 40
    2910:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <H_LCD_Void_LCDWriteCommand>

	H_LCD_Void_LCDWriteCommand(LCD_8_DISPLAY_ON_CURSOR_OFF);
    2914:	8c e0       	ldi	r24, 0x0C	; 12
    2916:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <H_LCD_Void_LCDWriteCommand>

#endif

}
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <H_LCD_Void_LCDWriteCharacter>:

void H_LCD_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	e9 97       	sbiw	r28, 0x39	; 57
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    2942:	85 e1       	ldi	r24, 0x15	; 21
    2944:	61 e0       	ldi	r22, 0x01	; 1
    2946:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif     LCD_MODE     ==     _4_BIT_MODE
	// Ab3at el 4 el fl awel mslan (1010)0010 fa b3ml shift 4 fa ytb3et 00001010
	H_LCD_Void_LCDSetPins(Copy_U8_Character >> 4);
    294a:	89 ad       	ldd	r24, Y+57	; 0x39
    294c:	82 95       	swap	r24
    294e:	8f 70       	andi	r24, 0x0F	; 15
    2950:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <H_LCD_Void_LCDSetPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2954:	87 e1       	ldi	r24, 0x17	; 23
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	a0 e8       	ldi	r26, 0x80	; 128
    2962:	bf e3       	ldi	r27, 0x3F	; 63
    2964:	8d ab       	std	Y+53, r24	; 0x35
    2966:	9e ab       	std	Y+54, r25	; 0x36
    2968:	af ab       	std	Y+55, r26	; 0x37
    296a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296c:	6d a9       	ldd	r22, Y+53	; 0x35
    296e:	7e a9       	ldd	r23, Y+54	; 0x36
    2970:	8f a9       	ldd	r24, Y+55	; 0x37
    2972:	98 ad       	ldd	r25, Y+56	; 0x38
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a e7       	ldi	r20, 0x7A	; 122
    297a:	55 e4       	ldi	r21, 0x45	; 69
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	89 ab       	std	Y+49, r24	; 0x31
    2986:	9a ab       	std	Y+50, r25	; 0x32
    2988:	ab ab       	std	Y+51, r26	; 0x33
    298a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    298c:	69 a9       	ldd	r22, Y+49	; 0x31
    298e:	7a a9       	ldd	r23, Y+50	; 0x32
    2990:	8b a9       	ldd	r24, Y+51	; 0x33
    2992:	9c a9       	ldd	r25, Y+52	; 0x34
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e8       	ldi	r20, 0x80	; 128
    299a:	5f e3       	ldi	r21, 0x3F	; 63
    299c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a0:	88 23       	and	r24, r24
    29a2:	2c f4       	brge	.+10     	; 0x29ae <H_LCD_Void_LCDWriteCharacter+0x82>
		__ticks = 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	98 ab       	std	Y+48, r25	; 0x30
    29aa:	8f a7       	std	Y+47, r24	; 0x2f
    29ac:	3f c0       	rjmp	.+126    	; 0x2a2c <H_LCD_Void_LCDWriteCharacter+0x100>
	else if (__tmp > 65535)
    29ae:	69 a9       	ldd	r22, Y+49	; 0x31
    29b0:	7a a9       	ldd	r23, Y+50	; 0x32
    29b2:	8b a9       	ldd	r24, Y+51	; 0x33
    29b4:	9c a9       	ldd	r25, Y+52	; 0x34
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	3f ef       	ldi	r19, 0xFF	; 255
    29ba:	4f e7       	ldi	r20, 0x7F	; 127
    29bc:	57 e4       	ldi	r21, 0x47	; 71
    29be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c2:	18 16       	cp	r1, r24
    29c4:	4c f5       	brge	.+82     	; 0x2a18 <H_LCD_Void_LCDWriteCharacter+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	6d a9       	ldd	r22, Y+53	; 0x35
    29c8:	7e a9       	ldd	r23, Y+54	; 0x36
    29ca:	8f a9       	ldd	r24, Y+55	; 0x37
    29cc:	98 ad       	ldd	r25, Y+56	; 0x38
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	98 ab       	std	Y+48, r25	; 0x30
    29ec:	8f a7       	std	Y+47, r24	; 0x2f
    29ee:	0f c0       	rjmp	.+30     	; 0x2a0e <H_LCD_Void_LCDWriteCharacter+0xe2>
    29f0:	80 e9       	ldi	r24, 0x90	; 144
    29f2:	91 e0       	ldi	r25, 0x01	; 1
    29f4:	9e a7       	std	Y+46, r25	; 0x2e
    29f6:	8d a7       	std	Y+45, r24	; 0x2d
    29f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    29fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <H_LCD_Void_LCDWriteCharacter+0xd0>
    2a00:	9e a7       	std	Y+46, r25	; 0x2e
    2a02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a06:	98 a9       	ldd	r25, Y+48	; 0x30
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	98 ab       	std	Y+48, r25	; 0x30
    2a0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a10:	98 a9       	ldd	r25, Y+48	; 0x30
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	69 f7       	brne	.-38     	; 0x29f0 <H_LCD_Void_LCDWriteCharacter+0xc4>
    2a16:	14 c0       	rjmp	.+40     	; 0x2a40 <H_LCD_Void_LCDWriteCharacter+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a1e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	98 ab       	std	Y+48, r25	; 0x30
    2a2a:	8f a7       	std	Y+47, r24	; 0x2f
    2a2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a30:	9c a7       	std	Y+44, r25	; 0x2c
    2a32:	8b a7       	std	Y+43, r24	; 0x2b
    2a34:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a36:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <H_LCD_Void_LCDWriteCharacter+0x10c>
    2a3c:	9c a7       	std	Y+44, r25	; 0x2c
    2a3e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2a40:	87 e1       	ldi	r24, 0x17	; 23
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a0 e8       	ldi	r26, 0x80	; 128
    2a4e:	bf e3       	ldi	r27, 0x3F	; 63
    2a50:	8f a3       	std	Y+39, r24	; 0x27
    2a52:	98 a7       	std	Y+40, r25	; 0x28
    2a54:	a9 a7       	std	Y+41, r26	; 0x29
    2a56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a58:	6f a1       	ldd	r22, Y+39	; 0x27
    2a5a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a5c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	4a e7       	ldi	r20, 0x7A	; 122
    2a66:	55 e4       	ldi	r21, 0x45	; 69
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	8b a3       	std	Y+35, r24	; 0x23
    2a72:	9c a3       	std	Y+36, r25	; 0x24
    2a74:	ad a3       	std	Y+37, r26	; 0x25
    2a76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a78:	6b a1       	ldd	r22, Y+35	; 0x23
    2a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e8       	ldi	r20, 0x80	; 128
    2a86:	5f e3       	ldi	r21, 0x3F	; 63
    2a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8c:	88 23       	and	r24, r24
    2a8e:	2c f4       	brge	.+10     	; 0x2a9a <H_LCD_Void_LCDWriteCharacter+0x16e>
		__ticks = 1;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9a a3       	std	Y+34, r25	; 0x22
    2a96:	89 a3       	std	Y+33, r24	; 0x21
    2a98:	3f c0       	rjmp	.+126    	; 0x2b18 <H_LCD_Void_LCDWriteCharacter+0x1ec>
	else if (__tmp > 65535)
    2a9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa0:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	3f ef       	ldi	r19, 0xFF	; 255
    2aa6:	4f e7       	ldi	r20, 0x7F	; 127
    2aa8:	57 e4       	ldi	r21, 0x47	; 71
    2aaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aae:	18 16       	cp	r1, r24
    2ab0:	4c f5       	brge	.+82     	; 0x2b04 <H_LCD_Void_LCDWriteCharacter+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ab4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ab6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ab8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e2       	ldi	r20, 0x20	; 32
    2ac0:	51 e4       	ldi	r21, 0x41	; 65
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9a a3       	std	Y+34, r25	; 0x22
    2ad8:	89 a3       	std	Y+33, r24	; 0x21
    2ada:	0f c0       	rjmp	.+30     	; 0x2afa <H_LCD_Void_LCDWriteCharacter+0x1ce>
    2adc:	80 e9       	ldi	r24, 0x90	; 144
    2ade:	91 e0       	ldi	r25, 0x01	; 1
    2ae0:	98 a3       	std	Y+32, r25	; 0x20
    2ae2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ae4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ae6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <H_LCD_Void_LCDWriteCharacter+0x1bc>
    2aec:	98 a3       	std	Y+32, r25	; 0x20
    2aee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af0:	89 a1       	ldd	r24, Y+33	; 0x21
    2af2:	9a a1       	ldd	r25, Y+34	; 0x22
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	9a a3       	std	Y+34, r25	; 0x22
    2af8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afa:	89 a1       	ldd	r24, Y+33	; 0x21
    2afc:	9a a1       	ldd	r25, Y+34	; 0x22
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	69 f7       	brne	.-38     	; 0x2adc <H_LCD_Void_LCDWriteCharacter+0x1b0>
    2b02:	14 c0       	rjmp	.+40     	; 0x2b2c <H_LCD_Void_LCDWriteCharacter+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b04:	6b a1       	ldd	r22, Y+35	; 0x23
    2b06:	7c a1       	ldd	r23, Y+36	; 0x24
    2b08:	8d a1       	ldd	r24, Y+37	; 0x25
    2b0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9a a3       	std	Y+34, r25	; 0x22
    2b16:	89 a3       	std	Y+33, r24	; 0x21
    2b18:	89 a1       	ldd	r24, Y+33	; 0x21
    2b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b1e:	8d 8f       	std	Y+29, r24	; 0x1d
    2b20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <H_LCD_Void_LCDWriteCharacter+0x1f8>
    2b28:	9e 8f       	std	Y+30, r25	; 0x1e
    2b2a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Ab3at el 4 el fl akher baa 1010(0010) fa bab3t el rqam zay ma howa w howa haylhod awel 4 bas
	H_LCD_Void_LCDSetPins(Copy_U8_Character);
    2b2c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b2e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <H_LCD_Void_LCDSetPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2b32:	87 e1       	ldi	r24, 0x17	; 23
    2b34:	61 e0       	ldi	r22, 0x01	; 1
    2b36:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a0 e8       	ldi	r26, 0x80	; 128
    2b40:	bf e3       	ldi	r27, 0x3F	; 63
    2b42:	89 8f       	std	Y+25, r24	; 0x19
    2b44:	9a 8f       	std	Y+26, r25	; 0x1a
    2b46:	ab 8f       	std	Y+27, r26	; 0x1b
    2b48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	4a e7       	ldi	r20, 0x7A	; 122
    2b58:	55 e4       	ldi	r21, 0x45	; 69
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	8d 8b       	std	Y+21, r24	; 0x15
    2b64:	9e 8b       	std	Y+22, r25	; 0x16
    2b66:	af 8b       	std	Y+23, r26	; 0x17
    2b68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b70:	98 8d       	ldd	r25, Y+24	; 0x18
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e8       	ldi	r20, 0x80	; 128
    2b78:	5f e3       	ldi	r21, 0x3F	; 63
    2b7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b7e:	88 23       	and	r24, r24
    2b80:	2c f4       	brge	.+10     	; 0x2b8c <H_LCD_Void_LCDWriteCharacter+0x260>
		__ticks = 1;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9c 8b       	std	Y+20, r25	; 0x14
    2b88:	8b 8b       	std	Y+19, r24	; 0x13
    2b8a:	3f c0       	rjmp	.+126    	; 0x2c0a <H_LCD_Void_LCDWriteCharacter+0x2de>
	else if (__tmp > 65535)
    2b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b90:	8f 89       	ldd	r24, Y+23	; 0x17
    2b92:	98 8d       	ldd	r25, Y+24	; 0x18
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	3f ef       	ldi	r19, 0xFF	; 255
    2b98:	4f e7       	ldi	r20, 0x7F	; 127
    2b9a:	57 e4       	ldi	r21, 0x47	; 71
    2b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba0:	18 16       	cp	r1, r24
    2ba2:	4c f5       	brge	.+82     	; 0x2bf6 <H_LCD_Void_LCDWriteCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2baa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e2       	ldi	r20, 0x20	; 32
    2bb2:	51 e4       	ldi	r21, 0x41	; 65
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9c 8b       	std	Y+20, r25	; 0x14
    2bca:	8b 8b       	std	Y+19, r24	; 0x13
    2bcc:	0f c0       	rjmp	.+30     	; 0x2bec <H_LCD_Void_LCDWriteCharacter+0x2c0>
    2bce:	80 e9       	ldi	r24, 0x90	; 144
    2bd0:	91 e0       	ldi	r25, 0x01	; 1
    2bd2:	9a 8b       	std	Y+18, r25	; 0x12
    2bd4:	89 8b       	std	Y+17, r24	; 0x11
    2bd6:	89 89       	ldd	r24, Y+17	; 0x11
    2bd8:	9a 89       	ldd	r25, Y+18	; 0x12
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <H_LCD_Void_LCDWriteCharacter+0x2ae>
    2bde:	9a 8b       	std	Y+18, r25	; 0x12
    2be0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be2:	8b 89       	ldd	r24, Y+19	; 0x13
    2be4:	9c 89       	ldd	r25, Y+20	; 0x14
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	9c 8b       	std	Y+20, r25	; 0x14
    2bea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bec:	8b 89       	ldd	r24, Y+19	; 0x13
    2bee:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	69 f7       	brne	.-38     	; 0x2bce <H_LCD_Void_LCDWriteCharacter+0x2a2>
    2bf4:	14 c0       	rjmp	.+40     	; 0x2c1e <H_LCD_Void_LCDWriteCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9c 8b       	std	Y+20, r25	; 0x14
    2c08:	8b 8b       	std	Y+19, r24	; 0x13
    2c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0e:	98 8b       	std	Y+16, r25	; 0x10
    2c10:	8f 87       	std	Y+15, r24	; 0x0f
    2c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c14:	98 89       	ldd	r25, Y+16	; 0x10
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <H_LCD_Void_LCDWriteCharacter+0x2ea>
    2c1a:	98 8b       	std	Y+16, r25	; 0x10
    2c1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2c1e:	87 e1       	ldi	r24, 0x17	; 23
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a0 e8       	ldi	r26, 0x80	; 128
    2c2c:	bf e3       	ldi	r27, 0x3F	; 63
    2c2e:	8b 87       	std	Y+11, r24	; 0x0b
    2c30:	9c 87       	std	Y+12, r25	; 0x0c
    2c32:	ad 87       	std	Y+13, r26	; 0x0d
    2c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	4a e7       	ldi	r20, 0x7A	; 122
    2c44:	55 e4       	ldi	r21, 0x45	; 69
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	8f 83       	std	Y+7, r24	; 0x07
    2c50:	98 87       	std	Y+8, r25	; 0x08
    2c52:	a9 87       	std	Y+9, r26	; 0x09
    2c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c56:	6f 81       	ldd	r22, Y+7	; 0x07
    2c58:	78 85       	ldd	r23, Y+8	; 0x08
    2c5a:	89 85       	ldd	r24, Y+9	; 0x09
    2c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e8       	ldi	r20, 0x80	; 128
    2c64:	5f e3       	ldi	r21, 0x3F	; 63
    2c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6a:	88 23       	and	r24, r24
    2c6c:	2c f4       	brge	.+10     	; 0x2c78 <H_LCD_Void_LCDWriteCharacter+0x34c>
		__ticks = 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9e 83       	std	Y+6, r25	; 0x06
    2c74:	8d 83       	std	Y+5, r24	; 0x05
    2c76:	3f c0       	rjmp	.+126    	; 0x2cf6 <H_LCD_Void_LCDWriteCharacter+0x3ca>
	else if (__tmp > 65535)
    2c78:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7a:	78 85       	ldd	r23, Y+8	; 0x08
    2c7c:	89 85       	ldd	r24, Y+9	; 0x09
    2c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	3f ef       	ldi	r19, 0xFF	; 255
    2c84:	4f e7       	ldi	r20, 0x7F	; 127
    2c86:	57 e4       	ldi	r21, 0x47	; 71
    2c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8c:	18 16       	cp	r1, r24
    2c8e:	4c f5       	brge	.+82     	; 0x2ce2 <H_LCD_Void_LCDWriteCharacter+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e2       	ldi	r20, 0x20	; 32
    2c9e:	51 e4       	ldi	r21, 0x41	; 65
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	9e 83       	std	Y+6, r25	; 0x06
    2cb6:	8d 83       	std	Y+5, r24	; 0x05
    2cb8:	0f c0       	rjmp	.+30     	; 0x2cd8 <H_LCD_Void_LCDWriteCharacter+0x3ac>
    2cba:	80 e9       	ldi	r24, 0x90	; 144
    2cbc:	91 e0       	ldi	r25, 0x01	; 1
    2cbe:	9c 83       	std	Y+4, r25	; 0x04
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <H_LCD_Void_LCDWriteCharacter+0x39a>
    2cca:	9c 83       	std	Y+4, r25	; 0x04
    2ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cce:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	9e 83       	std	Y+6, r25	; 0x06
    2cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cda:	9e 81       	ldd	r25, Y+6	; 0x06
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	69 f7       	brne	.-38     	; 0x2cba <H_LCD_Void_LCDWriteCharacter+0x38e>
    2ce0:	14 c0       	rjmp	.+40     	; 0x2d0a <H_LCD_Void_LCDWriteCharacter+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce4:	78 85       	ldd	r23, Y+8	; 0x08
    2ce6:	89 85       	ldd	r24, Y+9	; 0x09
    2ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9e 83       	std	Y+6, r25	; 0x06
    2cf4:	8d 83       	std	Y+5, r24	; 0x05
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	9a 81       	ldd	r25, Y+2	; 0x02
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <H_LCD_Void_LCDWriteCharacter+0x3d6>
    2d06:	9a 83       	std	Y+2, r25	; 0x02
    2d08:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(1);
}
    2d0a:	e9 96       	adiw	r28, 0x39	; 57
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <H_LCD_Void_LCDWriteString>:

void H_LCD_Void_LCDWriteString(u8* Copy_U8_String)
{
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	00 d0       	rcall	.+0      	; 0x2d22 <H_LCD_Void_LCDWriteString+0x6>
    2d22:	0f 92       	push	r0
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	9b 83       	std	Y+3, r25	; 0x03
    2d2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    2d2c:	19 82       	std	Y+1, r1	; 0x01
    2d2e:	0e c0       	rjmp	.+28     	; 0x2d4c <H_LCD_Void_LCDWriteString+0x30>
    while(Copy_U8_String[Local_U8_Counter] != '\0')
    {
    	H_LCD_Void_LCDWriteCharacter(Copy_U8_String[Local_U8_Counter]);
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	e2 0f       	add	r30, r18
    2d3e:	f3 1f       	adc	r31, r19
    2d40:	80 81       	ld	r24, Z
    2d42:	0e 94 96 14 	call	0x292c	; 0x292c <H_LCD_Void_LCDWriteCharacter>
    	Local_U8_Counter++;
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	8f 5f       	subi	r24, 0xFF	; 255
    2d4a:	89 83       	std	Y+1, r24	; 0x01
}

void H_LCD_Void_LCDWriteString(u8* Copy_U8_String)
{
	u8 Local_U8_Counter = 0;
    while(Copy_U8_String[Local_U8_Counter] != '\0')
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	28 2f       	mov	r18, r24
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	9b 81       	ldd	r25, Y+3	; 0x03
    2d56:	fc 01       	movw	r30, r24
    2d58:	e2 0f       	add	r30, r18
    2d5a:	f3 1f       	adc	r31, r19
    2d5c:	80 81       	ld	r24, Z
    2d5e:	88 23       	and	r24, r24
    2d60:	39 f7       	brne	.-50     	; 0x2d30 <H_LCD_Void_LCDWriteString+0x14>
    {
    	H_LCD_Void_LCDWriteCharacter(Copy_U8_String[Local_U8_Counter]);
    	Local_U8_Counter++;
    }

}
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <H_LCD_Void_LCDWriteCommand>:

void H_LCD_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	e9 97       	sbiw	r28, 0x39	; 57
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    2d84:	85 e1       	ldi	r24, 0x15	; 21
    2d86:	60 e0       	ldi	r22, 0x00	; 0
    2d88:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif     LCD_MODE     ==     _4_BIT_MODE
	// Ab3at el 4 el fl awel mslan (1010)0010 fa b3ml shift 4 fa ytb3et 00001010
	H_LCD_Void_LCDSetPins(Copy_U8_Command >> 4);
    2d8c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d8e:	82 95       	swap	r24
    2d90:	8f 70       	andi	r24, 0x0F	; 15
    2d92:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <H_LCD_Void_LCDSetPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2d96:	87 e1       	ldi	r24, 0x17	; 23
    2d98:	61 e0       	ldi	r22, 0x01	; 1
    2d9a:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	a0 e8       	ldi	r26, 0x80	; 128
    2da4:	bf e3       	ldi	r27, 0x3F	; 63
    2da6:	8d ab       	std	Y+53, r24	; 0x35
    2da8:	9e ab       	std	Y+54, r25	; 0x36
    2daa:	af ab       	std	Y+55, r26	; 0x37
    2dac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dae:	6d a9       	ldd	r22, Y+53	; 0x35
    2db0:	7e a9       	ldd	r23, Y+54	; 0x36
    2db2:	8f a9       	ldd	r24, Y+55	; 0x37
    2db4:	98 ad       	ldd	r25, Y+56	; 0x38
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	4a e7       	ldi	r20, 0x7A	; 122
    2dbc:	55 e4       	ldi	r21, 0x45	; 69
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	89 ab       	std	Y+49, r24	; 0x31
    2dc8:	9a ab       	std	Y+50, r25	; 0x32
    2dca:	ab ab       	std	Y+51, r26	; 0x33
    2dcc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dce:	69 a9       	ldd	r22, Y+49	; 0x31
    2dd0:	7a a9       	ldd	r23, Y+50	; 0x32
    2dd2:	8b a9       	ldd	r24, Y+51	; 0x33
    2dd4:	9c a9       	ldd	r25, Y+52	; 0x34
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	5f e3       	ldi	r21, 0x3F	; 63
    2dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de2:	88 23       	and	r24, r24
    2de4:	2c f4       	brge	.+10     	; 0x2df0 <H_LCD_Void_LCDWriteCommand+0x82>
		__ticks = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	98 ab       	std	Y+48, r25	; 0x30
    2dec:	8f a7       	std	Y+47, r24	; 0x2f
    2dee:	3f c0       	rjmp	.+126    	; 0x2e6e <H_LCD_Void_LCDWriteCommand+0x100>
	else if (__tmp > 65535)
    2df0:	69 a9       	ldd	r22, Y+49	; 0x31
    2df2:	7a a9       	ldd	r23, Y+50	; 0x32
    2df4:	8b a9       	ldd	r24, Y+51	; 0x33
    2df6:	9c a9       	ldd	r25, Y+52	; 0x34
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	3f ef       	ldi	r19, 0xFF	; 255
    2dfc:	4f e7       	ldi	r20, 0x7F	; 127
    2dfe:	57 e4       	ldi	r21, 0x47	; 71
    2e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e04:	18 16       	cp	r1, r24
    2e06:	4c f5       	brge	.+82     	; 0x2e5a <H_LCD_Void_LCDWriteCommand+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e08:	6d a9       	ldd	r22, Y+53	; 0x35
    2e0a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e0c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e0e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e2       	ldi	r20, 0x20	; 32
    2e16:	51 e4       	ldi	r21, 0x41	; 65
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	98 ab       	std	Y+48, r25	; 0x30
    2e2e:	8f a7       	std	Y+47, r24	; 0x2f
    2e30:	0f c0       	rjmp	.+30     	; 0x2e50 <H_LCD_Void_LCDWriteCommand+0xe2>
    2e32:	80 e9       	ldi	r24, 0x90	; 144
    2e34:	91 e0       	ldi	r25, 0x01	; 1
    2e36:	9e a7       	std	Y+46, r25	; 0x2e
    2e38:	8d a7       	std	Y+45, r24	; 0x2d
    2e3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <H_LCD_Void_LCDWriteCommand+0xd0>
    2e42:	9e a7       	std	Y+46, r25	; 0x2e
    2e44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e48:	98 a9       	ldd	r25, Y+48	; 0x30
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	98 ab       	std	Y+48, r25	; 0x30
    2e4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e52:	98 a9       	ldd	r25, Y+48	; 0x30
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	69 f7       	brne	.-38     	; 0x2e32 <H_LCD_Void_LCDWriteCommand+0xc4>
    2e58:	14 c0       	rjmp	.+40     	; 0x2e82 <H_LCD_Void_LCDWriteCommand+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e5c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e5e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e60:	9c a9       	ldd	r25, Y+52	; 0x34
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	98 ab       	std	Y+48, r25	; 0x30
    2e6c:	8f a7       	std	Y+47, r24	; 0x2f
    2e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e70:	98 a9       	ldd	r25, Y+48	; 0x30
    2e72:	9c a7       	std	Y+44, r25	; 0x2c
    2e74:	8b a7       	std	Y+43, r24	; 0x2b
    2e76:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e78:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <H_LCD_Void_LCDWriteCommand+0x10c>
    2e7e:	9c a7       	std	Y+44, r25	; 0x2c
    2e80:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2e82:	87 e1       	ldi	r24, 0x17	; 23
    2e84:	60 e0       	ldi	r22, 0x00	; 0
    2e86:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	a0 e8       	ldi	r26, 0x80	; 128
    2e90:	bf e3       	ldi	r27, 0x3F	; 63
    2e92:	8f a3       	std	Y+39, r24	; 0x27
    2e94:	98 a7       	std	Y+40, r25	; 0x28
    2e96:	a9 a7       	std	Y+41, r26	; 0x29
    2e98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4a e7       	ldi	r20, 0x7A	; 122
    2ea8:	55 e4       	ldi	r21, 0x45	; 69
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	8b a3       	std	Y+35, r24	; 0x23
    2eb4:	9c a3       	std	Y+36, r25	; 0x24
    2eb6:	ad a3       	std	Y+37, r26	; 0x25
    2eb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eba:	6b a1       	ldd	r22, Y+35	; 0x23
    2ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    2ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e8       	ldi	r20, 0x80	; 128
    2ec8:	5f e3       	ldi	r21, 0x3F	; 63
    2eca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ece:	88 23       	and	r24, r24
    2ed0:	2c f4       	brge	.+10     	; 0x2edc <H_LCD_Void_LCDWriteCommand+0x16e>
		__ticks = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9a a3       	std	Y+34, r25	; 0x22
    2ed8:	89 a3       	std	Y+33, r24	; 0x21
    2eda:	3f c0       	rjmp	.+126    	; 0x2f5a <H_LCD_Void_LCDWriteCommand+0x1ec>
	else if (__tmp > 65535)
    2edc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ede:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	4c f5       	brge	.+82     	; 0x2f46 <H_LCD_Void_LCDWriteCommand+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ef6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ef8:	89 a5       	ldd	r24, Y+41	; 0x29
    2efa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9a a3       	std	Y+34, r25	; 0x22
    2f1a:	89 a3       	std	Y+33, r24	; 0x21
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <H_LCD_Void_LCDWriteCommand+0x1ce>
    2f1e:	80 e9       	ldi	r24, 0x90	; 144
    2f20:	91 e0       	ldi	r25, 0x01	; 1
    2f22:	98 a3       	std	Y+32, r25	; 0x20
    2f24:	8f 8f       	std	Y+31, r24	; 0x1f
    2f26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f28:	98 a1       	ldd	r25, Y+32	; 0x20
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <H_LCD_Void_LCDWriteCommand+0x1bc>
    2f2e:	98 a3       	std	Y+32, r25	; 0x20
    2f30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	89 a1       	ldd	r24, Y+33	; 0x21
    2f34:	9a a1       	ldd	r25, Y+34	; 0x22
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9a a3       	std	Y+34, r25	; 0x22
    2f3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <H_LCD_Void_LCDWriteCommand+0x1b0>
    2f44:	14 c0       	rjmp	.+40     	; 0x2f6e <H_LCD_Void_LCDWriteCommand+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	6b a1       	ldd	r22, Y+35	; 0x23
    2f48:	7c a1       	ldd	r23, Y+36	; 0x24
    2f4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	9a a3       	std	Y+34, r25	; 0x22
    2f58:	89 a3       	std	Y+33, r24	; 0x21
    2f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f5e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f60:	8d 8f       	std	Y+29, r24	; 0x1d
    2f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <H_LCD_Void_LCDWriteCommand+0x1f8>
    2f6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f6c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Ab3at el 4 el fl akher baa 1010(0010) fa bab3t el rqam zay ma howa w howa haylhod awel 4 bas
	H_LCD_Void_LCDSetPins(Copy_U8_Command);
    2f6e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f70:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <H_LCD_Void_LCDSetPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2f74:	87 e1       	ldi	r24, 0x17	; 23
    2f76:	61 e0       	ldi	r22, 0x01	; 1
    2f78:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	a0 e8       	ldi	r26, 0x80	; 128
    2f82:	bf e3       	ldi	r27, 0x3F	; 63
    2f84:	89 8f       	std	Y+25, r24	; 0x19
    2f86:	9a 8f       	std	Y+26, r25	; 0x1a
    2f88:	ab 8f       	std	Y+27, r26	; 0x1b
    2f8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	4a e7       	ldi	r20, 0x7A	; 122
    2f9a:	55 e4       	ldi	r21, 0x45	; 69
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	8d 8b       	std	Y+21, r24	; 0x15
    2fa6:	9e 8b       	std	Y+22, r25	; 0x16
    2fa8:	af 8b       	std	Y+23, r26	; 0x17
    2faa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fac:	6d 89       	ldd	r22, Y+21	; 0x15
    2fae:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e8       	ldi	r20, 0x80	; 128
    2fba:	5f e3       	ldi	r21, 0x3F	; 63
    2fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fc0:	88 23       	and	r24, r24
    2fc2:	2c f4       	brge	.+10     	; 0x2fce <H_LCD_Void_LCDWriteCommand+0x260>
		__ticks = 1;
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	9c 8b       	std	Y+20, r25	; 0x14
    2fca:	8b 8b       	std	Y+19, r24	; 0x13
    2fcc:	3f c0       	rjmp	.+126    	; 0x304c <H_LCD_Void_LCDWriteCommand+0x2de>
	else if (__tmp > 65535)
    2fce:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	3f ef       	ldi	r19, 0xFF	; 255
    2fda:	4f e7       	ldi	r20, 0x7F	; 127
    2fdc:	57 e4       	ldi	r21, 0x47	; 71
    2fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fe2:	18 16       	cp	r1, r24
    2fe4:	4c f5       	brge	.+82     	; 0x3038 <H_LCD_Void_LCDWriteCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    2fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e2       	ldi	r20, 0x20	; 32
    2ff4:	51 e4       	ldi	r21, 0x41	; 65
    2ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	bc 01       	movw	r22, r24
    3000:	cd 01       	movw	r24, r26
    3002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	9c 8b       	std	Y+20, r25	; 0x14
    300c:	8b 8b       	std	Y+19, r24	; 0x13
    300e:	0f c0       	rjmp	.+30     	; 0x302e <H_LCD_Void_LCDWriteCommand+0x2c0>
    3010:	80 e9       	ldi	r24, 0x90	; 144
    3012:	91 e0       	ldi	r25, 0x01	; 1
    3014:	9a 8b       	std	Y+18, r25	; 0x12
    3016:	89 8b       	std	Y+17, r24	; 0x11
    3018:	89 89       	ldd	r24, Y+17	; 0x11
    301a:	9a 89       	ldd	r25, Y+18	; 0x12
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <H_LCD_Void_LCDWriteCommand+0x2ae>
    3020:	9a 8b       	std	Y+18, r25	; 0x12
    3022:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3024:	8b 89       	ldd	r24, Y+19	; 0x13
    3026:	9c 89       	ldd	r25, Y+20	; 0x14
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	9c 8b       	std	Y+20, r25	; 0x14
    302c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302e:	8b 89       	ldd	r24, Y+19	; 0x13
    3030:	9c 89       	ldd	r25, Y+20	; 0x14
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	69 f7       	brne	.-38     	; 0x3010 <H_LCD_Void_LCDWriteCommand+0x2a2>
    3036:	14 c0       	rjmp	.+40     	; 0x3060 <H_LCD_Void_LCDWriteCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3038:	6d 89       	ldd	r22, Y+21	; 0x15
    303a:	7e 89       	ldd	r23, Y+22	; 0x16
    303c:	8f 89       	ldd	r24, Y+23	; 0x17
    303e:	98 8d       	ldd	r25, Y+24	; 0x18
    3040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	9c 8b       	std	Y+20, r25	; 0x14
    304a:	8b 8b       	std	Y+19, r24	; 0x13
    304c:	8b 89       	ldd	r24, Y+19	; 0x13
    304e:	9c 89       	ldd	r25, Y+20	; 0x14
    3050:	98 8b       	std	Y+16, r25	; 0x10
    3052:	8f 87       	std	Y+15, r24	; 0x0f
    3054:	8f 85       	ldd	r24, Y+15	; 0x0f
    3056:	98 89       	ldd	r25, Y+16	; 0x10
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <H_LCD_Void_LCDWriteCommand+0x2ea>
    305c:	98 8b       	std	Y+16, r25	; 0x10
    305e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    3060:	87 e1       	ldi	r24, 0x17	; 23
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	a0 e8       	ldi	r26, 0x80	; 128
    306e:	bf e3       	ldi	r27, 0x3F	; 63
    3070:	8b 87       	std	Y+11, r24	; 0x0b
    3072:	9c 87       	std	Y+12, r25	; 0x0c
    3074:	ad 87       	std	Y+13, r26	; 0x0d
    3076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3078:	6b 85       	ldd	r22, Y+11	; 0x0b
    307a:	7c 85       	ldd	r23, Y+12	; 0x0c
    307c:	8d 85       	ldd	r24, Y+13	; 0x0d
    307e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a e7       	ldi	r20, 0x7A	; 122
    3086:	55 e4       	ldi	r21, 0x45	; 69
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	8f 83       	std	Y+7, r24	; 0x07
    3092:	98 87       	std	Y+8, r25	; 0x08
    3094:	a9 87       	std	Y+9, r26	; 0x09
    3096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3098:	6f 81       	ldd	r22, Y+7	; 0x07
    309a:	78 85       	ldd	r23, Y+8	; 0x08
    309c:	89 85       	ldd	r24, Y+9	; 0x09
    309e:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e8       	ldi	r20, 0x80	; 128
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ac:	88 23       	and	r24, r24
    30ae:	2c f4       	brge	.+10     	; 0x30ba <H_LCD_Void_LCDWriteCommand+0x34c>
		__ticks = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	3f c0       	rjmp	.+126    	; 0x3138 <H_LCD_Void_LCDWriteCommand+0x3ca>
	else if (__tmp > 65535)
    30ba:	6f 81       	ldd	r22, Y+7	; 0x07
    30bc:	78 85       	ldd	r23, Y+8	; 0x08
    30be:	89 85       	ldd	r24, Y+9	; 0x09
    30c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	3f ef       	ldi	r19, 0xFF	; 255
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	57 e4       	ldi	r21, 0x47	; 71
    30ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ce:	18 16       	cp	r1, r24
    30d0:	4c f5       	brge	.+82     	; 0x3124 <H_LCD_Void_LCDWriteCommand+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e2       	ldi	r20, 0x20	; 32
    30e0:	51 e4       	ldi	r21, 0x41	; 65
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	9e 83       	std	Y+6, r25	; 0x06
    30f8:	8d 83       	std	Y+5, r24	; 0x05
    30fa:	0f c0       	rjmp	.+30     	; 0x311a <H_LCD_Void_LCDWriteCommand+0x3ac>
    30fc:	80 e9       	ldi	r24, 0x90	; 144
    30fe:	91 e0       	ldi	r25, 0x01	; 1
    3100:	9c 83       	std	Y+4, r25	; 0x04
    3102:	8b 83       	std	Y+3, r24	; 0x03
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	9c 81       	ldd	r25, Y+4	; 0x04
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <H_LCD_Void_LCDWriteCommand+0x39a>
    310c:	9c 83       	std	Y+4, r25	; 0x04
    310e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3110:	8d 81       	ldd	r24, Y+5	; 0x05
    3112:	9e 81       	ldd	r25, Y+6	; 0x06
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	9e 83       	std	Y+6, r25	; 0x06
    3118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311a:	8d 81       	ldd	r24, Y+5	; 0x05
    311c:	9e 81       	ldd	r25, Y+6	; 0x06
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	69 f7       	brne	.-38     	; 0x30fc <H_LCD_Void_LCDWriteCommand+0x38e>
    3122:	14 c0       	rjmp	.+40     	; 0x314c <H_LCD_Void_LCDWriteCommand+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3124:	6f 81       	ldd	r22, Y+7	; 0x07
    3126:	78 85       	ldd	r23, Y+8	; 0x08
    3128:	89 85       	ldd	r24, Y+9	; 0x09
    312a:	9a 85       	ldd	r25, Y+10	; 0x0a
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	9e 83       	std	Y+6, r25	; 0x06
    3136:	8d 83       	std	Y+5, r24	; 0x05
    3138:	8d 81       	ldd	r24, Y+5	; 0x05
    313a:	9e 81       	ldd	r25, Y+6	; 0x06
    313c:	9a 83       	std	Y+2, r25	; 0x02
    313e:	89 83       	std	Y+1, r24	; 0x01
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	9a 81       	ldd	r25, Y+2	; 0x02
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <H_LCD_Void_LCDWriteCommand+0x3d6>
    3148:	9a 83       	std	Y+2, r25	; 0x02
    314a:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(1);
}
    314c:	e9 96       	adiw	r28, 0x39	; 57
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	cd bf       	out	0x3d, r28	; 61
    3158:	cf 91       	pop	r28
    315a:	df 91       	pop	r29
    315c:	08 95       	ret

0000315e <H_LCD_Void_LCDWriteNumber>:

void H_LCD_Void_LCDWriteNumber(s32 Copy_S32_Num)	//128
{
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	65 97       	sbiw	r28, 0x15	; 21
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	6a 8b       	std	Y+18, r22	; 0x12
    3178:	7b 8b       	std	Y+19, r23	; 0x13
    317a:	8c 8b       	std	Y+20, r24	; 0x14
    317c:	9d 8b       	std	Y+21, r25	; 0x15
	s8 Local_S8_Counter = -1;	//Ashan m3mlsh -- lel counter b3d el while loop
    317e:	8f ef       	ldi	r24, 0xFF	; 255
    3180:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_U8_Array[16];	    //max 16 digit 3ala el screen

	if (Copy_S32_Num < 0) //ashan law el num negative
    3182:	8a 89       	ldd	r24, Y+18	; 0x12
    3184:	9b 89       	ldd	r25, Y+19	; 0x13
    3186:	ac 89       	ldd	r26, Y+20	; 0x14
    3188:	bd 89       	ldd	r27, Y+21	; 0x15
    318a:	bb 23       	and	r27, r27
    318c:	94 f4       	brge	.+36     	; 0x31b2 <H_LCD_Void_LCDWriteNumber+0x54>
	{
		Copy_S32_Num = Copy_S32_Num * -1;
    318e:	8a 89       	ldd	r24, Y+18	; 0x12
    3190:	9b 89       	ldd	r25, Y+19	; 0x13
    3192:	ac 89       	ldd	r26, Y+20	; 0x14
    3194:	bd 89       	ldd	r27, Y+21	; 0x15
    3196:	b0 95       	com	r27
    3198:	a0 95       	com	r26
    319a:	90 95       	com	r25
    319c:	81 95       	neg	r24
    319e:	9f 4f       	sbci	r25, 0xFF	; 255
    31a0:	af 4f       	sbci	r26, 0xFF	; 255
    31a2:	bf 4f       	sbci	r27, 0xFF	; 255
    31a4:	8a 8b       	std	Y+18, r24	; 0x12
    31a6:	9b 8b       	std	Y+19, r25	; 0x13
    31a8:	ac 8b       	std	Y+20, r26	; 0x14
    31aa:	bd 8b       	std	Y+21, r27	; 0x15
		H_LCD_Void_LCDWriteCharacter('-');
    31ac:	8d e2       	ldi	r24, 0x2D	; 45
    31ae:	0e 94 96 14 	call	0x292c	; 0x292c <H_LCD_Void_LCDWriteCharacter>
	}

	do	//ashan ytba3 el zero
	{
		Local_S8_Counter++;	//1 -> 2 -> 3
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	8f 5f       	subi	r24, 0xFF	; 255
    31b6:	89 83       	std	Y+1, r24	; 0x01
		Local_U8_Array[Local_S8_Counter] = Copy_S32_Num % 10; //8 -> 2 -> 1
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	08 2f       	mov	r16, r24
    31bc:	11 27       	eor	r17, r17
    31be:	07 fd       	sbrc	r16, 7
    31c0:	10 95       	com	r17
    31c2:	8a 89       	ldd	r24, Y+18	; 0x12
    31c4:	9b 89       	ldd	r25, Y+19	; 0x13
    31c6:	ac 89       	ldd	r26, Y+20	; 0x14
    31c8:	bd 89       	ldd	r27, Y+21	; 0x15
    31ca:	2a e0       	ldi	r18, 0x0A	; 10
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	bc 01       	movw	r22, r24
    31d4:	cd 01       	movw	r24, r26
    31d6:	0e 94 86 24 	call	0x490c	; 0x490c <__divmodsi4>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	28 2f       	mov	r18, r24
    31e0:	ce 01       	movw	r24, r28
    31e2:	02 96       	adiw	r24, 0x02	; 2
    31e4:	fc 01       	movw	r30, r24
    31e6:	e0 0f       	add	r30, r16
    31e8:	f1 1f       	adc	r31, r17
    31ea:	20 83       	st	Z, r18
		Copy_S32_Num = Copy_S32_Num / 10; //12 -> 1 -> 0
    31ec:	8a 89       	ldd	r24, Y+18	; 0x12
    31ee:	9b 89       	ldd	r25, Y+19	; 0x13
    31f0:	ac 89       	ldd	r26, Y+20	; 0x14
    31f2:	bd 89       	ldd	r27, Y+21	; 0x15
    31f4:	2a e0       	ldi	r18, 0x0A	; 10
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	bc 01       	movw	r22, r24
    31fe:	cd 01       	movw	r24, r26
    3200:	0e 94 86 24 	call	0x490c	; 0x490c <__divmodsi4>
    3204:	da 01       	movw	r26, r20
    3206:	c9 01       	movw	r24, r18
    3208:	8a 8b       	std	Y+18, r24	; 0x12
    320a:	9b 8b       	std	Y+19, r25	; 0x13
    320c:	ac 8b       	std	Y+20, r26	; 0x14
    320e:	bd 8b       	std	Y+21, r27	; 0x15
		//el array =[8,2,1]
	} while (Copy_S32_Num != 0);
    3210:	8a 89       	ldd	r24, Y+18	; 0x12
    3212:	9b 89       	ldd	r25, Y+19	; 0x13
    3214:	ac 89       	ldd	r26, Y+20	; 0x14
    3216:	bd 89       	ldd	r27, Y+21	; 0x15
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	a1 05       	cpc	r26, r1
    321c:	b1 05       	cpc	r27, r1
    321e:	49 f6       	brne	.-110    	; 0x31b2 <H_LCD_Void_LCDWriteNumber+0x54>
    3220:	11 c0       	rjmp	.+34     	; 0x3244 <H_LCD_Void_LCDWriteNumber+0xe6>

	while (Local_S8_Counter >= 0) {
		H_LCD_Void_LCDWriteCharacter(Local_U8_Array[Local_S8_Counter] + 48);
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	28 2f       	mov	r18, r24
    3226:	33 27       	eor	r19, r19
    3228:	27 fd       	sbrc	r18, 7
    322a:	30 95       	com	r19
    322c:	ce 01       	movw	r24, r28
    322e:	02 96       	adiw	r24, 0x02	; 2
    3230:	fc 01       	movw	r30, r24
    3232:	e2 0f       	add	r30, r18
    3234:	f3 1f       	adc	r31, r19
    3236:	80 81       	ld	r24, Z
    3238:	80 5d       	subi	r24, 0xD0	; 208
    323a:	0e 94 96 14 	call	0x292c	; 0x292c <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	81 50       	subi	r24, 0x01	; 1
    3242:	89 83       	std	Y+1, r24	; 0x01
		Local_U8_Array[Local_S8_Counter] = Copy_S32_Num % 10; //8 -> 2 -> 1
		Copy_S32_Num = Copy_S32_Num / 10; //12 -> 1 -> 0
		//el array =[8,2,1]
	} while (Copy_S32_Num != 0);

	while (Local_S8_Counter >= 0) {
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	88 23       	and	r24, r24
    3248:	64 f7       	brge	.-40     	; 0x3222 <H_LCD_Void_LCDWriteNumber+0xc4>
		H_LCD_Void_LCDWriteCharacter(Local_U8_Array[Local_S8_Counter] + 48);
		Local_S8_Counter--;
	}
}
    324a:	65 96       	adiw	r28, 0x15	; 21
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	08 95       	ret

00003260 <H_LCD_Void_LCDGoTo>:

void H_LCD_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Column)//Row:0-1 Column:0 -> 15
{
    3260:	df 93       	push	r29
    3262:	cf 93       	push	r28
    3264:	00 d0       	rcall	.+0      	; 0x3266 <H_LCD_Void_LCDGoTo+0x6>
    3266:	00 d0       	rcall	.+0      	; 0x3268 <H_LCD_Void_LCDGoTo+0x8>
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	8b 83       	std	Y+3, r24	; 0x03
    326e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Array[2]={0x08 , 0xC0};/******VERY GOOD IDEA*****/
    3270:	88 e0       	ldi	r24, 0x08	; 8
    3272:	89 83       	std	Y+1, r24	; 0x01
    3274:	80 ec       	ldi	r24, 0xC0	; 192
    3276:	8a 83       	std	Y+2, r24	; 0x02
	 H_LCD_Void_LCDWriteCommand(Local_U8_Array[Copy_U8_Row] + Copy_U8_Column);
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	28 2f       	mov	r18, r24
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	ce 01       	movw	r24, r28
    3280:	01 96       	adiw	r24, 0x01	; 1
    3282:	fc 01       	movw	r30, r24
    3284:	e2 0f       	add	r30, r18
    3286:	f3 1f       	adc	r31, r19
    3288:	90 81       	ld	r25, Z
    328a:	8c 81       	ldd	r24, Y+4	; 0x04
    328c:	89 0f       	add	r24, r25
    328e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <H_LCD_Void_LCDWriteCommand>
}
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <H_LCD_Void_LCDClear>:

void H_LCD_Void_LCDClear(void)
{
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <H_LCD_Void_LCDWriteCommand>
}
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	08 95       	ret

000032b4 <H_LCD_Void_LCDSetPins>:

static void H_LCD_Void_LCDSetPins(u8 Copy_U8_Num)
{
    32b4:	df 93       	push	r29
    32b6:	cf 93       	push	r28
    32b8:	0f 92       	push	r0
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Num >>6 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Num >>7 & 0x01);

#elif     LCD_MODE     ==     _4_BIT_MODE

	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Num >>0 & 0x01);
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	98 2f       	mov	r25, r24
    32c4:	91 70       	andi	r25, 0x01	; 1
    32c6:	8e e0       	ldi	r24, 0x0E	; 14
    32c8:	69 2f       	mov	r22, r25
    32ca:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Num >>1 & 0x01);
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	86 95       	lsr	r24
    32d2:	98 2f       	mov	r25, r24
    32d4:	91 70       	andi	r25, 0x01	; 1
    32d6:	8f e0       	ldi	r24, 0x0F	; 15
    32d8:	69 2f       	mov	r22, r25
    32da:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Num >>2 & 0x01);
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	86 95       	lsr	r24
    32e2:	86 95       	lsr	r24
    32e4:	98 2f       	mov	r25, r24
    32e6:	91 70       	andi	r25, 0x01	; 1
    32e8:	80 e1       	ldi	r24, 0x10	; 16
    32ea:	69 2f       	mov	r22, r25
    32ec:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Num >>3 & 0x01);
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	86 95       	lsr	r24
    32f4:	86 95       	lsr	r24
    32f6:	86 95       	lsr	r24
    32f8:	98 2f       	mov	r25, r24
    32fa:	91 70       	andi	r25, 0x01	; 1
    32fc:	81 e1       	ldi	r24, 0x11	; 17
    32fe:	69 2f       	mov	r22, r25
    3300:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>

#endif
}
    3304:	0f 90       	pop	r0
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	08 95       	ret

0000330c <H_Keypad_Void_KeypadInit>:


#include "Keypad_Interface.h"

void H_Keypad_Void_KeypadInit(void)
{
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    3314:	81 e2       	ldi	r24, 0x21	; 33
    3316:	61 e0       	ldi	r22, 0x01	; 1
    3318:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    331c:	82 e2       	ldi	r24, 0x22	; 34
    331e:	61 e0       	ldi	r22, 0x01	; 1
    3320:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    3324:	83 e2       	ldi	r24, 0x23	; 35
    3326:	61 e0       	ldi	r22, 0x01	; 1
    3328:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    332c:	84 e2       	ldi	r24, 0x24	; 36
    332e:	61 e0       	ldi	r22, 0x01	; 1
    3330:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    3334:	81 e2       	ldi	r24, 0x21	; 33
    3336:	61 e0       	ldi	r22, 0x01	; 1
    3338:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    333c:	82 e2       	ldi	r24, 0x22	; 34
    333e:	61 e0       	ldi	r22, 0x01	; 1
    3340:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    3344:	83 e2       	ldi	r24, 0x23	; 35
    3346:	61 e0       	ldi	r22, 0x01	; 1
    3348:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    334c:	84 e2       	ldi	r24, 0x24	; 36
    334e:	61 e0       	ldi	r22, 0x01	; 1
    3350:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    3354:	88 e1       	ldi	r24, 0x18	; 24
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    335c:	89 e1       	ldi	r24, 0x19	; 25
    335e:	60 e0       	ldi	r22, 0x00	; 0
    3360:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    3364:	8a e1       	ldi	r24, 0x1A	; 26
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
    336c:	8b e1       	ldi	r24, 0x1B	; 27
    336e:	60 e0       	ldi	r22, 0x00	; 0
    3370:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinPullUpResistor(KEYPAD_C0_PIN,ENABLE);
    3374:	88 e1       	ldi	r24, 0x18	; 24
    3376:	61 e0       	ldi	r22, 0x01	; 1
    3378:	0e 94 48 0b 	call	0x1690	; 0x1690 <M_DIO_Void_SetPinPullUpResistor>
	M_DIO_Void_SetPinPullUpResistor(KEYPAD_C1_PIN,ENABLE);
    337c:	89 e1       	ldi	r24, 0x19	; 25
    337e:	61 e0       	ldi	r22, 0x01	; 1
    3380:	0e 94 48 0b 	call	0x1690	; 0x1690 <M_DIO_Void_SetPinPullUpResistor>
	M_DIO_Void_SetPinPullUpResistor(KEYPAD_C2_PIN,ENABLE);
    3384:	8a e1       	ldi	r24, 0x1A	; 26
    3386:	61 e0       	ldi	r22, 0x01	; 1
    3388:	0e 94 48 0b 	call	0x1690	; 0x1690 <M_DIO_Void_SetPinPullUpResistor>
	M_DIO_Void_SetPinPullUpResistor(KEYPAD_C3_PIN,ENABLE);
    338c:	8b e1       	ldi	r24, 0x1B	; 27
    338e:	61 e0       	ldi	r22, 0x01	; 1
    3390:	0e 94 48 0b 	call	0x1690	; 0x1690 <M_DIO_Void_SetPinPullUpResistor>
}
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	08 95       	ret

0000339a <H_Keypad_U8_KeypadRead>:

u8   H_Keypad_U8_KeypadRead(void)
{
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	a6 97       	sbiw	r28, 0x26	; 38
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	0f be       	out	0x3f, r0	; 63
    33ac:	cd bf       	out	0x3d, r28	; 61
#if   KEYPAD_MODE     ==    TYPE_1
	u8 Local_U8_Arr[4][4] = {{ '1' , '2' , '3' , 'A' },
			                 { '4' , '5' , '6' , 'B' },
			                 { '7' , '8' , '9' , 'C' },
			                 { '*' , '0' , '#' , 'D' }};
    33ae:	ce 01       	movw	r24, r28
    33b0:	42 96       	adiw	r24, 0x12	; 18
    33b2:	9b a3       	std	Y+35, r25	; 0x23
    33b4:	8a a3       	std	Y+34, r24	; 0x22
    33b6:	e5 e7       	ldi	r30, 0x75	; 117
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	fd a3       	std	Y+37, r31	; 0x25
    33bc:	ec a3       	std	Y+36, r30	; 0x24
    33be:	f0 e1       	ldi	r31, 0x10	; 16
    33c0:	fe a3       	std	Y+38, r31	; 0x26
    33c2:	ec a1       	ldd	r30, Y+36	; 0x24
    33c4:	fd a1       	ldd	r31, Y+37	; 0x25
    33c6:	00 80       	ld	r0, Z
    33c8:	8c a1       	ldd	r24, Y+36	; 0x24
    33ca:	9d a1       	ldd	r25, Y+37	; 0x25
    33cc:	01 96       	adiw	r24, 0x01	; 1
    33ce:	9d a3       	std	Y+37, r25	; 0x25
    33d0:	8c a3       	std	Y+36, r24	; 0x24
    33d2:	ea a1       	ldd	r30, Y+34	; 0x22
    33d4:	fb a1       	ldd	r31, Y+35	; 0x23
    33d6:	00 82       	st	Z, r0
    33d8:	8a a1       	ldd	r24, Y+34	; 0x22
    33da:	9b a1       	ldd	r25, Y+35	; 0x23
    33dc:	01 96       	adiw	r24, 0x01	; 1
    33de:	9b a3       	std	Y+35, r25	; 0x23
    33e0:	8a a3       	std	Y+34, r24	; 0x22
    33e2:	9e a1       	ldd	r25, Y+38	; 0x26
    33e4:	91 50       	subi	r25, 0x01	; 1
    33e6:	9e a3       	std	Y+38, r25	; 0x26
    33e8:	ee a1       	ldd	r30, Y+38	; 0x26
    33ea:	ee 23       	and	r30, r30
    33ec:	51 f7       	brne	.-44     	; 0x33c2 <H_Keypad_U8_KeypadRead+0x28>
				             { '4' , '5' , '6' , '*' },
				             { '1' , '2' , '3' , '-' },
				             { 'C' , '0' , '=' , '+' }};
#endif

	u8 Local_U8_Reading = 0;//m3naha eno madassh,law b2et 0 yb2a howa das
    33ee:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_U8_Col = 0;
    33f0:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_U8_Row = 0;
    33f2:	1f 86       	std	Y+15, r1	; 0x0f
	for (Local_U8_Row = KEYPAD_R0_PIN; Local_U8_Row <= KEYPAD_R3_PIN; Local_U8_Row++)
    33f4:	81 e2       	ldi	r24, 0x21	; 33
    33f6:	8f 87       	std	Y+15, r24	; 0x0f
    33f8:	b2 c0       	rjmp	.+356    	; 0x355e <H_Keypad_U8_KeypadRead+0x1c4>
	{
		M_DIO_Void_SetPinValue(Local_U8_Row, LOW);
    33fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    33fc:	60 e0       	ldi	r22, 0x00	; 0
    33fe:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
		for (Local_U8_Col = KEYPAD_C0_PIN; Local_U8_Col <= KEYPAD_C3_PIN; Local_U8_Col++)
    3402:	88 e1       	ldi	r24, 0x18	; 24
    3404:	88 8b       	std	Y+16, r24	; 0x10
    3406:	a0 c0       	rjmp	.+320    	; 0x3548 <H_Keypad_U8_KeypadRead+0x1ae>
		{
			if (M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    3408:	88 89       	ldd	r24, Y+16	; 0x10
    340a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    340e:	88 23       	and	r24, r24
    3410:	09 f0       	breq	.+2      	; 0x3414 <H_Keypad_U8_KeypadRead+0x7a>
    3412:	97 c0       	rjmp	.+302    	; 0x3542 <H_Keypad_U8_KeypadRead+0x1a8>
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	a0 ef       	ldi	r26, 0xF0	; 240
    341a:	b2 e4       	ldi	r27, 0x42	; 66
    341c:	8b 87       	std	Y+11, r24	; 0x0b
    341e:	9c 87       	std	Y+12, r25	; 0x0c
    3420:	ad 87       	std	Y+13, r26	; 0x0d
    3422:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3424:	6b 85       	ldd	r22, Y+11	; 0x0b
    3426:	7c 85       	ldd	r23, Y+12	; 0x0c
    3428:	8d 85       	ldd	r24, Y+13	; 0x0d
    342a:	9e 85       	ldd	r25, Y+14	; 0x0e
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	4a e7       	ldi	r20, 0x7A	; 122
    3432:	55 e4       	ldi	r21, 0x45	; 69
    3434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	8f 83       	std	Y+7, r24	; 0x07
    343e:	98 87       	std	Y+8, r25	; 0x08
    3440:	a9 87       	std	Y+9, r26	; 0x09
    3442:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3444:	6f 81       	ldd	r22, Y+7	; 0x07
    3446:	78 85       	ldd	r23, Y+8	; 0x08
    3448:	89 85       	ldd	r24, Y+9	; 0x09
    344a:	9a 85       	ldd	r25, Y+10	; 0x0a
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e8       	ldi	r20, 0x80	; 128
    3452:	5f e3       	ldi	r21, 0x3F	; 63
    3454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3458:	88 23       	and	r24, r24
    345a:	2c f4       	brge	.+10     	; 0x3466 <H_Keypad_U8_KeypadRead+0xcc>
		__ticks = 1;
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	9e 83       	std	Y+6, r25	; 0x06
    3462:	8d 83       	std	Y+5, r24	; 0x05
    3464:	3f c0       	rjmp	.+126    	; 0x34e4 <H_Keypad_U8_KeypadRead+0x14a>
	else if (__tmp > 65535)
    3466:	6f 81       	ldd	r22, Y+7	; 0x07
    3468:	78 85       	ldd	r23, Y+8	; 0x08
    346a:	89 85       	ldd	r24, Y+9	; 0x09
    346c:	9a 85       	ldd	r25, Y+10	; 0x0a
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	3f ef       	ldi	r19, 0xFF	; 255
    3472:	4f e7       	ldi	r20, 0x7F	; 127
    3474:	57 e4       	ldi	r21, 0x47	; 71
    3476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    347a:	18 16       	cp	r1, r24
    347c:	4c f5       	brge	.+82     	; 0x34d0 <H_Keypad_U8_KeypadRead+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3480:	7c 85       	ldd	r23, Y+12	; 0x0c
    3482:	8d 85       	ldd	r24, Y+13	; 0x0d
    3484:	9e 85       	ldd	r25, Y+14	; 0x0e
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e2       	ldi	r20, 0x20	; 32
    348c:	51 e4       	ldi	r21, 0x41	; 65
    348e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	bc 01       	movw	r22, r24
    3498:	cd 01       	movw	r24, r26
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9e 83       	std	Y+6, r25	; 0x06
    34a4:	8d 83       	std	Y+5, r24	; 0x05
    34a6:	0f c0       	rjmp	.+30     	; 0x34c6 <H_Keypad_U8_KeypadRead+0x12c>
    34a8:	80 e9       	ldi	r24, 0x90	; 144
    34aa:	91 e0       	ldi	r25, 0x01	; 1
    34ac:	9c 83       	std	Y+4, r25	; 0x04
    34ae:	8b 83       	std	Y+3, r24	; 0x03
    34b0:	8b 81       	ldd	r24, Y+3	; 0x03
    34b2:	9c 81       	ldd	r25, Y+4	; 0x04
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <H_Keypad_U8_KeypadRead+0x11a>
    34b8:	9c 83       	std	Y+4, r25	; 0x04
    34ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34bc:	8d 81       	ldd	r24, Y+5	; 0x05
    34be:	9e 81       	ldd	r25, Y+6	; 0x06
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	9e 83       	std	Y+6, r25	; 0x06
    34c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c6:	8d 81       	ldd	r24, Y+5	; 0x05
    34c8:	9e 81       	ldd	r25, Y+6	; 0x06
    34ca:	00 97       	sbiw	r24, 0x00	; 0
    34cc:	69 f7       	brne	.-38     	; 0x34a8 <H_Keypad_U8_KeypadRead+0x10e>
    34ce:	14 c0       	rjmp	.+40     	; 0x34f8 <H_Keypad_U8_KeypadRead+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d0:	6f 81       	ldd	r22, Y+7	; 0x07
    34d2:	78 85       	ldd	r23, Y+8	; 0x08
    34d4:	89 85       	ldd	r24, Y+9	; 0x09
    34d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	9e 83       	std	Y+6, r25	; 0x06
    34e2:	8d 83       	std	Y+5, r24	; 0x05
    34e4:	8d 81       	ldd	r24, Y+5	; 0x05
    34e6:	9e 81       	ldd	r25, Y+6	; 0x06
    34e8:	9a 83       	std	Y+2, r25	; 0x02
    34ea:	89 83       	std	Y+1, r24	; 0x01
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	9a 81       	ldd	r25, Y+2	; 0x02
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <H_Keypad_U8_KeypadRead+0x156>
    34f4:	9a 83       	std	Y+2, r25	; 0x02
    34f6:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(KEYPAD_BOUNCING_TIME);
				if( M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    34f8:	88 89       	ldd	r24, Y+16	; 0x10
    34fa:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    34fe:	88 23       	and	r24, r24
    3500:	01 f5       	brne	.+64     	; 0x3542 <H_Keypad_U8_KeypadRead+0x1a8>
				{
					while(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED);
    3502:	88 89       	ldd	r24, Y+16	; 0x10
    3504:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <M_DIO_U8_GetPinValue>
    3508:	88 23       	and	r24, r24
    350a:	d9 f3       	breq	.-10     	; 0x3502 <H_Keypad_U8_KeypadRead+0x168>
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row - KEYPAD_R0_PIN][Local_U8_Col - KEYPAD_C0_PIN] ;
    350c:	8f 85       	ldd	r24, Y+15	; 0x0f
    350e:	88 2f       	mov	r24, r24
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	9c 01       	movw	r18, r24
    3514:	21 52       	subi	r18, 0x21	; 33
    3516:	30 40       	sbci	r19, 0x00	; 0
    3518:	88 89       	ldd	r24, Y+16	; 0x10
    351a:	88 2f       	mov	r24, r24
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	ac 01       	movw	r20, r24
    3520:	48 51       	subi	r20, 0x18	; 24
    3522:	50 40       	sbci	r21, 0x00	; 0
    3524:	22 0f       	add	r18, r18
    3526:	33 1f       	adc	r19, r19
    3528:	22 0f       	add	r18, r18
    352a:	33 1f       	adc	r19, r19
    352c:	ce 01       	movw	r24, r28
    352e:	01 96       	adiw	r24, 0x01	; 1
    3530:	82 0f       	add	r24, r18
    3532:	93 1f       	adc	r25, r19
    3534:	84 0f       	add	r24, r20
    3536:	95 1f       	adc	r25, r21
    3538:	fc 01       	movw	r30, r24
    353a:	71 96       	adiw	r30, 0x11	; 17
    353c:	80 81       	ld	r24, Z
    353e:	89 8b       	std	Y+17, r24	; 0x11
    3540:	07 c0       	rjmp	.+14     	; 0x3550 <H_Keypad_U8_KeypadRead+0x1b6>
	u8 Local_U8_Col = 0;
	u8 Local_U8_Row = 0;
	for (Local_U8_Row = KEYPAD_R0_PIN; Local_U8_Row <= KEYPAD_R3_PIN; Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row, LOW);
		for (Local_U8_Col = KEYPAD_C0_PIN; Local_U8_Col <= KEYPAD_C3_PIN; Local_U8_Col++)
    3542:	88 89       	ldd	r24, Y+16	; 0x10
    3544:	8f 5f       	subi	r24, 0xFF	; 255
    3546:	88 8b       	std	Y+16, r24	; 0x10
    3548:	88 89       	ldd	r24, Y+16	; 0x10
    354a:	8c 31       	cpi	r24, 0x1C	; 28
    354c:	08 f4       	brcc	.+2      	; 0x3550 <H_Keypad_U8_KeypadRead+0x1b6>
    354e:	5c cf       	rjmp	.-328    	; 0x3408 <H_Keypad_U8_KeypadRead+0x6e>
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row - KEYPAD_R0_PIN][Local_U8_Col - KEYPAD_C0_PIN] ;
                    break;
				}
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row, HIGH);
    3550:	8f 85       	ldd	r24, Y+15	; 0x0f
    3552:	61 e0       	ldi	r22, 0x01	; 1
    3554:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
#endif

	u8 Local_U8_Reading = 0;//m3naha eno madassh,law b2et 0 yb2a howa das
	u8 Local_U8_Col = 0;
	u8 Local_U8_Row = 0;
	for (Local_U8_Row = KEYPAD_R0_PIN; Local_U8_Row <= KEYPAD_R3_PIN; Local_U8_Row++)
    3558:	8f 85       	ldd	r24, Y+15	; 0x0f
    355a:	8f 5f       	subi	r24, 0xFF	; 255
    355c:	8f 87       	std	Y+15, r24	; 0x0f
    355e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3560:	85 32       	cpi	r24, 0x25	; 37
    3562:	08 f4       	brcc	.+2      	; 0x3566 <H_Keypad_U8_KeypadRead+0x1cc>
    3564:	4a cf       	rjmp	.-364    	; 0x33fa <H_Keypad_U8_KeypadRead+0x60>
				}
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row, HIGH);
	}
	return Local_U8_Reading;
    3566:	89 89       	ldd	r24, Y+17	; 0x11
}
    3568:	a6 96       	adiw	r28, 0x26	; 38
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <H_HC05_Void_HC05Init>:
 */

#include "HC05_Interface.h"

void H_HC05_Void_HC05Init(void)
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
	M_UART_Void_UARTInit();
    3582:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_UART_Void_UARTInit>
}
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	08 95       	ret

0000358c <H_HC05_Void_HC05Send>:

void H_HC05_Void_HC05Send(u8 Copy_U8_Data)
{
    358c:	df 93       	push	r29
    358e:	cf 93       	push	r28
    3590:	0f 92       	push	r0
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
    3596:	89 83       	std	Y+1, r24	; 0x01
	M_UART_Void_UARTSend(Copy_U8_Data);
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	0e 94 e5 05 	call	0xbca	; 0xbca <M_UART_Void_UARTSend>
}
    359e:	0f 90       	pop	r0
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <H_HC05_U8_HC05Receive>:

u8   H_HC05_U8_HC05Receive(void)
{
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
	return M_UART_U8_UARTReceive();
    35ae:	0e 94 1d 06 	call	0xc3a	; 0xc3a <M_UART_U8_UARTReceive>
}
    35b2:	cf 91       	pop	r28
    35b4:	df 91       	pop	r29
    35b6:	08 95       	ret

000035b8 <H_Buzzer_Void_BuzzerInit>:
 */

#include "Buzzer_Interface.h"

void H_Buzzer_Void_BuzzerInit(void)
{
    35b8:	df 93       	push	r29
    35ba:	cf 93       	push	r28
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(Buzzer_PIN,OUTPUT);
    35c0:	8d e0       	ldi	r24, 0x0D	; 13
    35c2:	61 e0       	ldi	r22, 0x01	; 1
    35c4:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_DIO_Void_SetPinDirection>
}
    35c8:	cf 91       	pop	r28
    35ca:	df 91       	pop	r29
    35cc:	08 95       	ret

000035ce <H_Buzzer_Void_BuzzerSetOn>:

void H_Buzzer_Void_BuzzerSetOn(void)
{
    35ce:	df 93       	push	r29
    35d0:	cf 93       	push	r28
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(Buzzer_PIN,HIGH);
    35d6:	8d e0       	ldi	r24, 0x0D	; 13
    35d8:	61 e0       	ldi	r22, 0x01	; 1
    35da:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
}
    35de:	cf 91       	pop	r28
    35e0:	df 91       	pop	r29
    35e2:	08 95       	ret

000035e4 <H_Buzzer_Void_BuzzerSetOff>:

void H_Buzzer_Void_BuzzerSetOff(void)
{
    35e4:	df 93       	push	r29
    35e6:	cf 93       	push	r28
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(Buzzer_PIN,LOW);
    35ec:	8d e0       	ldi	r24, 0x0D	; 13
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
}
    35f4:	cf 91       	pop	r28
    35f6:	df 91       	pop	r29
    35f8:	08 95       	ret

000035fa <H_Buzzer_Void_BuzzerOnce>:

void H_Buzzer_Void_BuzzerOnce(void)
{
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
    3602:	2e 97       	sbiw	r28, 0x0e	; 14
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	f8 94       	cli
    3608:	de bf       	out	0x3e, r29	; 62
    360a:	0f be       	out	0x3f, r0	; 63
    360c:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(Buzzer_PIN,HIGH);
    360e:	8d e0       	ldi	r24, 0x0D	; 13
    3610:	61 e0       	ldi	r22, 0x01	; 1
    3612:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	a0 e7       	ldi	r26, 0x70	; 112
    361c:	b2 e4       	ldi	r27, 0x42	; 66
    361e:	8b 87       	std	Y+11, r24	; 0x0b
    3620:	9c 87       	std	Y+12, r25	; 0x0c
    3622:	ad 87       	std	Y+13, r26	; 0x0d
    3624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3626:	6b 85       	ldd	r22, Y+11	; 0x0b
    3628:	7c 85       	ldd	r23, Y+12	; 0x0c
    362a:	8d 85       	ldd	r24, Y+13	; 0x0d
    362c:	9e 85       	ldd	r25, Y+14	; 0x0e
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	4a e7       	ldi	r20, 0x7A	; 122
    3634:	55 e4       	ldi	r21, 0x45	; 69
    3636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	8f 83       	std	Y+7, r24	; 0x07
    3640:	98 87       	std	Y+8, r25	; 0x08
    3642:	a9 87       	std	Y+9, r26	; 0x09
    3644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3646:	6f 81       	ldd	r22, Y+7	; 0x07
    3648:	78 85       	ldd	r23, Y+8	; 0x08
    364a:	89 85       	ldd	r24, Y+9	; 0x09
    364c:	9a 85       	ldd	r25, Y+10	; 0x0a
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e8       	ldi	r20, 0x80	; 128
    3654:	5f e3       	ldi	r21, 0x3F	; 63
    3656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    365a:	88 23       	and	r24, r24
    365c:	2c f4       	brge	.+10     	; 0x3668 <H_Buzzer_Void_BuzzerOnce+0x6e>
		__ticks = 1;
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	9e 83       	std	Y+6, r25	; 0x06
    3664:	8d 83       	std	Y+5, r24	; 0x05
    3666:	3f c0       	rjmp	.+126    	; 0x36e6 <H_Buzzer_Void_BuzzerOnce+0xec>
	else if (__tmp > 65535)
    3668:	6f 81       	ldd	r22, Y+7	; 0x07
    366a:	78 85       	ldd	r23, Y+8	; 0x08
    366c:	89 85       	ldd	r24, Y+9	; 0x09
    366e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	3f ef       	ldi	r19, 0xFF	; 255
    3674:	4f e7       	ldi	r20, 0x7F	; 127
    3676:	57 e4       	ldi	r21, 0x47	; 71
    3678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    367c:	18 16       	cp	r1, r24
    367e:	4c f5       	brge	.+82     	; 0x36d2 <H_Buzzer_Void_BuzzerOnce+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3680:	6b 85       	ldd	r22, Y+11	; 0x0b
    3682:	7c 85       	ldd	r23, Y+12	; 0x0c
    3684:	8d 85       	ldd	r24, Y+13	; 0x0d
    3686:	9e 85       	ldd	r25, Y+14	; 0x0e
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e2       	ldi	r20, 0x20	; 32
    368e:	51 e4       	ldi	r21, 0x41	; 65
    3690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	bc 01       	movw	r22, r24
    369a:	cd 01       	movw	r24, r26
    369c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	9e 83       	std	Y+6, r25	; 0x06
    36a6:	8d 83       	std	Y+5, r24	; 0x05
    36a8:	0f c0       	rjmp	.+30     	; 0x36c8 <H_Buzzer_Void_BuzzerOnce+0xce>
    36aa:	80 e9       	ldi	r24, 0x90	; 144
    36ac:	91 e0       	ldi	r25, 0x01	; 1
    36ae:	9c 83       	std	Y+4, r25	; 0x04
    36b0:	8b 83       	std	Y+3, r24	; 0x03
    36b2:	8b 81       	ldd	r24, Y+3	; 0x03
    36b4:	9c 81       	ldd	r25, Y+4	; 0x04
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	f1 f7       	brne	.-4      	; 0x36b6 <H_Buzzer_Void_BuzzerOnce+0xbc>
    36ba:	9c 83       	std	Y+4, r25	; 0x04
    36bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36be:	8d 81       	ldd	r24, Y+5	; 0x05
    36c0:	9e 81       	ldd	r25, Y+6	; 0x06
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	9e 83       	std	Y+6, r25	; 0x06
    36c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ca:	9e 81       	ldd	r25, Y+6	; 0x06
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	69 f7       	brne	.-38     	; 0x36aa <H_Buzzer_Void_BuzzerOnce+0xb0>
    36d0:	14 c0       	rjmp	.+40     	; 0x36fa <H_Buzzer_Void_BuzzerOnce+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d2:	6f 81       	ldd	r22, Y+7	; 0x07
    36d4:	78 85       	ldd	r23, Y+8	; 0x08
    36d6:	89 85       	ldd	r24, Y+9	; 0x09
    36d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	9e 83       	std	Y+6, r25	; 0x06
    36e4:	8d 83       	std	Y+5, r24	; 0x05
    36e6:	8d 81       	ldd	r24, Y+5	; 0x05
    36e8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ea:	9a 83       	std	Y+2, r25	; 0x02
    36ec:	89 83       	std	Y+1, r24	; 0x01
    36ee:	89 81       	ldd	r24, Y+1	; 0x01
    36f0:	9a 81       	ldd	r25, Y+2	; 0x02
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	f1 f7       	brne	.-4      	; 0x36f2 <H_Buzzer_Void_BuzzerOnce+0xf8>
    36f6:	9a 83       	std	Y+2, r25	; 0x02
    36f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_TIME_ON);
	M_DIO_Void_SetPinValue(Buzzer_PIN,LOW);
    36fa:	8d e0       	ldi	r24, 0x0D	; 13
    36fc:	60 e0       	ldi	r22, 0x00	; 0
    36fe:	0e 94 32 0a 	call	0x1464	; 0x1464 <M_DIO_Void_SetPinValue>
}
    3702:	2e 96       	adiw	r28, 0x0e	; 14
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
    370e:	cf 91       	pop	r28
    3710:	df 91       	pop	r29
    3712:	08 95       	ret

00003714 <H_AT24C16A_Void_EEPROMInit>:
 */

#include "AT24C16A_Interface.h"

void H_AT24C16A_Void_EEPROMInit(void)
{
    3714:	df 93       	push	r29
    3716:	cf 93       	push	r28
    3718:	cd b7       	in	r28, 0x3d	; 61
    371a:	de b7       	in	r29, 0x3e	; 62
	M_I2C_Void_I2CInit();
    371c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <M_I2C_Void_I2CInit>
}
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <H_AT24C16A_Void_EEPROMWrite>:

void H_AT24C16A_Void_EEPROMWrite(u8 Copy_U8_Page , u8 Copy_U8_Byte , u8 Copy_U8_Data)
{
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	00 d0       	rcall	.+0      	; 0x372c <H_AT24C16A_Void_EEPROMWrite+0x6>
    372c:	0f 92       	push	r0
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
    3732:	89 83       	std	Y+1, r24	; 0x01
    3734:	6a 83       	std	Y+2, r22	; 0x02
    3736:	4b 83       	std	Y+3, r20	; 0x03
	M_I2C_Void_I2CStartCondition();
    3738:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <M_I2C_Void_I2CStartCondition>
	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	80 65       	ori	r24, 0x50	; 80
    3740:	0e 94 48 08 	call	0x1090	; 0x1090 <M_I2C_Void_I2CSendSlaveAddressWrite>
	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
    3744:	8a 81       	ldd	r24, Y+2	; 0x02
    3746:	0e 94 96 08 	call	0x112c	; 0x112c <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CSendByte(Copy_U8_Data);
    374a:	8b 81       	ldd	r24, Y+3	; 0x03
    374c:	0e 94 96 08 	call	0x112c	; 0x112c <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CStopCondition();
    3750:	0e 94 16 08 	call	0x102c	; 0x102c <M_I2C_Void_I2CStopCondition>
}
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	cf 91       	pop	r28
    375c:	df 91       	pop	r29
    375e:	08 95       	ret

00003760 <H_AT24C16A_U8_EEPROMRead>:

u8   H_AT24C16A_U8_EEPROMRead(u8 Copy_U8_Page , u8 Copy_U8_Byte )
{
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	00 d0       	rcall	.+0      	; 0x3766 <H_AT24C16A_U8_EEPROMRead+0x6>
    3766:	0f 92       	push	r0
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
    376c:	8a 83       	std	Y+2, r24	; 0x02
    376e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8_Reading = 0;
    3770:	19 82       	std	Y+1, r1	; 0x01
	M_I2C_Void_I2CStartCondition();
    3772:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <M_I2C_Void_I2CStartCondition>
	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	80 65       	ori	r24, 0x50	; 80
    377a:	0e 94 48 08 	call	0x1090	; 0x1090 <M_I2C_Void_I2CSendSlaveAddressWrite>
	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
    377e:	8b 81       	ldd	r24, Y+3	; 0x03
    3780:	0e 94 96 08 	call	0x112c	; 0x112c <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CRepeatedStart();
    3784:	0e 94 24 08 	call	0x1048	; 0x1048 <M_I2C_Void_I2CRepeatedStart>
	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	80 65       	ori	r24, 0x50	; 80
    378c:	0e 94 48 08 	call	0x1090	; 0x1090 <M_I2C_Void_I2CSendSlaveAddressWrite>
	Local_U8_Reading = M_I2C_Void_I2CReadByte();
    3790:	0e 94 ba 08 	call	0x1174	; 0x1174 <M_I2C_Void_I2CReadByte>
    3794:	89 83       	std	Y+1, r24	; 0x01
	M_I2C_Void_I2CStopCondition();
    3796:	0e 94 16 08 	call	0x102c	; 0x102c <M_I2C_Void_I2CStopCondition>
    return Local_U8_Reading;
    379a:	89 81       	ldd	r24, Y+1	; 0x01
}
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <A_LEDProject>:
 */

#include "Projects.h"

void A_LEDProject(void)
{
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	2e 97       	sbiw	r28, 0x0e	; 14
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    H_LED_Void_LedInit(LED2);
    37bc:	82 e0       	ldi	r24, 0x02	; 2
    37be:	0e 94 a8 13 	call	0x2750	; 0x2750 <H_LED_Void_LedInit>
	H_LED_Void_LedSetOn(LED2);
    37c2:	82 e0       	ldi	r24, 0x02	; 2
    37c4:	0e 94 d6 13 	call	0x27ac	; 0x27ac <H_LED_Void_LedSetOn>
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	aa ef       	ldi	r26, 0xFA	; 250
    37ce:	b4 e4       	ldi	r27, 0x44	; 68
    37d0:	8b 87       	std	Y+11, r24	; 0x0b
    37d2:	9c 87       	std	Y+12, r25	; 0x0c
    37d4:	ad 87       	std	Y+13, r26	; 0x0d
    37d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    37da:	7c 85       	ldd	r23, Y+12	; 0x0c
    37dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    37de:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	4a e7       	ldi	r20, 0x7A	; 122
    37e6:	55 e4       	ldi	r21, 0x45	; 69
    37e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	8f 83       	std	Y+7, r24	; 0x07
    37f2:	98 87       	std	Y+8, r25	; 0x08
    37f4:	a9 87       	std	Y+9, r26	; 0x09
    37f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37f8:	6f 81       	ldd	r22, Y+7	; 0x07
    37fa:	78 85       	ldd	r23, Y+8	; 0x08
    37fc:	89 85       	ldd	r24, Y+9	; 0x09
    37fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	40 e8       	ldi	r20, 0x80	; 128
    3806:	5f e3       	ldi	r21, 0x3F	; 63
    3808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    380c:	88 23       	and	r24, r24
    380e:	2c f4       	brge	.+10     	; 0x381a <A_LEDProject+0x72>
		__ticks = 1;
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	9e 83       	std	Y+6, r25	; 0x06
    3816:	8d 83       	std	Y+5, r24	; 0x05
    3818:	3f c0       	rjmp	.+126    	; 0x3898 <A_LEDProject+0xf0>
	else if (__tmp > 65535)
    381a:	6f 81       	ldd	r22, Y+7	; 0x07
    381c:	78 85       	ldd	r23, Y+8	; 0x08
    381e:	89 85       	ldd	r24, Y+9	; 0x09
    3820:	9a 85       	ldd	r25, Y+10	; 0x0a
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	3f ef       	ldi	r19, 0xFF	; 255
    3826:	4f e7       	ldi	r20, 0x7F	; 127
    3828:	57 e4       	ldi	r21, 0x47	; 71
    382a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    382e:	18 16       	cp	r1, r24
    3830:	4c f5       	brge	.+82     	; 0x3884 <A_LEDProject+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3832:	6b 85       	ldd	r22, Y+11	; 0x0b
    3834:	7c 85       	ldd	r23, Y+12	; 0x0c
    3836:	8d 85       	ldd	r24, Y+13	; 0x0d
    3838:	9e 85       	ldd	r25, Y+14	; 0x0e
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	40 e2       	ldi	r20, 0x20	; 32
    3840:	51 e4       	ldi	r21, 0x41	; 65
    3842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	bc 01       	movw	r22, r24
    384c:	cd 01       	movw	r24, r26
    384e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	9e 83       	std	Y+6, r25	; 0x06
    3858:	8d 83       	std	Y+5, r24	; 0x05
    385a:	0f c0       	rjmp	.+30     	; 0x387a <A_LEDProject+0xd2>
    385c:	80 e9       	ldi	r24, 0x90	; 144
    385e:	91 e0       	ldi	r25, 0x01	; 1
    3860:	9c 83       	std	Y+4, r25	; 0x04
    3862:	8b 83       	std	Y+3, r24	; 0x03
    3864:	8b 81       	ldd	r24, Y+3	; 0x03
    3866:	9c 81       	ldd	r25, Y+4	; 0x04
    3868:	01 97       	sbiw	r24, 0x01	; 1
    386a:	f1 f7       	brne	.-4      	; 0x3868 <A_LEDProject+0xc0>
    386c:	9c 83       	std	Y+4, r25	; 0x04
    386e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3870:	8d 81       	ldd	r24, Y+5	; 0x05
    3872:	9e 81       	ldd	r25, Y+6	; 0x06
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	9e 83       	std	Y+6, r25	; 0x06
    3878:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387a:	8d 81       	ldd	r24, Y+5	; 0x05
    387c:	9e 81       	ldd	r25, Y+6	; 0x06
    387e:	00 97       	sbiw	r24, 0x00	; 0
    3880:	69 f7       	brne	.-38     	; 0x385c <A_LEDProject+0xb4>
    3882:	14 c0       	rjmp	.+40     	; 0x38ac <A_LEDProject+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3884:	6f 81       	ldd	r22, Y+7	; 0x07
    3886:	78 85       	ldd	r23, Y+8	; 0x08
    3888:	89 85       	ldd	r24, Y+9	; 0x09
    388a:	9a 85       	ldd	r25, Y+10	; 0x0a
    388c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3890:	dc 01       	movw	r26, r24
    3892:	cb 01       	movw	r24, r22
    3894:	9e 83       	std	Y+6, r25	; 0x06
    3896:	8d 83       	std	Y+5, r24	; 0x05
    3898:	8d 81       	ldd	r24, Y+5	; 0x05
    389a:	9e 81       	ldd	r25, Y+6	; 0x06
    389c:	9a 83       	std	Y+2, r25	; 0x02
    389e:	89 83       	std	Y+1, r24	; 0x01
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	9a 81       	ldd	r25, Y+2	; 0x02
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <A_LEDProject+0xfc>
    38a8:	9a 83       	std	Y+2, r25	; 0x02
    38aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);              //we use this function instead of for(i=0;i<1000000;i++);
	H_LED_Void_LedSetOff(LED2);
    38ac:	82 e0       	ldi	r24, 0x02	; 2
    38ae:	0e 94 04 14 	call	0x2808	; 0x2808 <H_LED_Void_LedSetOff>
}
    38b2:	2e 96       	adiw	r28, 0x0e	; 14
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	de bf       	out	0x3e, r29	; 62
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	cd bf       	out	0x3d, r28	; 61
    38be:	cf 91       	pop	r28
    38c0:	df 91       	pop	r29
    38c2:	08 95       	ret

000038c4 <A_BuzzerProject>:

void A_BuzzerProject(void)
{
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
    38cc:	2e 97       	sbiw	r28, 0x0e	; 14
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
    H_Buzzer_Void_BuzzerInit();
    38d8:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <H_Buzzer_Void_BuzzerInit>
	H_Buzzer_Void_BuzzerSetOn();
    38dc:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <H_Buzzer_Void_BuzzerSetOn>
    38e0:	80 e0       	ldi	r24, 0x00	; 0
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	aa e7       	ldi	r26, 0x7A	; 122
    38e6:	b4 e4       	ldi	r27, 0x44	; 68
    38e8:	8b 87       	std	Y+11, r24	; 0x0b
    38ea:	9c 87       	std	Y+12, r25	; 0x0c
    38ec:	ad 87       	std	Y+13, r26	; 0x0d
    38ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	4a e7       	ldi	r20, 0x7A	; 122
    38fe:	55 e4       	ldi	r21, 0x45	; 69
    3900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	8f 83       	std	Y+7, r24	; 0x07
    390a:	98 87       	std	Y+8, r25	; 0x08
    390c:	a9 87       	std	Y+9, r26	; 0x09
    390e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3910:	6f 81       	ldd	r22, Y+7	; 0x07
    3912:	78 85       	ldd	r23, Y+8	; 0x08
    3914:	89 85       	ldd	r24, Y+9	; 0x09
    3916:	9a 85       	ldd	r25, Y+10	; 0x0a
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	40 e8       	ldi	r20, 0x80	; 128
    391e:	5f e3       	ldi	r21, 0x3F	; 63
    3920:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3924:	88 23       	and	r24, r24
    3926:	2c f4       	brge	.+10     	; 0x3932 <A_BuzzerProject+0x6e>
		__ticks = 1;
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	9e 83       	std	Y+6, r25	; 0x06
    392e:	8d 83       	std	Y+5, r24	; 0x05
    3930:	3f c0       	rjmp	.+126    	; 0x39b0 <A_BuzzerProject+0xec>
	else if (__tmp > 65535)
    3932:	6f 81       	ldd	r22, Y+7	; 0x07
    3934:	78 85       	ldd	r23, Y+8	; 0x08
    3936:	89 85       	ldd	r24, Y+9	; 0x09
    3938:	9a 85       	ldd	r25, Y+10	; 0x0a
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	3f ef       	ldi	r19, 0xFF	; 255
    393e:	4f e7       	ldi	r20, 0x7F	; 127
    3940:	57 e4       	ldi	r21, 0x47	; 71
    3942:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3946:	18 16       	cp	r1, r24
    3948:	4c f5       	brge	.+82     	; 0x399c <A_BuzzerProject+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    394a:	6b 85       	ldd	r22, Y+11	; 0x0b
    394c:	7c 85       	ldd	r23, Y+12	; 0x0c
    394e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3950:	9e 85       	ldd	r25, Y+14	; 0x0e
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	40 e2       	ldi	r20, 0x20	; 32
    3958:	51 e4       	ldi	r21, 0x41	; 65
    395a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	bc 01       	movw	r22, r24
    3964:	cd 01       	movw	r24, r26
    3966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	9e 83       	std	Y+6, r25	; 0x06
    3970:	8d 83       	std	Y+5, r24	; 0x05
    3972:	0f c0       	rjmp	.+30     	; 0x3992 <A_BuzzerProject+0xce>
    3974:	80 e9       	ldi	r24, 0x90	; 144
    3976:	91 e0       	ldi	r25, 0x01	; 1
    3978:	9c 83       	std	Y+4, r25	; 0x04
    397a:	8b 83       	std	Y+3, r24	; 0x03
    397c:	8b 81       	ldd	r24, Y+3	; 0x03
    397e:	9c 81       	ldd	r25, Y+4	; 0x04
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	f1 f7       	brne	.-4      	; 0x3980 <A_BuzzerProject+0xbc>
    3984:	9c 83       	std	Y+4, r25	; 0x04
    3986:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3988:	8d 81       	ldd	r24, Y+5	; 0x05
    398a:	9e 81       	ldd	r25, Y+6	; 0x06
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	9e 83       	std	Y+6, r25	; 0x06
    3990:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3992:	8d 81       	ldd	r24, Y+5	; 0x05
    3994:	9e 81       	ldd	r25, Y+6	; 0x06
    3996:	00 97       	sbiw	r24, 0x00	; 0
    3998:	69 f7       	brne	.-38     	; 0x3974 <A_BuzzerProject+0xb0>
    399a:	14 c0       	rjmp	.+40     	; 0x39c4 <A_BuzzerProject+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    399c:	6f 81       	ldd	r22, Y+7	; 0x07
    399e:	78 85       	ldd	r23, Y+8	; 0x08
    39a0:	89 85       	ldd	r24, Y+9	; 0x09
    39a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	9e 83       	std	Y+6, r25	; 0x06
    39ae:	8d 83       	std	Y+5, r24	; 0x05
    39b0:	8d 81       	ldd	r24, Y+5	; 0x05
    39b2:	9e 81       	ldd	r25, Y+6	; 0x06
    39b4:	9a 83       	std	Y+2, r25	; 0x02
    39b6:	89 83       	std	Y+1, r24	; 0x01
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	9a 81       	ldd	r25, Y+2	; 0x02
    39bc:	01 97       	sbiw	r24, 0x01	; 1
    39be:	f1 f7       	brne	.-4      	; 0x39bc <A_BuzzerProject+0xf8>
    39c0:	9a 83       	std	Y+2, r25	; 0x02
    39c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	H_Buzzer_Void_BuzzerSetOff();
    39c4:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <H_Buzzer_Void_BuzzerSetOff>
}
    39c8:	2e 96       	adiw	r28, 0x0e	; 14
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	cf 91       	pop	r28
    39d6:	df 91       	pop	r29
    39d8:	08 95       	ret

000039da <A_PBProject>:

void A_PBProject(void)
{
    39da:	df 93       	push	r29
    39dc:	cf 93       	push	r28
    39de:	cd b7       	in	r28, 0x3d	; 61
    39e0:	de b7       	in	r29, 0x3e	; 62
H_PB_Void_PBInit(PB0);
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	0e 94 8b 11 	call	0x2316	; 0x2316 <H_PB_Void_PBInit>
	H_Buzzer_Void_BuzzerInit();
    39e8:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <H_Buzzer_Void_BuzzerInit>
    39ec:	02 c0       	rjmp	.+4      	; 0x39f2 <A_PBProject+0x18>
	while(1)
	{
		while(H_PB_U8_PBRead(PB0) == PRESSED)
			H_Buzzer_Void_BuzzerSetOn();
    39ee:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <H_Buzzer_Void_BuzzerSetOn>
{
H_PB_Void_PBInit(PB0);
	H_Buzzer_Void_BuzzerInit();
	while(1)
	{
		while(H_PB_U8_PBRead(PB0) == PRESSED)
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	0e 94 b9 11 	call	0x2372	; 0x2372 <H_PB_U8_PBRead>
    39f8:	81 30       	cpi	r24, 0x01	; 1
    39fa:	c9 f3       	breq	.-14     	; 0x39ee <A_PBProject+0x14>
			H_Buzzer_Void_BuzzerSetOn();
		H_Buzzer_Void_BuzzerSetOff();
    39fc:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <H_Buzzer_Void_BuzzerSetOff>
    3a00:	f8 cf       	rjmp	.-16     	; 0x39f2 <A_PBProject+0x18>

00003a02 <A_SSDProject>:
    }
}

void A_SSDProject(void)
{
    3a02:	df 93       	push	r29
    3a04:	cf 93       	push	r28
    3a06:	cd b7       	in	r28, 0x3d	; 61
    3a08:	de b7       	in	r29, 0x3e	; 62
    3a0a:	60 97       	sbiw	r28, 0x10	; 16
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	de bf       	out	0x3e, r29	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	cd bf       	out	0x3d, r28	; 61
	H_SSD_Void_SSDInit();
    3a16:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <H_SSD_Void_SSDInit>
		int x = 0;
    3a1a:	18 8a       	std	Y+16, r1	; 0x10
    3a1c:	1f 86       	std	Y+15, r1	; 0x0f
		while(1)
		{
		H_SSD_Void_SSDWriteNumber(x);
    3a1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a20:	0e 94 53 10 	call	0x20a6	; 0x20a6 <H_SSD_Void_SSDWriteNumber>
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	aa e7       	ldi	r26, 0x7A	; 122
    3a2a:	b4 e4       	ldi	r27, 0x44	; 68
    3a2c:	8b 87       	std	Y+11, r24	; 0x0b
    3a2e:	9c 87       	std	Y+12, r25	; 0x0c
    3a30:	ad 87       	std	Y+13, r26	; 0x0d
    3a32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	4a e7       	ldi	r20, 0x7A	; 122
    3a42:	55 e4       	ldi	r21, 0x45	; 69
    3a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a48:	dc 01       	movw	r26, r24
    3a4a:	cb 01       	movw	r24, r22
    3a4c:	8f 83       	std	Y+7, r24	; 0x07
    3a4e:	98 87       	std	Y+8, r25	; 0x08
    3a50:	a9 87       	std	Y+9, r26	; 0x09
    3a52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a54:	6f 81       	ldd	r22, Y+7	; 0x07
    3a56:	78 85       	ldd	r23, Y+8	; 0x08
    3a58:	89 85       	ldd	r24, Y+9	; 0x09
    3a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e8       	ldi	r20, 0x80	; 128
    3a62:	5f e3       	ldi	r21, 0x3F	; 63
    3a64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a68:	88 23       	and	r24, r24
    3a6a:	2c f4       	brge	.+10     	; 0x3a76 <A_SSDProject+0x74>
		__ticks = 1;
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	9e 83       	std	Y+6, r25	; 0x06
    3a72:	8d 83       	std	Y+5, r24	; 0x05
    3a74:	3f c0       	rjmp	.+126    	; 0x3af4 <A_SSDProject+0xf2>
	else if (__tmp > 65535)
    3a76:	6f 81       	ldd	r22, Y+7	; 0x07
    3a78:	78 85       	ldd	r23, Y+8	; 0x08
    3a7a:	89 85       	ldd	r24, Y+9	; 0x09
    3a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	3f ef       	ldi	r19, 0xFF	; 255
    3a82:	4f e7       	ldi	r20, 0x7F	; 127
    3a84:	57 e4       	ldi	r21, 0x47	; 71
    3a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a8a:	18 16       	cp	r1, r24
    3a8c:	4c f5       	brge	.+82     	; 0x3ae0 <A_SSDProject+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	40 e2       	ldi	r20, 0x20	; 32
    3a9c:	51 e4       	ldi	r21, 0x41	; 65
    3a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	bc 01       	movw	r22, r24
    3aa8:	cd 01       	movw	r24, r26
    3aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aae:	dc 01       	movw	r26, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	9e 83       	std	Y+6, r25	; 0x06
    3ab4:	8d 83       	std	Y+5, r24	; 0x05
    3ab6:	0f c0       	rjmp	.+30     	; 0x3ad6 <A_SSDProject+0xd4>
    3ab8:	80 e9       	ldi	r24, 0x90	; 144
    3aba:	91 e0       	ldi	r25, 0x01	; 1
    3abc:	9c 83       	std	Y+4, r25	; 0x04
    3abe:	8b 83       	std	Y+3, r24	; 0x03
    3ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac4:	01 97       	sbiw	r24, 0x01	; 1
    3ac6:	f1 f7       	brne	.-4      	; 0x3ac4 <A_SSDProject+0xc2>
    3ac8:	9c 83       	std	Y+4, r25	; 0x04
    3aca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3acc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ace:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	9e 83       	std	Y+6, r25	; 0x06
    3ad4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    3ada:	00 97       	sbiw	r24, 0x00	; 0
    3adc:	69 f7       	brne	.-38     	; 0x3ab8 <A_SSDProject+0xb6>
    3ade:	14 c0       	rjmp	.+40     	; 0x3b08 <A_SSDProject+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae2:	78 85       	ldd	r23, Y+8	; 0x08
    3ae4:	89 85       	ldd	r24, Y+9	; 0x09
    3ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	9e 83       	std	Y+6, r25	; 0x06
    3af2:	8d 83       	std	Y+5, r24	; 0x05
    3af4:	8d 81       	ldd	r24, Y+5	; 0x05
    3af6:	9e 81       	ldd	r25, Y+6	; 0x06
    3af8:	9a 83       	std	Y+2, r25	; 0x02
    3afa:	89 83       	std	Y+1, r24	; 0x01
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
    3afe:	9a 81       	ldd	r25, Y+2	; 0x02
    3b00:	01 97       	sbiw	r24, 0x01	; 1
    3b02:	f1 f7       	brne	.-4      	; 0x3b00 <A_SSDProject+0xfe>
    3b04:	9a 83       	std	Y+2, r25	; 0x02
    3b06:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		x++;
    3b08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b0a:	98 89       	ldd	r25, Y+16	; 0x10
    3b0c:	01 96       	adiw	r24, 0x01	; 1
    3b0e:	98 8b       	std	Y+16, r25	; 0x10
    3b10:	8f 87       	std	Y+15, r24	; 0x0f
    3b12:	85 cf       	rjmp	.-246    	; 0x3a1e <A_SSDProject+0x1c>

00003b14 <A_LCDProject>:
		}
}

void A_LCDProject(void)
{
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	60 97       	sbiw	r28, 0x10	; 16
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	de bf       	out	0x3e, r29	; 62
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDInit();
    3b28:	0e 94 5d 14 	call	0x28ba	; 0x28ba <H_LCD_Void_LCDInit>

    while(1)
    {
    	u8 i = 0;
    3b2c:	18 8a       	std	Y+16, r1	; 0x10
		u8 k = 0;
    3b2e:	1f 86       	std	Y+15, r1	; 0x0f
		for (i=0;i<16;i++)
    3b30:	18 8a       	std	Y+16, r1	; 0x10
    3b32:	83 c0       	rjmp	.+262    	; 0x3c3a <A_LCDProject+0x126>
		{
			H_LCD_Void_LCDClear();
    3b34:	0e 94 50 19 	call	0x32a0	; 0x32a0 <H_LCD_Void_LCDClear>
			for (k=0;k<i;k++)
    3b38:	1f 86       	std	Y+15, r1	; 0x0f
    3b3a:	06 c0       	rjmp	.+12     	; 0x3b48 <A_LCDProject+0x34>
			{
				H_LCD_Void_LCDWriteCharacter(' ');
    3b3c:	80 e2       	ldi	r24, 0x20	; 32
    3b3e:	0e 94 96 14 	call	0x292c	; 0x292c <H_LCD_Void_LCDWriteCharacter>
    	u8 i = 0;
		u8 k = 0;
		for (i=0;i<16;i++)
		{
			H_LCD_Void_LCDClear();
			for (k=0;k<i;k++)
    3b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b44:	8f 5f       	subi	r24, 0xFF	; 255
    3b46:	8f 87       	std	Y+15, r24	; 0x0f
    3b48:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b4a:	88 89       	ldd	r24, Y+16	; 0x10
    3b4c:	98 17       	cp	r25, r24
    3b4e:	b0 f3       	brcs	.-20     	; 0x3b3c <A_LCDProject+0x28>
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	aa ef       	ldi	r26, 0xFA	; 250
    3b56:	b3 e4       	ldi	r27, 0x43	; 67
    3b58:	8b 87       	std	Y+11, r24	; 0x0b
    3b5a:	9c 87       	std	Y+12, r25	; 0x0c
    3b5c:	ad 87       	std	Y+13, r26	; 0x0d
    3b5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	4a e7       	ldi	r20, 0x7A	; 122
    3b6e:	55 e4       	ldi	r21, 0x45	; 69
    3b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	8f 83       	std	Y+7, r24	; 0x07
    3b7a:	98 87       	std	Y+8, r25	; 0x08
    3b7c:	a9 87       	std	Y+9, r26	; 0x09
    3b7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b80:	6f 81       	ldd	r22, Y+7	; 0x07
    3b82:	78 85       	ldd	r23, Y+8	; 0x08
    3b84:	89 85       	ldd	r24, Y+9	; 0x09
    3b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e8       	ldi	r20, 0x80	; 128
    3b8e:	5f e3       	ldi	r21, 0x3F	; 63
    3b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b94:	88 23       	and	r24, r24
    3b96:	2c f4       	brge	.+10     	; 0x3ba2 <A_LCDProject+0x8e>
		__ticks = 1;
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	9e 83       	std	Y+6, r25	; 0x06
    3b9e:	8d 83       	std	Y+5, r24	; 0x05
    3ba0:	3f c0       	rjmp	.+126    	; 0x3c20 <A_LCDProject+0x10c>
	else if (__tmp > 65535)
    3ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba4:	78 85       	ldd	r23, Y+8	; 0x08
    3ba6:	89 85       	ldd	r24, Y+9	; 0x09
    3ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	3f ef       	ldi	r19, 0xFF	; 255
    3bae:	4f e7       	ldi	r20, 0x7F	; 127
    3bb0:	57 e4       	ldi	r21, 0x47	; 71
    3bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bb6:	18 16       	cp	r1, r24
    3bb8:	4c f5       	brge	.+82     	; 0x3c0c <A_LCDProject+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	40 e2       	ldi	r20, 0x20	; 32
    3bc8:	51 e4       	ldi	r21, 0x41	; 65
    3bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	bc 01       	movw	r22, r24
    3bd4:	cd 01       	movw	r24, r26
    3bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	9e 83       	std	Y+6, r25	; 0x06
    3be0:	8d 83       	std	Y+5, r24	; 0x05
    3be2:	0f c0       	rjmp	.+30     	; 0x3c02 <A_LCDProject+0xee>
    3be4:	80 e9       	ldi	r24, 0x90	; 144
    3be6:	91 e0       	ldi	r25, 0x01	; 1
    3be8:	9c 83       	std	Y+4, r25	; 0x04
    3bea:	8b 83       	std	Y+3, r24	; 0x03
    3bec:	8b 81       	ldd	r24, Y+3	; 0x03
    3bee:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf0:	01 97       	sbiw	r24, 0x01	; 1
    3bf2:	f1 f7       	brne	.-4      	; 0x3bf0 <A_LCDProject+0xdc>
    3bf4:	9c 83       	std	Y+4, r25	; 0x04
    3bf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
    3bfe:	9e 83       	std	Y+6, r25	; 0x06
    3c00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c02:	8d 81       	ldd	r24, Y+5	; 0x05
    3c04:	9e 81       	ldd	r25, Y+6	; 0x06
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	69 f7       	brne	.-38     	; 0x3be4 <A_LCDProject+0xd0>
    3c0a:	14 c0       	rjmp	.+40     	; 0x3c34 <A_LCDProject+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c0e:	78 85       	ldd	r23, Y+8	; 0x08
    3c10:	89 85       	ldd	r24, Y+9	; 0x09
    3c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	9e 83       	std	Y+6, r25	; 0x06
    3c1e:	8d 83       	std	Y+5, r24	; 0x05
    3c20:	8d 81       	ldd	r24, Y+5	; 0x05
    3c22:	9e 81       	ldd	r25, Y+6	; 0x06
    3c24:	9a 83       	std	Y+2, r25	; 0x02
    3c26:	89 83       	std	Y+1, r24	; 0x01
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	f1 f7       	brne	.-4      	; 0x3c2c <A_LCDProject+0x118>
    3c30:	9a 83       	std	Y+2, r25	; 0x02
    3c32:	89 83       	std	Y+1, r24	; 0x01

    while(1)
    {
    	u8 i = 0;
		u8 k = 0;
		for (i=0;i<16;i++)
    3c34:	88 89       	ldd	r24, Y+16	; 0x10
    3c36:	8f 5f       	subi	r24, 0xFF	; 255
    3c38:	88 8b       	std	Y+16, r24	; 0x10
    3c3a:	88 89       	ldd	r24, Y+16	; 0x10
    3c3c:	80 31       	cpi	r24, 0x10	; 16
    3c3e:	08 f4       	brcc	.+2      	; 0x3c42 <A_LCDProject+0x12e>
    3c40:	79 cf       	rjmp	.-270    	; 0x3b34 <A_LCDProject+0x20>
    3c42:	74 cf       	rjmp	.-280    	; 0x3b2c <A_LCDProject+0x18>

00003c44 <A_EXT_INT_Project>:
    }

}

void A_EXT_INT_Project(void)
{
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62

}
    3c4c:	cf 91       	pop	r28
    3c4e:	df 91       	pop	r29
    3c50:	08 95       	ret

00003c52 <A_KeypadProject>:

void A_KeypadProject(void)
{
    3c52:	df 93       	push	r29
    3c54:	cf 93       	push	r28
    3c56:	00 d0       	rcall	.+0      	; 0x3c58 <A_KeypadProject+0x6>
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62

	H_LCD_Void_LCDInit();
    3c5c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <H_LCD_Void_LCDInit>
	H_Keypad_Void_KeypadInit();
    3c60:	0e 94 86 19 	call	0x330c	; 0x330c <H_Keypad_Void_KeypadInit>
	int x=0;
    3c64:	1a 82       	std	Y+2, r1	; 0x02
    3c66:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		x=H_Keypad_U8_KeypadRead();
    3c68:	0e 94 cd 19 	call	0x339a	; 0x339a <H_Keypad_U8_KeypadRead>
    3c6c:	88 2f       	mov	r24, r24
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	9a 83       	std	Y+2, r25	; 0x02
    3c72:	89 83       	std	Y+1, r24	; 0x01
		if (x != 0)
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
    3c76:	9a 81       	ldd	r25, Y+2	; 0x02
    3c78:	00 97       	sbiw	r24, 0x00	; 0
    3c7a:	b1 f3       	breq	.-20     	; 0x3c68 <A_KeypadProject+0x16>
			H_LCD_Void_LCDWriteCharacter(x);
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	0e 94 96 14 	call	0x292c	; 0x292c <H_LCD_Void_LCDWriteCharacter>
    3c82:	f2 cf       	rjmp	.-28     	; 0x3c68 <A_KeypadProject+0x16>

00003c84 <A_ADCProject>:
	}
}

void A_ADCProject(void)
{
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	2e 97       	sbiw	r28, 0x0e	; 14
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDInit();
    3c98:	0e 94 5d 14 	call	0x28ba	; 0x28ba <H_LCD_Void_LCDInit>
	H_LM35_Void_LM35Init();
    3c9c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <H_LM35_Void_LM35Init>
	while(1)
	{
		H_LCD_Void_LCDWriteNumber(H_LM35_U16_LM35Read());
    3ca0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <H_LM35_U16_LM35Read>
    3ca4:	cc 01       	movw	r24, r24
    3ca6:	a0 e0       	ldi	r26, 0x00	; 0
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
    3caa:	bc 01       	movw	r22, r24
    3cac:	cd 01       	movw	r24, r26
    3cae:	0e 94 af 18 	call	0x315e	; 0x315e <H_LCD_Void_LCDWriteNumber>
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	aa ef       	ldi	r26, 0xFA	; 250
    3cb8:	b3 e4       	ldi	r27, 0x43	; 67
    3cba:	8b 87       	std	Y+11, r24	; 0x0b
    3cbc:	9c 87       	std	Y+12, r25	; 0x0c
    3cbe:	ad 87       	std	Y+13, r26	; 0x0d
    3cc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	4a e7       	ldi	r20, 0x7A	; 122
    3cd0:	55 e4       	ldi	r21, 0x45	; 69
    3cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	8f 83       	std	Y+7, r24	; 0x07
    3cdc:	98 87       	std	Y+8, r25	; 0x08
    3cde:	a9 87       	std	Y+9, r26	; 0x09
    3ce0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce4:	78 85       	ldd	r23, Y+8	; 0x08
    3ce6:	89 85       	ldd	r24, Y+9	; 0x09
    3ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e8       	ldi	r20, 0x80	; 128
    3cf0:	5f e3       	ldi	r21, 0x3F	; 63
    3cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cf6:	88 23       	and	r24, r24
    3cf8:	2c f4       	brge	.+10     	; 0x3d04 <A_ADCProject+0x80>
		__ticks = 1;
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	9e 83       	std	Y+6, r25	; 0x06
    3d00:	8d 83       	std	Y+5, r24	; 0x05
    3d02:	3f c0       	rjmp	.+126    	; 0x3d82 <A_ADCProject+0xfe>
	else if (__tmp > 65535)
    3d04:	6f 81       	ldd	r22, Y+7	; 0x07
    3d06:	78 85       	ldd	r23, Y+8	; 0x08
    3d08:	89 85       	ldd	r24, Y+9	; 0x09
    3d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	3f ef       	ldi	r19, 0xFF	; 255
    3d10:	4f e7       	ldi	r20, 0x7F	; 127
    3d12:	57 e4       	ldi	r21, 0x47	; 71
    3d14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d18:	18 16       	cp	r1, r24
    3d1a:	4c f5       	brge	.+82     	; 0x3d6e <A_ADCProject+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	40 e2       	ldi	r20, 0x20	; 32
    3d2a:	51 e4       	ldi	r21, 0x41	; 65
    3d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	bc 01       	movw	r22, r24
    3d36:	cd 01       	movw	r24, r26
    3d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	9e 83       	std	Y+6, r25	; 0x06
    3d42:	8d 83       	std	Y+5, r24	; 0x05
    3d44:	0f c0       	rjmp	.+30     	; 0x3d64 <A_ADCProject+0xe0>
    3d46:	80 e9       	ldi	r24, 0x90	; 144
    3d48:	91 e0       	ldi	r25, 0x01	; 1
    3d4a:	9c 83       	std	Y+4, r25	; 0x04
    3d4c:	8b 83       	std	Y+3, r24	; 0x03
    3d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d50:	9c 81       	ldd	r25, Y+4	; 0x04
    3d52:	01 97       	sbiw	r24, 0x01	; 1
    3d54:	f1 f7       	brne	.-4      	; 0x3d52 <A_ADCProject+0xce>
    3d56:	9c 83       	std	Y+4, r25	; 0x04
    3d58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
    3d60:	9e 83       	std	Y+6, r25	; 0x06
    3d62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d64:	8d 81       	ldd	r24, Y+5	; 0x05
    3d66:	9e 81       	ldd	r25, Y+6	; 0x06
    3d68:	00 97       	sbiw	r24, 0x00	; 0
    3d6a:	69 f7       	brne	.-38     	; 0x3d46 <A_ADCProject+0xc2>
    3d6c:	14 c0       	rjmp	.+40     	; 0x3d96 <A_ADCProject+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d70:	78 85       	ldd	r23, Y+8	; 0x08
    3d72:	89 85       	ldd	r24, Y+9	; 0x09
    3d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	9e 83       	std	Y+6, r25	; 0x06
    3d80:	8d 83       	std	Y+5, r24	; 0x05
    3d82:	8d 81       	ldd	r24, Y+5	; 0x05
    3d84:	9e 81       	ldd	r25, Y+6	; 0x06
    3d86:	9a 83       	std	Y+2, r25	; 0x02
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	f1 f7       	brne	.-4      	; 0x3d8e <A_ADCProject+0x10a>
    3d92:	9a 83       	std	Y+2, r25	; 0x02
    3d94:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		H_LCD_Void_LCDClear();
    3d96:	0e 94 50 19 	call	0x32a0	; 0x32a0 <H_LCD_Void_LCDClear>
    3d9a:	82 cf       	rjmp	.-252    	; 0x3ca0 <A_ADCProject+0x1c>

00003d9c <A_Timer0Project>:
	}
}

void A_Timer0Project()
{
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
	H_LED_Void_LedInit(LED2);
    3da4:	82 e0       	ldi	r24, 0x02	; 2
    3da6:	0e 94 a8 13 	call	0x2750	; 0x2750 <H_LED_Void_LedInit>
	M_Timer_Void_TimerInit();
    3daa:	0e 94 51 06 	call	0xca2	; 0xca2 <M_Timer_Void_TimerInit>
    M_Timer_Void_TimerSetTime(200);
    3dae:	68 ec       	ldi	r22, 0xC8	; 200
    3db0:	70 e0       	ldi	r23, 0x00	; 0
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	0e 94 89 06 	call	0xd12	; 0xd12 <M_Timer_Void_TimerSetTime>
}
    3dba:	cf 91       	pop	r28
    3dbc:	df 91       	pop	r29
    3dbe:	08 95       	ret

00003dc0 <A_HC05Project>:

void A_HC05Project(void)
{
    3dc0:	0f 93       	push	r16
    3dc2:	1f 93       	push	r17
    3dc4:	df 93       	push	r29
    3dc6:	cf 93       	push	r28
    3dc8:	cd b7       	in	r28, 0x3d	; 61
    3dca:	de b7       	in	r29, 0x3e	; 62
    3dcc:	c9 56       	subi	r28, 0x69	; 105
    3dce:	d0 40       	sbci	r29, 0x00	; 0
    3dd0:	0f b6       	in	r0, 0x3f	; 63
    3dd2:	f8 94       	cli
    3dd4:	de bf       	out	0x3e, r29	; 62
    3dd6:	0f be       	out	0x3f, r0	; 63
    3dd8:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDInit();
    3dda:	0e 94 5d 14 	call	0x28ba	; 0x28ba <H_LCD_Void_LCDInit>
	H_LED_Void_LedInit(LED0);
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	0e 94 a8 13 	call	0x2750	; 0x2750 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(LED1);
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	0e 94 a8 13 	call	0x2750	; 0x2750 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(LED2);
    3dea:	82 e0       	ldi	r24, 0x02	; 2
    3dec:	0e 94 a8 13 	call	0x2750	; 0x2750 <H_LED_Void_LedInit>
	H_LED_Void_LedSetOff(LED0);
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	0e 94 04 14 	call	0x2808	; 0x2808 <H_LED_Void_LedSetOff>
	H_LED_Void_LedSetOff(LED1);
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	0e 94 04 14 	call	0x2808	; 0x2808 <H_LED_Void_LedSetOff>
	H_LED_Void_LedSetOff(LED2);
    3dfc:	82 e0       	ldi	r24, 0x02	; 2
    3dfe:	0e 94 04 14 	call	0x2808	; 0x2808 <H_LED_Void_LedSetOff>
	H_Buzzer_Void_BuzzerInit();
    3e02:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <H_Buzzer_Void_BuzzerInit>
	M_UART_Void_UARTInit();
    3e06:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_UART_Void_UARTInit>
	u8 x = 0;
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	e7 59       	subi	r30, 0x97	; 151
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	10 82       	st	Z, r1
	while (1)
	{
		x=H_HC05_U8_HC05Receive();
    3e12:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <H_HC05_U8_HC05Receive>
    3e16:	fe 01       	movw	r30, r28
    3e18:	e7 59       	subi	r30, 0x97	; 151
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	80 83       	st	Z, r24
		if (x != 0)
    3e1e:	fe 01       	movw	r30, r28
    3e20:	e7 59       	subi	r30, 0x97	; 151
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	80 81       	ld	r24, Z
    3e26:	88 23       	and	r24, r24
    3e28:	a1 f3       	breq	.-24     	; 0x3e12 <A_HC05Project+0x52>
		{
			if (x == 49)
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e7 59       	subi	r30, 0x97	; 151
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	80 81       	ld	r24, Z
    3e32:	81 33       	cpi	r24, 0x31	; 49
    3e34:	09 f0       	breq	.+2      	; 0x3e38 <A_HC05Project+0x78>
    3e36:	b9 c0       	rjmp	.+370    	; 0x3faa <A_HC05Project+0x1ea>
			{
		    	H_LED_Void_LedSetOn(LED0);
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <H_LED_Void_LedSetOn>
    3e3e:	fe 01       	movw	r30, r28
    3e40:	e1 5a       	subi	r30, 0xA1	; 161
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	aa ef       	ldi	r26, 0xFA	; 250
    3e4a:	b3 e4       	ldi	r27, 0x43	; 67
    3e4c:	80 83       	st	Z, r24
    3e4e:	91 83       	std	Z+1, r25	; 0x01
    3e50:	a2 83       	std	Z+2, r26	; 0x02
    3e52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e54:	8e 01       	movw	r16, r28
    3e56:	05 5a       	subi	r16, 0xA5	; 165
    3e58:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e1 5a       	subi	r30, 0xA1	; 161
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	60 81       	ld	r22, Z
    3e62:	71 81       	ldd	r23, Z+1	; 0x01
    3e64:	82 81       	ldd	r24, Z+2	; 0x02
    3e66:	93 81       	ldd	r25, Z+3	; 0x03
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	4a e7       	ldi	r20, 0x7A	; 122
    3e6e:	55 e4       	ldi	r21, 0x45	; 69
    3e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	f8 01       	movw	r30, r16
    3e7a:	80 83       	st	Z, r24
    3e7c:	91 83       	std	Z+1, r25	; 0x01
    3e7e:	a2 83       	std	Z+2, r26	; 0x02
    3e80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e82:	fe 01       	movw	r30, r28
    3e84:	e5 5a       	subi	r30, 0xA5	; 165
    3e86:	ff 4f       	sbci	r31, 0xFF	; 255
    3e88:	60 81       	ld	r22, Z
    3e8a:	71 81       	ldd	r23, Z+1	; 0x01
    3e8c:	82 81       	ldd	r24, Z+2	; 0x02
    3e8e:	93 81       	ldd	r25, Z+3	; 0x03
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	40 e8       	ldi	r20, 0x80	; 128
    3e96:	5f e3       	ldi	r21, 0x3F	; 63
    3e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e9c:	88 23       	and	r24, r24
    3e9e:	44 f4       	brge	.+16     	; 0x3eb0 <A_HC05Project+0xf0>
		__ticks = 1;
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e7 5a       	subi	r30, 0xA7	; 167
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	91 83       	std	Z+1, r25	; 0x01
    3eac:	80 83       	st	Z, r24
    3eae:	64 c0       	rjmp	.+200    	; 0x3f78 <A_HC05Project+0x1b8>
	else if (__tmp > 65535)
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	e5 5a       	subi	r30, 0xA5	; 165
    3eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb6:	60 81       	ld	r22, Z
    3eb8:	71 81       	ldd	r23, Z+1	; 0x01
    3eba:	82 81       	ldd	r24, Z+2	; 0x02
    3ebc:	93 81       	ldd	r25, Z+3	; 0x03
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	3f ef       	ldi	r19, 0xFF	; 255
    3ec2:	4f e7       	ldi	r20, 0x7F	; 127
    3ec4:	57 e4       	ldi	r21, 0x47	; 71
    3ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eca:	18 16       	cp	r1, r24
    3ecc:	0c f0       	brlt	.+2      	; 0x3ed0 <A_HC05Project+0x110>
    3ece:	43 c0       	rjmp	.+134    	; 0x3f56 <A_HC05Project+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	e1 5a       	subi	r30, 0xA1	; 161
    3ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed6:	60 81       	ld	r22, Z
    3ed8:	71 81       	ldd	r23, Z+1	; 0x01
    3eda:	82 81       	ldd	r24, Z+2	; 0x02
    3edc:	93 81       	ldd	r25, Z+3	; 0x03
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	40 e2       	ldi	r20, 0x20	; 32
    3ee4:	51 e4       	ldi	r21, 0x41	; 65
    3ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eea:	dc 01       	movw	r26, r24
    3eec:	cb 01       	movw	r24, r22
    3eee:	8e 01       	movw	r16, r28
    3ef0:	07 5a       	subi	r16, 0xA7	; 167
    3ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef4:	bc 01       	movw	r22, r24
    3ef6:	cd 01       	movw	r24, r26
    3ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	f8 01       	movw	r30, r16
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	80 83       	st	Z, r24
    3f06:	1f c0       	rjmp	.+62     	; 0x3f46 <A_HC05Project+0x186>
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e9 5a       	subi	r30, 0xA9	; 169
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	80 e9       	ldi	r24, 0x90	; 144
    3f10:	91 e0       	ldi	r25, 0x01	; 1
    3f12:	91 83       	std	Z+1, r25	; 0x01
    3f14:	80 83       	st	Z, r24
    3f16:	fe 01       	movw	r30, r28
    3f18:	e9 5a       	subi	r30, 0xA9	; 169
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	80 81       	ld	r24, Z
    3f1e:	91 81       	ldd	r25, Z+1	; 0x01
    3f20:	01 97       	sbiw	r24, 0x01	; 1
    3f22:	f1 f7       	brne	.-4      	; 0x3f20 <A_HC05Project+0x160>
    3f24:	fe 01       	movw	r30, r28
    3f26:	e9 5a       	subi	r30, 0xA9	; 169
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	91 83       	std	Z+1, r25	; 0x01
    3f2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f2e:	de 01       	movw	r26, r28
    3f30:	a7 5a       	subi	r26, 0xA7	; 167
    3f32:	bf 4f       	sbci	r27, 0xFF	; 255
    3f34:	fe 01       	movw	r30, r28
    3f36:	e7 5a       	subi	r30, 0xA7	; 167
    3f38:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3a:	80 81       	ld	r24, Z
    3f3c:	91 81       	ldd	r25, Z+1	; 0x01
    3f3e:	01 97       	sbiw	r24, 0x01	; 1
    3f40:	11 96       	adiw	r26, 0x01	; 1
    3f42:	9c 93       	st	X, r25
    3f44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f46:	fe 01       	movw	r30, r28
    3f48:	e7 5a       	subi	r30, 0xA7	; 167
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	80 81       	ld	r24, Z
    3f4e:	91 81       	ldd	r25, Z+1	; 0x01
    3f50:	00 97       	sbiw	r24, 0x00	; 0
    3f52:	d1 f6       	brne	.-76     	; 0x3f08 <A_HC05Project+0x148>
    3f54:	27 c0       	rjmp	.+78     	; 0x3fa4 <A_HC05Project+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f56:	8e 01       	movw	r16, r28
    3f58:	07 5a       	subi	r16, 0xA7	; 167
    3f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	e5 5a       	subi	r30, 0xA5	; 165
    3f60:	ff 4f       	sbci	r31, 0xFF	; 255
    3f62:	60 81       	ld	r22, Z
    3f64:	71 81       	ldd	r23, Z+1	; 0x01
    3f66:	82 81       	ldd	r24, Z+2	; 0x02
    3f68:	93 81       	ldd	r25, Z+3	; 0x03
    3f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f6e:	dc 01       	movw	r26, r24
    3f70:	cb 01       	movw	r24, r22
    3f72:	f8 01       	movw	r30, r16
    3f74:	91 83       	std	Z+1, r25	; 0x01
    3f76:	80 83       	st	Z, r24
    3f78:	de 01       	movw	r26, r28
    3f7a:	ab 5a       	subi	r26, 0xAB	; 171
    3f7c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f7e:	fe 01       	movw	r30, r28
    3f80:	e7 5a       	subi	r30, 0xA7	; 167
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	80 81       	ld	r24, Z
    3f86:	91 81       	ldd	r25, Z+1	; 0x01
    3f88:	8d 93       	st	X+, r24
    3f8a:	9c 93       	st	X, r25
    3f8c:	fe 01       	movw	r30, r28
    3f8e:	eb 5a       	subi	r30, 0xAB	; 171
    3f90:	ff 4f       	sbci	r31, 0xFF	; 255
    3f92:	80 81       	ld	r24, Z
    3f94:	91 81       	ldd	r25, Z+1	; 0x01
    3f96:	01 97       	sbiw	r24, 0x01	; 1
    3f98:	f1 f7       	brne	.-4      	; 0x3f96 <A_HC05Project+0x1d6>
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	eb 5a       	subi	r30, 0xAB	; 171
    3f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa0:	91 83       	std	Z+1, r25	; 0x01
    3fa2:	80 83       	st	Z, r24
	    		_delay_ms(500);
     			H_LED_Void_LedSetOff(LED0);
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
    3fa6:	0e 94 04 14 	call	0x2808	; 0x2808 <H_LED_Void_LedSetOff>
			}
			if (x == 50)
    3faa:	fe 01       	movw	r30, r28
    3fac:	e7 59       	subi	r30, 0x97	; 151
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	80 81       	ld	r24, Z
    3fb2:	82 33       	cpi	r24, 0x32	; 50
    3fb4:	09 f0       	breq	.+2      	; 0x3fb8 <A_HC05Project+0x1f8>
    3fb6:	b9 c0       	rjmp	.+370    	; 0x412a <A_HC05Project+0x36a>
			{
				H_LED_Void_LedSetOn(LED1);
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	0e 94 d6 13 	call	0x27ac	; 0x27ac <H_LED_Void_LedSetOn>
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	ef 5a       	subi	r30, 0xAF	; 175
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	aa ef       	ldi	r26, 0xFA	; 250
    3fca:	b3 e4       	ldi	r27, 0x43	; 67
    3fcc:	80 83       	st	Z, r24
    3fce:	91 83       	std	Z+1, r25	; 0x01
    3fd0:	a2 83       	std	Z+2, r26	; 0x02
    3fd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fd4:	8e 01       	movw	r16, r28
    3fd6:	03 5b       	subi	r16, 0xB3	; 179
    3fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fda:	fe 01       	movw	r30, r28
    3fdc:	ef 5a       	subi	r30, 0xAF	; 175
    3fde:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe0:	60 81       	ld	r22, Z
    3fe2:	71 81       	ldd	r23, Z+1	; 0x01
    3fe4:	82 81       	ldd	r24, Z+2	; 0x02
    3fe6:	93 81       	ldd	r25, Z+3	; 0x03
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	4a e7       	ldi	r20, 0x7A	; 122
    3fee:	55 e4       	ldi	r21, 0x45	; 69
    3ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	cb 01       	movw	r24, r22
    3ff8:	f8 01       	movw	r30, r16
    3ffa:	80 83       	st	Z, r24
    3ffc:	91 83       	std	Z+1, r25	; 0x01
    3ffe:	a2 83       	std	Z+2, r26	; 0x02
    4000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4002:	fe 01       	movw	r30, r28
    4004:	e3 5b       	subi	r30, 0xB3	; 179
    4006:	ff 4f       	sbci	r31, 0xFF	; 255
    4008:	60 81       	ld	r22, Z
    400a:	71 81       	ldd	r23, Z+1	; 0x01
    400c:	82 81       	ldd	r24, Z+2	; 0x02
    400e:	93 81       	ldd	r25, Z+3	; 0x03
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	40 e8       	ldi	r20, 0x80	; 128
    4016:	5f e3       	ldi	r21, 0x3F	; 63
    4018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    401c:	88 23       	and	r24, r24
    401e:	44 f4       	brge	.+16     	; 0x4030 <A_HC05Project+0x270>
		__ticks = 1;
    4020:	fe 01       	movw	r30, r28
    4022:	e5 5b       	subi	r30, 0xB5	; 181
    4024:	ff 4f       	sbci	r31, 0xFF	; 255
    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	80 83       	st	Z, r24
    402e:	64 c0       	rjmp	.+200    	; 0x40f8 <A_HC05Project+0x338>
	else if (__tmp > 65535)
    4030:	fe 01       	movw	r30, r28
    4032:	e3 5b       	subi	r30, 0xB3	; 179
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	60 81       	ld	r22, Z
    4038:	71 81       	ldd	r23, Z+1	; 0x01
    403a:	82 81       	ldd	r24, Z+2	; 0x02
    403c:	93 81       	ldd	r25, Z+3	; 0x03
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	3f ef       	ldi	r19, 0xFF	; 255
    4042:	4f e7       	ldi	r20, 0x7F	; 127
    4044:	57 e4       	ldi	r21, 0x47	; 71
    4046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    404a:	18 16       	cp	r1, r24
    404c:	0c f0       	brlt	.+2      	; 0x4050 <A_HC05Project+0x290>
    404e:	43 c0       	rjmp	.+134    	; 0x40d6 <A_HC05Project+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4050:	fe 01       	movw	r30, r28
    4052:	ef 5a       	subi	r30, 0xAF	; 175
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	60 81       	ld	r22, Z
    4058:	71 81       	ldd	r23, Z+1	; 0x01
    405a:	82 81       	ldd	r24, Z+2	; 0x02
    405c:	93 81       	ldd	r25, Z+3	; 0x03
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e2       	ldi	r20, 0x20	; 32
    4064:	51 e4       	ldi	r21, 0x41	; 65
    4066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	8e 01       	movw	r16, r28
    4070:	05 5b       	subi	r16, 0xB5	; 181
    4072:	1f 4f       	sbci	r17, 0xFF	; 255
    4074:	bc 01       	movw	r22, r24
    4076:	cd 01       	movw	r24, r26
    4078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	f8 01       	movw	r30, r16
    4082:	91 83       	std	Z+1, r25	; 0x01
    4084:	80 83       	st	Z, r24
    4086:	1f c0       	rjmp	.+62     	; 0x40c6 <A_HC05Project+0x306>
    4088:	fe 01       	movw	r30, r28
    408a:	e7 5b       	subi	r30, 0xB7	; 183
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	80 e9       	ldi	r24, 0x90	; 144
    4090:	91 e0       	ldi	r25, 0x01	; 1
    4092:	91 83       	std	Z+1, r25	; 0x01
    4094:	80 83       	st	Z, r24
    4096:	fe 01       	movw	r30, r28
    4098:	e7 5b       	subi	r30, 0xB7	; 183
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	80 81       	ld	r24, Z
    409e:	91 81       	ldd	r25, Z+1	; 0x01
    40a0:	01 97       	sbiw	r24, 0x01	; 1
    40a2:	f1 f7       	brne	.-4      	; 0x40a0 <A_HC05Project+0x2e0>
    40a4:	fe 01       	movw	r30, r28
    40a6:	e7 5b       	subi	r30, 0xB7	; 183
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	91 83       	std	Z+1, r25	; 0x01
    40ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ae:	de 01       	movw	r26, r28
    40b0:	a5 5b       	subi	r26, 0xB5	; 181
    40b2:	bf 4f       	sbci	r27, 0xFF	; 255
    40b4:	fe 01       	movw	r30, r28
    40b6:	e5 5b       	subi	r30, 0xB5	; 181
    40b8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ba:	80 81       	ld	r24, Z
    40bc:	91 81       	ldd	r25, Z+1	; 0x01
    40be:	01 97       	sbiw	r24, 0x01	; 1
    40c0:	11 96       	adiw	r26, 0x01	; 1
    40c2:	9c 93       	st	X, r25
    40c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c6:	fe 01       	movw	r30, r28
    40c8:	e5 5b       	subi	r30, 0xB5	; 181
    40ca:	ff 4f       	sbci	r31, 0xFF	; 255
    40cc:	80 81       	ld	r24, Z
    40ce:	91 81       	ldd	r25, Z+1	; 0x01
    40d0:	00 97       	sbiw	r24, 0x00	; 0
    40d2:	d1 f6       	brne	.-76     	; 0x4088 <A_HC05Project+0x2c8>
    40d4:	27 c0       	rjmp	.+78     	; 0x4124 <A_HC05Project+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d6:	8e 01       	movw	r16, r28
    40d8:	05 5b       	subi	r16, 0xB5	; 181
    40da:	1f 4f       	sbci	r17, 0xFF	; 255
    40dc:	fe 01       	movw	r30, r28
    40de:	e3 5b       	subi	r30, 0xB3	; 179
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	60 81       	ld	r22, Z
    40e4:	71 81       	ldd	r23, Z+1	; 0x01
    40e6:	82 81       	ldd	r24, Z+2	; 0x02
    40e8:	93 81       	ldd	r25, Z+3	; 0x03
    40ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	f8 01       	movw	r30, r16
    40f4:	91 83       	std	Z+1, r25	; 0x01
    40f6:	80 83       	st	Z, r24
    40f8:	de 01       	movw	r26, r28
    40fa:	a9 5b       	subi	r26, 0xB9	; 185
    40fc:	bf 4f       	sbci	r27, 0xFF	; 255
    40fe:	fe 01       	movw	r30, r28
    4100:	e5 5b       	subi	r30, 0xB5	; 181
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	80 81       	ld	r24, Z
    4106:	91 81       	ldd	r25, Z+1	; 0x01
    4108:	8d 93       	st	X+, r24
    410a:	9c 93       	st	X, r25
    410c:	fe 01       	movw	r30, r28
    410e:	e9 5b       	subi	r30, 0xB9	; 185
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	80 81       	ld	r24, Z
    4114:	91 81       	ldd	r25, Z+1	; 0x01
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	f1 f7       	brne	.-4      	; 0x4116 <A_HC05Project+0x356>
    411a:	fe 01       	movw	r30, r28
    411c:	e9 5b       	subi	r30, 0xB9	; 185
    411e:	ff 4f       	sbci	r31, 0xFF	; 255
    4120:	91 83       	std	Z+1, r25	; 0x01
    4122:	80 83       	st	Z, r24
				_delay_ms(500);
				H_LED_Void_LedSetOff(LED1);
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	0e 94 04 14 	call	0x2808	; 0x2808 <H_LED_Void_LedSetOff>
			}
			if (x == 51)
    412a:	fe 01       	movw	r30, r28
    412c:	e7 59       	subi	r30, 0x97	; 151
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	80 81       	ld	r24, Z
    4132:	83 33       	cpi	r24, 0x33	; 51
    4134:	09 f0       	breq	.+2      	; 0x4138 <A_HC05Project+0x378>
    4136:	8b c0       	rjmp	.+278    	; 0x424e <A_HC05Project+0x48e>
			{
				H_LED_Void_LedSetOn(LED2);
    4138:	82 e0       	ldi	r24, 0x02	; 2
    413a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <H_LED_Void_LedSetOn>
    413e:	fe 01       	movw	r30, r28
    4140:	ed 5b       	subi	r30, 0xBD	; 189
    4142:	ff 4f       	sbci	r31, 0xFF	; 255
    4144:	80 e0       	ldi	r24, 0x00	; 0
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	aa ef       	ldi	r26, 0xFA	; 250
    414a:	b3 e4       	ldi	r27, 0x43	; 67
    414c:	80 83       	st	Z, r24
    414e:	91 83       	std	Z+1, r25	; 0x01
    4150:	a2 83       	std	Z+2, r26	; 0x02
    4152:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4154:	8e 01       	movw	r16, r28
    4156:	01 5c       	subi	r16, 0xC1	; 193
    4158:	1f 4f       	sbci	r17, 0xFF	; 255
    415a:	fe 01       	movw	r30, r28
    415c:	ed 5b       	subi	r30, 0xBD	; 189
    415e:	ff 4f       	sbci	r31, 0xFF	; 255
    4160:	60 81       	ld	r22, Z
    4162:	71 81       	ldd	r23, Z+1	; 0x01
    4164:	82 81       	ldd	r24, Z+2	; 0x02
    4166:	93 81       	ldd	r25, Z+3	; 0x03
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	4a e7       	ldi	r20, 0x7A	; 122
    416e:	55 e4       	ldi	r21, 0x45	; 69
    4170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	f8 01       	movw	r30, r16
    417a:	80 83       	st	Z, r24
    417c:	91 83       	std	Z+1, r25	; 0x01
    417e:	a2 83       	std	Z+2, r26	; 0x02
    4180:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4182:	fe 01       	movw	r30, r28
    4184:	ff 96       	adiw	r30, 0x3f	; 63
    4186:	60 81       	ld	r22, Z
    4188:	71 81       	ldd	r23, Z+1	; 0x01
    418a:	82 81       	ldd	r24, Z+2	; 0x02
    418c:	93 81       	ldd	r25, Z+3	; 0x03
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e8       	ldi	r20, 0x80	; 128
    4194:	5f e3       	ldi	r21, 0x3F	; 63
    4196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    419a:	88 23       	and	r24, r24
    419c:	2c f4       	brge	.+10     	; 0x41a8 <A_HC05Project+0x3e8>
		__ticks = 1;
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	9e af       	std	Y+62, r25	; 0x3e
    41a4:	8d af       	std	Y+61, r24	; 0x3d
    41a6:	46 c0       	rjmp	.+140    	; 0x4234 <A_HC05Project+0x474>
	else if (__tmp > 65535)
    41a8:	fe 01       	movw	r30, r28
    41aa:	ff 96       	adiw	r30, 0x3f	; 63
    41ac:	60 81       	ld	r22, Z
    41ae:	71 81       	ldd	r23, Z+1	; 0x01
    41b0:	82 81       	ldd	r24, Z+2	; 0x02
    41b2:	93 81       	ldd	r25, Z+3	; 0x03
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	3f ef       	ldi	r19, 0xFF	; 255
    41b8:	4f e7       	ldi	r20, 0x7F	; 127
    41ba:	57 e4       	ldi	r21, 0x47	; 71
    41bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41c0:	18 16       	cp	r1, r24
    41c2:	64 f5       	brge	.+88     	; 0x421c <A_HC05Project+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c4:	fe 01       	movw	r30, r28
    41c6:	ed 5b       	subi	r30, 0xBD	; 189
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	60 81       	ld	r22, Z
    41cc:	71 81       	ldd	r23, Z+1	; 0x01
    41ce:	82 81       	ldd	r24, Z+2	; 0x02
    41d0:	93 81       	ldd	r25, Z+3	; 0x03
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	40 e2       	ldi	r20, 0x20	; 32
    41d8:	51 e4       	ldi	r21, 0x41	; 65
    41da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	bc 01       	movw	r22, r24
    41e4:	cd 01       	movw	r24, r26
    41e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	9e af       	std	Y+62, r25	; 0x3e
    41f0:	8d af       	std	Y+61, r24	; 0x3d
    41f2:	0f c0       	rjmp	.+30     	; 0x4212 <A_HC05Project+0x452>
    41f4:	80 e9       	ldi	r24, 0x90	; 144
    41f6:	91 e0       	ldi	r25, 0x01	; 1
    41f8:	9c af       	std	Y+60, r25	; 0x3c
    41fa:	8b af       	std	Y+59, r24	; 0x3b
    41fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    41fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	f1 f7       	brne	.-4      	; 0x4200 <A_HC05Project+0x440>
    4204:	9c af       	std	Y+60, r25	; 0x3c
    4206:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4208:	8d ad       	ldd	r24, Y+61	; 0x3d
    420a:	9e ad       	ldd	r25, Y+62	; 0x3e
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	9e af       	std	Y+62, r25	; 0x3e
    4210:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4212:	8d ad       	ldd	r24, Y+61	; 0x3d
    4214:	9e ad       	ldd	r25, Y+62	; 0x3e
    4216:	00 97       	sbiw	r24, 0x00	; 0
    4218:	69 f7       	brne	.-38     	; 0x41f4 <A_HC05Project+0x434>
    421a:	16 c0       	rjmp	.+44     	; 0x4248 <A_HC05Project+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    421c:	fe 01       	movw	r30, r28
    421e:	ff 96       	adiw	r30, 0x3f	; 63
    4220:	60 81       	ld	r22, Z
    4222:	71 81       	ldd	r23, Z+1	; 0x01
    4224:	82 81       	ldd	r24, Z+2	; 0x02
    4226:	93 81       	ldd	r25, Z+3	; 0x03
    4228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	9e af       	std	Y+62, r25	; 0x3e
    4232:	8d af       	std	Y+61, r24	; 0x3d
    4234:	8d ad       	ldd	r24, Y+61	; 0x3d
    4236:	9e ad       	ldd	r25, Y+62	; 0x3e
    4238:	9a af       	std	Y+58, r25	; 0x3a
    423a:	89 af       	std	Y+57, r24	; 0x39
    423c:	89 ad       	ldd	r24, Y+57	; 0x39
    423e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	f1 f7       	brne	.-4      	; 0x4240 <A_HC05Project+0x480>
    4244:	9a af       	std	Y+58, r25	; 0x3a
    4246:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				H_LED_Void_LedSetOff(LED2);
    4248:	82 e0       	ldi	r24, 0x02	; 2
    424a:	0e 94 04 14 	call	0x2808	; 0x2808 <H_LED_Void_LedSetOff>
			}
			if (x == 52)
    424e:	fe 01       	movw	r30, r28
    4250:	e7 59       	subi	r30, 0x97	; 151
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	80 81       	ld	r24, Z
    4256:	84 33       	cpi	r24, 0x34	; 52
    4258:	11 f4       	brne	.+4      	; 0x425e <A_HC05Project+0x49e>
				H_Buzzer_Void_BuzzerOnce();
    425a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <H_Buzzer_Void_BuzzerOnce>
			if (x == 53)
    425e:	fe 01       	movw	r30, r28
    4260:	e7 59       	subi	r30, 0x97	; 151
    4262:	ff 4f       	sbci	r31, 0xFF	; 255
    4264:	80 81       	ld	r24, Z
    4266:	85 33       	cpi	r24, 0x35	; 53
    4268:	21 f4       	brne	.+8      	; 0x4272 <A_HC05Project+0x4b2>
				H_LCD_Void_LCDWriteString("Hi");
    426a:	80 e6       	ldi	r24, 0x60	; 96
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <H_LCD_Void_LCDWriteString>
			if (x == 54)
    4272:	fe 01       	movw	r30, r28
    4274:	e7 59       	subi	r30, 0x97	; 151
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	80 81       	ld	r24, Z
    427a:	86 33       	cpi	r24, 0x36	; 54
    427c:	21 f4       	brne	.+8      	; 0x4286 <A_HC05Project+0x4c6>
				H_LCD_Void_LCDWriteString("BYE");
    427e:	83 e6       	ldi	r24, 0x63	; 99
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <H_LCD_Void_LCDWriteString>
			if (x == 55)
    4286:	fe 01       	movw	r30, r28
    4288:	e7 59       	subi	r30, 0x97	; 151
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	80 81       	ld	r24, Z
    428e:	87 33       	cpi	r24, 0x37	; 55
    4290:	11 f4       	brne	.+4      	; 0x4296 <A_HC05Project+0x4d6>
				H_LCD_Void_LCDClear();
    4292:	0e 94 50 19 	call	0x32a0	; 0x32a0 <H_LCD_Void_LCDClear>
			if (x == 56)
    4296:	fe 01       	movw	r30, r28
    4298:	e7 59       	subi	r30, 0x97	; 151
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	80 81       	ld	r24, Z
    429e:	88 33       	cpi	r24, 0x38	; 56
    42a0:	09 f0       	breq	.+2      	; 0x42a4 <A_HC05Project+0x4e4>
    42a2:	7a c1       	rjmp	.+756    	; 0x4598 <A_HC05Project+0x7d8>
			{
				for (int i = 0; i < 20; i++)
    42a4:	fe 01       	movw	r30, r28
    42a6:	e9 59       	subi	r30, 0x99	; 153
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	11 82       	std	Z+1, r1	; 0x01
    42ac:	10 82       	st	Z, r1
    42ae:	6b c1       	rjmp	.+726    	; 0x4586 <A_HC05Project+0x7c6>
				{
					H_LED_Void_LedTog(LED0);
    42b0:	80 e0       	ldi	r24, 0x00	; 0
    42b2:	0e 94 32 14 	call	0x2864	; 0x2864 <H_LED_Void_LedTog>
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	a8 e4       	ldi	r26, 0x48	; 72
    42bc:	b3 e4       	ldi	r27, 0x43	; 67
    42be:	8d ab       	std	Y+53, r24	; 0x35
    42c0:	9e ab       	std	Y+54, r25	; 0x36
    42c2:	af ab       	std	Y+55, r26	; 0x37
    42c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42c6:	6d a9       	ldd	r22, Y+53	; 0x35
    42c8:	7e a9       	ldd	r23, Y+54	; 0x36
    42ca:	8f a9       	ldd	r24, Y+55	; 0x37
    42cc:	98 ad       	ldd	r25, Y+56	; 0x38
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	4a e7       	ldi	r20, 0x7A	; 122
    42d4:	55 e4       	ldi	r21, 0x45	; 69
    42d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	89 ab       	std	Y+49, r24	; 0x31
    42e0:	9a ab       	std	Y+50, r25	; 0x32
    42e2:	ab ab       	std	Y+51, r26	; 0x33
    42e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    42e6:	69 a9       	ldd	r22, Y+49	; 0x31
    42e8:	7a a9       	ldd	r23, Y+50	; 0x32
    42ea:	8b a9       	ldd	r24, Y+51	; 0x33
    42ec:	9c a9       	ldd	r25, Y+52	; 0x34
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	40 e8       	ldi	r20, 0x80	; 128
    42f4:	5f e3       	ldi	r21, 0x3F	; 63
    42f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42fa:	88 23       	and	r24, r24
    42fc:	2c f4       	brge	.+10     	; 0x4308 <A_HC05Project+0x548>
		__ticks = 1;
    42fe:	81 e0       	ldi	r24, 0x01	; 1
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	98 ab       	std	Y+48, r25	; 0x30
    4304:	8f a7       	std	Y+47, r24	; 0x2f
    4306:	3f c0       	rjmp	.+126    	; 0x4386 <A_HC05Project+0x5c6>
	else if (__tmp > 65535)
    4308:	69 a9       	ldd	r22, Y+49	; 0x31
    430a:	7a a9       	ldd	r23, Y+50	; 0x32
    430c:	8b a9       	ldd	r24, Y+51	; 0x33
    430e:	9c a9       	ldd	r25, Y+52	; 0x34
    4310:	20 e0       	ldi	r18, 0x00	; 0
    4312:	3f ef       	ldi	r19, 0xFF	; 255
    4314:	4f e7       	ldi	r20, 0x7F	; 127
    4316:	57 e4       	ldi	r21, 0x47	; 71
    4318:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    431c:	18 16       	cp	r1, r24
    431e:	4c f5       	brge	.+82     	; 0x4372 <A_HC05Project+0x5b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4320:	6d a9       	ldd	r22, Y+53	; 0x35
    4322:	7e a9       	ldd	r23, Y+54	; 0x36
    4324:	8f a9       	ldd	r24, Y+55	; 0x37
    4326:	98 ad       	ldd	r25, Y+56	; 0x38
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	40 e2       	ldi	r20, 0x20	; 32
    432e:	51 e4       	ldi	r21, 0x41	; 65
    4330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4334:	dc 01       	movw	r26, r24
    4336:	cb 01       	movw	r24, r22
    4338:	bc 01       	movw	r22, r24
    433a:	cd 01       	movw	r24, r26
    433c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	98 ab       	std	Y+48, r25	; 0x30
    4346:	8f a7       	std	Y+47, r24	; 0x2f
    4348:	0f c0       	rjmp	.+30     	; 0x4368 <A_HC05Project+0x5a8>
    434a:	80 e9       	ldi	r24, 0x90	; 144
    434c:	91 e0       	ldi	r25, 0x01	; 1
    434e:	9e a7       	std	Y+46, r25	; 0x2e
    4350:	8d a7       	std	Y+45, r24	; 0x2d
    4352:	8d a5       	ldd	r24, Y+45	; 0x2d
    4354:	9e a5       	ldd	r25, Y+46	; 0x2e
    4356:	01 97       	sbiw	r24, 0x01	; 1
    4358:	f1 f7       	brne	.-4      	; 0x4356 <A_HC05Project+0x596>
    435a:	9e a7       	std	Y+46, r25	; 0x2e
    435c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    435e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4360:	98 a9       	ldd	r25, Y+48	; 0x30
    4362:	01 97       	sbiw	r24, 0x01	; 1
    4364:	98 ab       	std	Y+48, r25	; 0x30
    4366:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4368:	8f a5       	ldd	r24, Y+47	; 0x2f
    436a:	98 a9       	ldd	r25, Y+48	; 0x30
    436c:	00 97       	sbiw	r24, 0x00	; 0
    436e:	69 f7       	brne	.-38     	; 0x434a <A_HC05Project+0x58a>
    4370:	14 c0       	rjmp	.+40     	; 0x439a <A_HC05Project+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4372:	69 a9       	ldd	r22, Y+49	; 0x31
    4374:	7a a9       	ldd	r23, Y+50	; 0x32
    4376:	8b a9       	ldd	r24, Y+51	; 0x33
    4378:	9c a9       	ldd	r25, Y+52	; 0x34
    437a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437e:	dc 01       	movw	r26, r24
    4380:	cb 01       	movw	r24, r22
    4382:	98 ab       	std	Y+48, r25	; 0x30
    4384:	8f a7       	std	Y+47, r24	; 0x2f
    4386:	8f a5       	ldd	r24, Y+47	; 0x2f
    4388:	98 a9       	ldd	r25, Y+48	; 0x30
    438a:	9c a7       	std	Y+44, r25	; 0x2c
    438c:	8b a7       	std	Y+43, r24	; 0x2b
    438e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4390:	9c a5       	ldd	r25, Y+44	; 0x2c
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	f1 f7       	brne	.-4      	; 0x4392 <A_HC05Project+0x5d2>
    4396:	9c a7       	std	Y+44, r25	; 0x2c
    4398:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(200);
					H_LED_Void_LedTog(LED1);
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	0e 94 32 14 	call	0x2864	; 0x2864 <H_LED_Void_LedTog>
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	a8 e4       	ldi	r26, 0x48	; 72
    43a6:	b3 e4       	ldi	r27, 0x43	; 67
    43a8:	8f a3       	std	Y+39, r24	; 0x27
    43aa:	98 a7       	std	Y+40, r25	; 0x28
    43ac:	a9 a7       	std	Y+41, r26	; 0x29
    43ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b0:	6f a1       	ldd	r22, Y+39	; 0x27
    43b2:	78 a5       	ldd	r23, Y+40	; 0x28
    43b4:	89 a5       	ldd	r24, Y+41	; 0x29
    43b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	4a e7       	ldi	r20, 0x7A	; 122
    43be:	55 e4       	ldi	r21, 0x45	; 69
    43c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	8b a3       	std	Y+35, r24	; 0x23
    43ca:	9c a3       	std	Y+36, r25	; 0x24
    43cc:	ad a3       	std	Y+37, r26	; 0x25
    43ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43d0:	6b a1       	ldd	r22, Y+35	; 0x23
    43d2:	7c a1       	ldd	r23, Y+36	; 0x24
    43d4:	8d a1       	ldd	r24, Y+37	; 0x25
    43d6:	9e a1       	ldd	r25, Y+38	; 0x26
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	40 e8       	ldi	r20, 0x80	; 128
    43de:	5f e3       	ldi	r21, 0x3F	; 63
    43e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43e4:	88 23       	and	r24, r24
    43e6:	2c f4       	brge	.+10     	; 0x43f2 <A_HC05Project+0x632>
		__ticks = 1;
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	9a a3       	std	Y+34, r25	; 0x22
    43ee:	89 a3       	std	Y+33, r24	; 0x21
    43f0:	3f c0       	rjmp	.+126    	; 0x4470 <A_HC05Project+0x6b0>
	else if (__tmp > 65535)
    43f2:	6b a1       	ldd	r22, Y+35	; 0x23
    43f4:	7c a1       	ldd	r23, Y+36	; 0x24
    43f6:	8d a1       	ldd	r24, Y+37	; 0x25
    43f8:	9e a1       	ldd	r25, Y+38	; 0x26
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	3f ef       	ldi	r19, 0xFF	; 255
    43fe:	4f e7       	ldi	r20, 0x7F	; 127
    4400:	57 e4       	ldi	r21, 0x47	; 71
    4402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4406:	18 16       	cp	r1, r24
    4408:	4c f5       	brge	.+82     	; 0x445c <A_HC05Project+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    440a:	6f a1       	ldd	r22, Y+39	; 0x27
    440c:	78 a5       	ldd	r23, Y+40	; 0x28
    440e:	89 a5       	ldd	r24, Y+41	; 0x29
    4410:	9a a5       	ldd	r25, Y+42	; 0x2a
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	40 e2       	ldi	r20, 0x20	; 32
    4418:	51 e4       	ldi	r21, 0x41	; 65
    441a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441e:	dc 01       	movw	r26, r24
    4420:	cb 01       	movw	r24, r22
    4422:	bc 01       	movw	r22, r24
    4424:	cd 01       	movw	r24, r26
    4426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	9a a3       	std	Y+34, r25	; 0x22
    4430:	89 a3       	std	Y+33, r24	; 0x21
    4432:	0f c0       	rjmp	.+30     	; 0x4452 <A_HC05Project+0x692>
    4434:	80 e9       	ldi	r24, 0x90	; 144
    4436:	91 e0       	ldi	r25, 0x01	; 1
    4438:	98 a3       	std	Y+32, r25	; 0x20
    443a:	8f 8f       	std	Y+31, r24	; 0x1f
    443c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    443e:	98 a1       	ldd	r25, Y+32	; 0x20
    4440:	01 97       	sbiw	r24, 0x01	; 1
    4442:	f1 f7       	brne	.-4      	; 0x4440 <A_HC05Project+0x680>
    4444:	98 a3       	std	Y+32, r25	; 0x20
    4446:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4448:	89 a1       	ldd	r24, Y+33	; 0x21
    444a:	9a a1       	ldd	r25, Y+34	; 0x22
    444c:	01 97       	sbiw	r24, 0x01	; 1
    444e:	9a a3       	std	Y+34, r25	; 0x22
    4450:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4452:	89 a1       	ldd	r24, Y+33	; 0x21
    4454:	9a a1       	ldd	r25, Y+34	; 0x22
    4456:	00 97       	sbiw	r24, 0x00	; 0
    4458:	69 f7       	brne	.-38     	; 0x4434 <A_HC05Project+0x674>
    445a:	14 c0       	rjmp	.+40     	; 0x4484 <A_HC05Project+0x6c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    445c:	6b a1       	ldd	r22, Y+35	; 0x23
    445e:	7c a1       	ldd	r23, Y+36	; 0x24
    4460:	8d a1       	ldd	r24, Y+37	; 0x25
    4462:	9e a1       	ldd	r25, Y+38	; 0x26
    4464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	9a a3       	std	Y+34, r25	; 0x22
    446e:	89 a3       	std	Y+33, r24	; 0x21
    4470:	89 a1       	ldd	r24, Y+33	; 0x21
    4472:	9a a1       	ldd	r25, Y+34	; 0x22
    4474:	9e 8f       	std	Y+30, r25	; 0x1e
    4476:	8d 8f       	std	Y+29, r24	; 0x1d
    4478:	8d 8d       	ldd	r24, Y+29	; 0x1d
    447a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    447c:	01 97       	sbiw	r24, 0x01	; 1
    447e:	f1 f7       	brne	.-4      	; 0x447c <A_HC05Project+0x6bc>
    4480:	9e 8f       	std	Y+30, r25	; 0x1e
    4482:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(200);
					H_LED_Void_LedTog(LED2);
    4484:	82 e0       	ldi	r24, 0x02	; 2
    4486:	0e 94 32 14 	call	0x2864	; 0x2864 <H_LED_Void_LedTog>
    448a:	80 e0       	ldi	r24, 0x00	; 0
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	a8 e4       	ldi	r26, 0x48	; 72
    4490:	b3 e4       	ldi	r27, 0x43	; 67
    4492:	89 8f       	std	Y+25, r24	; 0x19
    4494:	9a 8f       	std	Y+26, r25	; 0x1a
    4496:	ab 8f       	std	Y+27, r26	; 0x1b
    4498:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    449a:	69 8d       	ldd	r22, Y+25	; 0x19
    449c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    449e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44a2:	20 e0       	ldi	r18, 0x00	; 0
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	4a e7       	ldi	r20, 0x7A	; 122
    44a8:	55 e4       	ldi	r21, 0x45	; 69
    44aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ae:	dc 01       	movw	r26, r24
    44b0:	cb 01       	movw	r24, r22
    44b2:	8d 8b       	std	Y+21, r24	; 0x15
    44b4:	9e 8b       	std	Y+22, r25	; 0x16
    44b6:	af 8b       	std	Y+23, r26	; 0x17
    44b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44ba:	6d 89       	ldd	r22, Y+21	; 0x15
    44bc:	7e 89       	ldd	r23, Y+22	; 0x16
    44be:	8f 89       	ldd	r24, Y+23	; 0x17
    44c0:	98 8d       	ldd	r25, Y+24	; 0x18
    44c2:	20 e0       	ldi	r18, 0x00	; 0
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	40 e8       	ldi	r20, 0x80	; 128
    44c8:	5f e3       	ldi	r21, 0x3F	; 63
    44ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44ce:	88 23       	and	r24, r24
    44d0:	2c f4       	brge	.+10     	; 0x44dc <A_HC05Project+0x71c>
		__ticks = 1;
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	9c 8b       	std	Y+20, r25	; 0x14
    44d8:	8b 8b       	std	Y+19, r24	; 0x13
    44da:	3f c0       	rjmp	.+126    	; 0x455a <A_HC05Project+0x79a>
	else if (__tmp > 65535)
    44dc:	6d 89       	ldd	r22, Y+21	; 0x15
    44de:	7e 89       	ldd	r23, Y+22	; 0x16
    44e0:	8f 89       	ldd	r24, Y+23	; 0x17
    44e2:	98 8d       	ldd	r25, Y+24	; 0x18
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	3f ef       	ldi	r19, 0xFF	; 255
    44e8:	4f e7       	ldi	r20, 0x7F	; 127
    44ea:	57 e4       	ldi	r21, 0x47	; 71
    44ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44f0:	18 16       	cp	r1, r24
    44f2:	4c f5       	brge	.+82     	; 0x4546 <A_HC05Project+0x786>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44f4:	69 8d       	ldd	r22, Y+25	; 0x19
    44f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44fc:	20 e0       	ldi	r18, 0x00	; 0
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	40 e2       	ldi	r20, 0x20	; 32
    4502:	51 e4       	ldi	r21, 0x41	; 65
    4504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4508:	dc 01       	movw	r26, r24
    450a:	cb 01       	movw	r24, r22
    450c:	bc 01       	movw	r22, r24
    450e:	cd 01       	movw	r24, r26
    4510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4514:	dc 01       	movw	r26, r24
    4516:	cb 01       	movw	r24, r22
    4518:	9c 8b       	std	Y+20, r25	; 0x14
    451a:	8b 8b       	std	Y+19, r24	; 0x13
    451c:	0f c0       	rjmp	.+30     	; 0x453c <A_HC05Project+0x77c>
    451e:	80 e9       	ldi	r24, 0x90	; 144
    4520:	91 e0       	ldi	r25, 0x01	; 1
    4522:	9a 8b       	std	Y+18, r25	; 0x12
    4524:	89 8b       	std	Y+17, r24	; 0x11
    4526:	89 89       	ldd	r24, Y+17	; 0x11
    4528:	9a 89       	ldd	r25, Y+18	; 0x12
    452a:	01 97       	sbiw	r24, 0x01	; 1
    452c:	f1 f7       	brne	.-4      	; 0x452a <A_HC05Project+0x76a>
    452e:	9a 8b       	std	Y+18, r25	; 0x12
    4530:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4532:	8b 89       	ldd	r24, Y+19	; 0x13
    4534:	9c 89       	ldd	r25, Y+20	; 0x14
    4536:	01 97       	sbiw	r24, 0x01	; 1
    4538:	9c 8b       	std	Y+20, r25	; 0x14
    453a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    453c:	8b 89       	ldd	r24, Y+19	; 0x13
    453e:	9c 89       	ldd	r25, Y+20	; 0x14
    4540:	00 97       	sbiw	r24, 0x00	; 0
    4542:	69 f7       	brne	.-38     	; 0x451e <A_HC05Project+0x75e>
    4544:	14 c0       	rjmp	.+40     	; 0x456e <A_HC05Project+0x7ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4546:	6d 89       	ldd	r22, Y+21	; 0x15
    4548:	7e 89       	ldd	r23, Y+22	; 0x16
    454a:	8f 89       	ldd	r24, Y+23	; 0x17
    454c:	98 8d       	ldd	r25, Y+24	; 0x18
    454e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4552:	dc 01       	movw	r26, r24
    4554:	cb 01       	movw	r24, r22
    4556:	9c 8b       	std	Y+20, r25	; 0x14
    4558:	8b 8b       	std	Y+19, r24	; 0x13
    455a:	8b 89       	ldd	r24, Y+19	; 0x13
    455c:	9c 89       	ldd	r25, Y+20	; 0x14
    455e:	98 8b       	std	Y+16, r25	; 0x10
    4560:	8f 87       	std	Y+15, r24	; 0x0f
    4562:	8f 85       	ldd	r24, Y+15	; 0x0f
    4564:	98 89       	ldd	r25, Y+16	; 0x10
    4566:	01 97       	sbiw	r24, 0x01	; 1
    4568:	f1 f7       	brne	.-4      	; 0x4566 <A_HC05Project+0x7a6>
    456a:	98 8b       	std	Y+16, r25	; 0x10
    456c:	8f 87       	std	Y+15, r24	; 0x0f
				H_LCD_Void_LCDWriteString("BYE");
			if (x == 55)
				H_LCD_Void_LCDClear();
			if (x == 56)
			{
				for (int i = 0; i < 20; i++)
    456e:	de 01       	movw	r26, r28
    4570:	a9 59       	subi	r26, 0x99	; 153
    4572:	bf 4f       	sbci	r27, 0xFF	; 255
    4574:	fe 01       	movw	r30, r28
    4576:	e9 59       	subi	r30, 0x99	; 153
    4578:	ff 4f       	sbci	r31, 0xFF	; 255
    457a:	80 81       	ld	r24, Z
    457c:	91 81       	ldd	r25, Z+1	; 0x01
    457e:	01 96       	adiw	r24, 0x01	; 1
    4580:	11 96       	adiw	r26, 0x01	; 1
    4582:	9c 93       	st	X, r25
    4584:	8e 93       	st	-X, r24
    4586:	fe 01       	movw	r30, r28
    4588:	e9 59       	subi	r30, 0x99	; 153
    458a:	ff 4f       	sbci	r31, 0xFF	; 255
    458c:	80 81       	ld	r24, Z
    458e:	91 81       	ldd	r25, Z+1	; 0x01
    4590:	84 31       	cpi	r24, 0x14	; 20
    4592:	91 05       	cpc	r25, r1
    4594:	0c f4       	brge	.+2      	; 0x4598 <A_HC05Project+0x7d8>
    4596:	8c ce       	rjmp	.-744    	; 0x42b0 <A_HC05Project+0x4f0>
					H_LED_Void_LedTog(LED2);
					_delay_ms(200);
				}

			}
			if (x == 57)
    4598:	fe 01       	movw	r30, r28
    459a:	e7 59       	subi	r30, 0x97	; 151
    459c:	ff 4f       	sbci	r31, 0xFF	; 255
    459e:	80 81       	ld	r24, Z
    45a0:	89 33       	cpi	r24, 0x39	; 57
    45a2:	09 f0       	breq	.+2      	; 0x45a6 <A_HC05Project+0x7e6>
    45a4:	36 cc       	rjmp	.-1940   	; 0x3e12 <A_HC05Project+0x52>
			{
				for (int i = 0; i < 2; i++)
    45a6:	fe 01       	movw	r30, r28
    45a8:	eb 59       	subi	r30, 0x9B	; 155
    45aa:	ff 4f       	sbci	r31, 0xFF	; 255
    45ac:	11 82       	std	Z+1, r1	; 0x01
    45ae:	10 82       	st	Z, r1
    45b0:	bc c0       	rjmp	.+376    	; 0x472a <A_HC05Project+0x96a>
				{
					u8 i = 0;
    45b2:	fe 01       	movw	r30, r28
    45b4:	ec 59       	subi	r30, 0x9C	; 156
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	10 82       	st	Z, r1
					u8 k = 0;
    45ba:	fe 01       	movw	r30, r28
    45bc:	ed 59       	subi	r30, 0x9D	; 157
    45be:	ff 4f       	sbci	r31, 0xFF	; 255
    45c0:	10 82       	st	Z, r1
					for (i = 0; i < 16; i++)
    45c2:	fe 01       	movw	r30, r28
    45c4:	ec 59       	subi	r30, 0x9C	; 156
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	10 82       	st	Z, r1
    45ca:	9c c0       	rjmp	.+312    	; 0x4704 <A_HC05Project+0x944>
					{
						H_LCD_Void_LCDClear();
    45cc:	0e 94 50 19 	call	0x32a0	; 0x32a0 <H_LCD_Void_LCDClear>
						for (k = 0; k < i; k++)
    45d0:	fe 01       	movw	r30, r28
    45d2:	ed 59       	subi	r30, 0x9D	; 157
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	10 82       	st	Z, r1
    45d8:	0c c0       	rjmp	.+24     	; 0x45f2 <A_HC05Project+0x832>
						{
							H_LCD_Void_LCDWriteCharacter(' ');
    45da:	80 e2       	ldi	r24, 0x20	; 32
    45dc:	0e 94 96 14 	call	0x292c	; 0x292c <H_LCD_Void_LCDWriteCharacter>
					u8 i = 0;
					u8 k = 0;
					for (i = 0; i < 16; i++)
					{
						H_LCD_Void_LCDClear();
						for (k = 0; k < i; k++)
    45e0:	de 01       	movw	r26, r28
    45e2:	ad 59       	subi	r26, 0x9D	; 157
    45e4:	bf 4f       	sbci	r27, 0xFF	; 255
    45e6:	fe 01       	movw	r30, r28
    45e8:	ed 59       	subi	r30, 0x9D	; 157
    45ea:	ff 4f       	sbci	r31, 0xFF	; 255
    45ec:	80 81       	ld	r24, Z
    45ee:	8f 5f       	subi	r24, 0xFF	; 255
    45f0:	8c 93       	st	X, r24
    45f2:	fe 01       	movw	r30, r28
    45f4:	ed 59       	subi	r30, 0x9D	; 157
    45f6:	ff 4f       	sbci	r31, 0xFF	; 255
    45f8:	de 01       	movw	r26, r28
    45fa:	ac 59       	subi	r26, 0x9C	; 156
    45fc:	bf 4f       	sbci	r27, 0xFF	; 255
    45fe:	90 81       	ld	r25, Z
    4600:	8c 91       	ld	r24, X
    4602:	98 17       	cp	r25, r24
    4604:	50 f3       	brcs	.-44     	; 0x45da <A_HC05Project+0x81a>
						{
							H_LCD_Void_LCDWriteCharacter(' ');
						}
						H_LCD_Void_LCDWriteString("HELLO");
    4606:	87 e6       	ldi	r24, 0x67	; 103
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <H_LCD_Void_LCDWriteString>
    460e:	80 e0       	ldi	r24, 0x00	; 0
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	aa ef       	ldi	r26, 0xFA	; 250
    4614:	b3 e4       	ldi	r27, 0x43	; 67
    4616:	8b 87       	std	Y+11, r24	; 0x0b
    4618:	9c 87       	std	Y+12, r25	; 0x0c
    461a:	ad 87       	std	Y+13, r26	; 0x0d
    461c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    461e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4620:	7c 85       	ldd	r23, Y+12	; 0x0c
    4622:	8d 85       	ldd	r24, Y+13	; 0x0d
    4624:	9e 85       	ldd	r25, Y+14	; 0x0e
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	4a e7       	ldi	r20, 0x7A	; 122
    462c:	55 e4       	ldi	r21, 0x45	; 69
    462e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	8f 83       	std	Y+7, r24	; 0x07
    4638:	98 87       	std	Y+8, r25	; 0x08
    463a:	a9 87       	std	Y+9, r26	; 0x09
    463c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    463e:	6f 81       	ldd	r22, Y+7	; 0x07
    4640:	78 85       	ldd	r23, Y+8	; 0x08
    4642:	89 85       	ldd	r24, Y+9	; 0x09
    4644:	9a 85       	ldd	r25, Y+10	; 0x0a
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	40 e8       	ldi	r20, 0x80	; 128
    464c:	5f e3       	ldi	r21, 0x3F	; 63
    464e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4652:	88 23       	and	r24, r24
    4654:	2c f4       	brge	.+10     	; 0x4660 <A_HC05Project+0x8a0>
		__ticks = 1;
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	9e 83       	std	Y+6, r25	; 0x06
    465c:	8d 83       	std	Y+5, r24	; 0x05
    465e:	3f c0       	rjmp	.+126    	; 0x46de <A_HC05Project+0x91e>
	else if (__tmp > 65535)
    4660:	6f 81       	ldd	r22, Y+7	; 0x07
    4662:	78 85       	ldd	r23, Y+8	; 0x08
    4664:	89 85       	ldd	r24, Y+9	; 0x09
    4666:	9a 85       	ldd	r25, Y+10	; 0x0a
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	3f ef       	ldi	r19, 0xFF	; 255
    466c:	4f e7       	ldi	r20, 0x7F	; 127
    466e:	57 e4       	ldi	r21, 0x47	; 71
    4670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4674:	18 16       	cp	r1, r24
    4676:	4c f5       	brge	.+82     	; 0x46ca <A_HC05Project+0x90a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4678:	6b 85       	ldd	r22, Y+11	; 0x0b
    467a:	7c 85       	ldd	r23, Y+12	; 0x0c
    467c:	8d 85       	ldd	r24, Y+13	; 0x0d
    467e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	40 e2       	ldi	r20, 0x20	; 32
    4686:	51 e4       	ldi	r21, 0x41	; 65
    4688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	bc 01       	movw	r22, r24
    4692:	cd 01       	movw	r24, r26
    4694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	9e 83       	std	Y+6, r25	; 0x06
    469e:	8d 83       	std	Y+5, r24	; 0x05
    46a0:	0f c0       	rjmp	.+30     	; 0x46c0 <A_HC05Project+0x900>
    46a2:	80 e9       	ldi	r24, 0x90	; 144
    46a4:	91 e0       	ldi	r25, 0x01	; 1
    46a6:	9c 83       	std	Y+4, r25	; 0x04
    46a8:	8b 83       	std	Y+3, r24	; 0x03
    46aa:	8b 81       	ldd	r24, Y+3	; 0x03
    46ac:	9c 81       	ldd	r25, Y+4	; 0x04
    46ae:	01 97       	sbiw	r24, 0x01	; 1
    46b0:	f1 f7       	brne	.-4      	; 0x46ae <A_HC05Project+0x8ee>
    46b2:	9c 83       	std	Y+4, r25	; 0x04
    46b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b6:	8d 81       	ldd	r24, Y+5	; 0x05
    46b8:	9e 81       	ldd	r25, Y+6	; 0x06
    46ba:	01 97       	sbiw	r24, 0x01	; 1
    46bc:	9e 83       	std	Y+6, r25	; 0x06
    46be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c0:	8d 81       	ldd	r24, Y+5	; 0x05
    46c2:	9e 81       	ldd	r25, Y+6	; 0x06
    46c4:	00 97       	sbiw	r24, 0x00	; 0
    46c6:	69 f7       	brne	.-38     	; 0x46a2 <A_HC05Project+0x8e2>
    46c8:	14 c0       	rjmp	.+40     	; 0x46f2 <A_HC05Project+0x932>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ca:	6f 81       	ldd	r22, Y+7	; 0x07
    46cc:	78 85       	ldd	r23, Y+8	; 0x08
    46ce:	89 85       	ldd	r24, Y+9	; 0x09
    46d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	9e 83       	std	Y+6, r25	; 0x06
    46dc:	8d 83       	std	Y+5, r24	; 0x05
    46de:	8d 81       	ldd	r24, Y+5	; 0x05
    46e0:	9e 81       	ldd	r25, Y+6	; 0x06
    46e2:	9a 83       	std	Y+2, r25	; 0x02
    46e4:	89 83       	std	Y+1, r24	; 0x01
    46e6:	89 81       	ldd	r24, Y+1	; 0x01
    46e8:	9a 81       	ldd	r25, Y+2	; 0x02
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	f1 f7       	brne	.-4      	; 0x46ea <A_HC05Project+0x92a>
    46ee:	9a 83       	std	Y+2, r25	; 0x02
    46f0:	89 83       	std	Y+1, r24	; 0x01
			{
				for (int i = 0; i < 2; i++)
				{
					u8 i = 0;
					u8 k = 0;
					for (i = 0; i < 16; i++)
    46f2:	de 01       	movw	r26, r28
    46f4:	ac 59       	subi	r26, 0x9C	; 156
    46f6:	bf 4f       	sbci	r27, 0xFF	; 255
    46f8:	fe 01       	movw	r30, r28
    46fa:	ec 59       	subi	r30, 0x9C	; 156
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	80 81       	ld	r24, Z
    4700:	8f 5f       	subi	r24, 0xFF	; 255
    4702:	8c 93       	st	X, r24
    4704:	fe 01       	movw	r30, r28
    4706:	ec 59       	subi	r30, 0x9C	; 156
    4708:	ff 4f       	sbci	r31, 0xFF	; 255
    470a:	80 81       	ld	r24, Z
    470c:	80 31       	cpi	r24, 0x10	; 16
    470e:	08 f4       	brcc	.+2      	; 0x4712 <A_HC05Project+0x952>
    4710:	5d cf       	rjmp	.-326    	; 0x45cc <A_HC05Project+0x80c>
				}

			}
			if (x == 57)
			{
				for (int i = 0; i < 2; i++)
    4712:	de 01       	movw	r26, r28
    4714:	ab 59       	subi	r26, 0x9B	; 155
    4716:	bf 4f       	sbci	r27, 0xFF	; 255
    4718:	fe 01       	movw	r30, r28
    471a:	eb 59       	subi	r30, 0x9B	; 155
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	80 81       	ld	r24, Z
    4720:	91 81       	ldd	r25, Z+1	; 0x01
    4722:	01 96       	adiw	r24, 0x01	; 1
    4724:	11 96       	adiw	r26, 0x01	; 1
    4726:	9c 93       	st	X, r25
    4728:	8e 93       	st	-X, r24
    472a:	fe 01       	movw	r30, r28
    472c:	eb 59       	subi	r30, 0x9B	; 155
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	80 81       	ld	r24, Z
    4732:	91 81       	ldd	r25, Z+1	; 0x01
    4734:	82 30       	cpi	r24, 0x02	; 2
    4736:	91 05       	cpc	r25, r1
    4738:	0c f4       	brge	.+2      	; 0x473c <A_HC05Project+0x97c>
    473a:	3b cf       	rjmp	.-394    	; 0x45b2 <A_HC05Project+0x7f2>
    473c:	6a cb       	rjmp	.-2348   	; 0x3e12 <A_HC05Project+0x52>

0000473e <main>:
#include "Projects.h"
#include "EXT_INT_Interface.h"
#include <avr/interrupt.h>

int main()
{
    473e:	df 93       	push	r29
    4740:	cf 93       	push	r28
    4742:	cd b7       	in	r28, 0x3d	; 61
    4744:	de b7       	in	r29, 0x3e	; 62
    4746:	2f 97       	sbiw	r28, 0x0f	; 15
    4748:	0f b6       	in	r0, 0x3f	; 63
    474a:	f8 94       	cli
    474c:	de bf       	out	0x3e, r29	; 62
    474e:	0f be       	out	0x3f, r0	; 63
    4750:	cd bf       	out	0x3d, r28	; 61
                        /*=========TIMER0==========*/
	//A_Timer0Project();
                        /*=========UART==========*/
	//A_HC05Project();

	u8 x = 0;
    4752:	1f 86       	std	Y+15, r1	; 0x0f
	x = H_AT24C16A_U8_EEPROMRead(1,1);
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	61 e0       	ldi	r22, 0x01	; 1
    4758:	0e 94 b0 1b 	call	0x3760	; 0x3760 <H_AT24C16A_U8_EEPROMRead>
    475c:	8f 87       	std	Y+15, r24	; 0x0f
	H_LCD_Void_LCDInit();
    475e:	0e 94 5d 14 	call	0x28ba	; 0x28ba <H_LCD_Void_LCDInit>
	H_AT24C16A_Void_EEPROMInit();
    4762:	0e 94 8a 1b 	call	0x3714	; 0x3714 <H_AT24C16A_Void_EEPROMInit>
	while(1)
	{
		H_AT24C16A_Void_EEPROMWrite(1,1,x);
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	61 e0       	ldi	r22, 0x01	; 1
    476a:	4f 85       	ldd	r20, Y+15	; 0x0f
    476c:	0e 94 93 1b 	call	0x3726	; 0x3726 <H_AT24C16A_Void_EEPROMWrite>
		H_LCD_Void_LCDWriteNumber(x);
    4770:	8f 85       	ldd	r24, Y+15	; 0x0f
    4772:	88 2f       	mov	r24, r24
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	a0 e0       	ldi	r26, 0x00	; 0
    4778:	b0 e0       	ldi	r27, 0x00	; 0
    477a:	bc 01       	movw	r22, r24
    477c:	cd 01       	movw	r24, r26
    477e:	0e 94 af 18 	call	0x315e	; 0x315e <H_LCD_Void_LCDWriteNumber>
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	aa ef       	ldi	r26, 0xFA	; 250
    4788:	b3 e4       	ldi	r27, 0x43	; 67
    478a:	8b 87       	std	Y+11, r24	; 0x0b
    478c:	9c 87       	std	Y+12, r25	; 0x0c
    478e:	ad 87       	std	Y+13, r26	; 0x0d
    4790:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4792:	6b 85       	ldd	r22, Y+11	; 0x0b
    4794:	7c 85       	ldd	r23, Y+12	; 0x0c
    4796:	8d 85       	ldd	r24, Y+13	; 0x0d
    4798:	9e 85       	ldd	r25, Y+14	; 0x0e
    479a:	20 e0       	ldi	r18, 0x00	; 0
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	4a e7       	ldi	r20, 0x7A	; 122
    47a0:	55 e4       	ldi	r21, 0x45	; 69
    47a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a6:	dc 01       	movw	r26, r24
    47a8:	cb 01       	movw	r24, r22
    47aa:	8f 83       	std	Y+7, r24	; 0x07
    47ac:	98 87       	std	Y+8, r25	; 0x08
    47ae:	a9 87       	std	Y+9, r26	; 0x09
    47b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47b2:	6f 81       	ldd	r22, Y+7	; 0x07
    47b4:	78 85       	ldd	r23, Y+8	; 0x08
    47b6:	89 85       	ldd	r24, Y+9	; 0x09
    47b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ba:	20 e0       	ldi	r18, 0x00	; 0
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	40 e8       	ldi	r20, 0x80	; 128
    47c0:	5f e3       	ldi	r21, 0x3F	; 63
    47c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47c6:	88 23       	and	r24, r24
    47c8:	2c f4       	brge	.+10     	; 0x47d4 <main+0x96>
		__ticks = 1;
    47ca:	81 e0       	ldi	r24, 0x01	; 1
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	9e 83       	std	Y+6, r25	; 0x06
    47d0:	8d 83       	std	Y+5, r24	; 0x05
    47d2:	3f c0       	rjmp	.+126    	; 0x4852 <main+0x114>
	else if (__tmp > 65535)
    47d4:	6f 81       	ldd	r22, Y+7	; 0x07
    47d6:	78 85       	ldd	r23, Y+8	; 0x08
    47d8:	89 85       	ldd	r24, Y+9	; 0x09
    47da:	9a 85       	ldd	r25, Y+10	; 0x0a
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	3f ef       	ldi	r19, 0xFF	; 255
    47e0:	4f e7       	ldi	r20, 0x7F	; 127
    47e2:	57 e4       	ldi	r21, 0x47	; 71
    47e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47e8:	18 16       	cp	r1, r24
    47ea:	4c f5       	brge	.+82     	; 0x483e <main+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    47ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    47f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	40 e2       	ldi	r20, 0x20	; 32
    47fa:	51 e4       	ldi	r21, 0x41	; 65
    47fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4800:	dc 01       	movw	r26, r24
    4802:	cb 01       	movw	r24, r22
    4804:	bc 01       	movw	r22, r24
    4806:	cd 01       	movw	r24, r26
    4808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	9e 83       	std	Y+6, r25	; 0x06
    4812:	8d 83       	std	Y+5, r24	; 0x05
    4814:	0f c0       	rjmp	.+30     	; 0x4834 <main+0xf6>
    4816:	80 e9       	ldi	r24, 0x90	; 144
    4818:	91 e0       	ldi	r25, 0x01	; 1
    481a:	9c 83       	std	Y+4, r25	; 0x04
    481c:	8b 83       	std	Y+3, r24	; 0x03
    481e:	8b 81       	ldd	r24, Y+3	; 0x03
    4820:	9c 81       	ldd	r25, Y+4	; 0x04
    4822:	01 97       	sbiw	r24, 0x01	; 1
    4824:	f1 f7       	brne	.-4      	; 0x4822 <main+0xe4>
    4826:	9c 83       	std	Y+4, r25	; 0x04
    4828:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    482a:	8d 81       	ldd	r24, Y+5	; 0x05
    482c:	9e 81       	ldd	r25, Y+6	; 0x06
    482e:	01 97       	sbiw	r24, 0x01	; 1
    4830:	9e 83       	std	Y+6, r25	; 0x06
    4832:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4834:	8d 81       	ldd	r24, Y+5	; 0x05
    4836:	9e 81       	ldd	r25, Y+6	; 0x06
    4838:	00 97       	sbiw	r24, 0x00	; 0
    483a:	69 f7       	brne	.-38     	; 0x4816 <main+0xd8>
    483c:	14 c0       	rjmp	.+40     	; 0x4866 <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    483e:	6f 81       	ldd	r22, Y+7	; 0x07
    4840:	78 85       	ldd	r23, Y+8	; 0x08
    4842:	89 85       	ldd	r24, Y+9	; 0x09
    4844:	9a 85       	ldd	r25, Y+10	; 0x0a
    4846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    484a:	dc 01       	movw	r26, r24
    484c:	cb 01       	movw	r24, r22
    484e:	9e 83       	std	Y+6, r25	; 0x06
    4850:	8d 83       	std	Y+5, r24	; 0x05
    4852:	8d 81       	ldd	r24, Y+5	; 0x05
    4854:	9e 81       	ldd	r25, Y+6	; 0x06
    4856:	9a 83       	std	Y+2, r25	; 0x02
    4858:	89 83       	std	Y+1, r24	; 0x01
    485a:	89 81       	ldd	r24, Y+1	; 0x01
    485c:	9a 81       	ldd	r25, Y+2	; 0x02
    485e:	01 97       	sbiw	r24, 0x01	; 1
    4860:	f1 f7       	brne	.-4      	; 0x485e <main+0x120>
    4862:	9a 83       	std	Y+2, r25	; 0x02
    4864:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		x++;
    4866:	8f 85       	ldd	r24, Y+15	; 0x0f
    4868:	8f 5f       	subi	r24, 0xFF	; 255
    486a:	8f 87       	std	Y+15, r24	; 0x0f
		H_LCD_Void_LCDClear();
    486c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <H_LCD_Void_LCDClear>
    4870:	7a cf       	rjmp	.-268    	; 0x4766 <main+0x28>

00004872 <__mulsi3>:
    4872:	62 9f       	mul	r22, r18
    4874:	d0 01       	movw	r26, r0
    4876:	73 9f       	mul	r23, r19
    4878:	f0 01       	movw	r30, r0
    487a:	82 9f       	mul	r24, r18
    487c:	e0 0d       	add	r30, r0
    487e:	f1 1d       	adc	r31, r1
    4880:	64 9f       	mul	r22, r20
    4882:	e0 0d       	add	r30, r0
    4884:	f1 1d       	adc	r31, r1
    4886:	92 9f       	mul	r25, r18
    4888:	f0 0d       	add	r31, r0
    488a:	83 9f       	mul	r24, r19
    488c:	f0 0d       	add	r31, r0
    488e:	74 9f       	mul	r23, r20
    4890:	f0 0d       	add	r31, r0
    4892:	65 9f       	mul	r22, r21
    4894:	f0 0d       	add	r31, r0
    4896:	99 27       	eor	r25, r25
    4898:	72 9f       	mul	r23, r18
    489a:	b0 0d       	add	r27, r0
    489c:	e1 1d       	adc	r30, r1
    489e:	f9 1f       	adc	r31, r25
    48a0:	63 9f       	mul	r22, r19
    48a2:	b0 0d       	add	r27, r0
    48a4:	e1 1d       	adc	r30, r1
    48a6:	f9 1f       	adc	r31, r25
    48a8:	bd 01       	movw	r22, r26
    48aa:	cf 01       	movw	r24, r30
    48ac:	11 24       	eor	r1, r1
    48ae:	08 95       	ret

000048b0 <__udivmodqi4>:
    48b0:	99 1b       	sub	r25, r25
    48b2:	79 e0       	ldi	r23, 0x09	; 9
    48b4:	04 c0       	rjmp	.+8      	; 0x48be <__udivmodqi4_ep>

000048b6 <__udivmodqi4_loop>:
    48b6:	99 1f       	adc	r25, r25
    48b8:	96 17       	cp	r25, r22
    48ba:	08 f0       	brcs	.+2      	; 0x48be <__udivmodqi4_ep>
    48bc:	96 1b       	sub	r25, r22

000048be <__udivmodqi4_ep>:
    48be:	88 1f       	adc	r24, r24
    48c0:	7a 95       	dec	r23
    48c2:	c9 f7       	brne	.-14     	; 0x48b6 <__udivmodqi4_loop>
    48c4:	80 95       	com	r24
    48c6:	08 95       	ret

000048c8 <__udivmodsi4>:
    48c8:	a1 e2       	ldi	r26, 0x21	; 33
    48ca:	1a 2e       	mov	r1, r26
    48cc:	aa 1b       	sub	r26, r26
    48ce:	bb 1b       	sub	r27, r27
    48d0:	fd 01       	movw	r30, r26
    48d2:	0d c0       	rjmp	.+26     	; 0x48ee <__udivmodsi4_ep>

000048d4 <__udivmodsi4_loop>:
    48d4:	aa 1f       	adc	r26, r26
    48d6:	bb 1f       	adc	r27, r27
    48d8:	ee 1f       	adc	r30, r30
    48da:	ff 1f       	adc	r31, r31
    48dc:	a2 17       	cp	r26, r18
    48de:	b3 07       	cpc	r27, r19
    48e0:	e4 07       	cpc	r30, r20
    48e2:	f5 07       	cpc	r31, r21
    48e4:	20 f0       	brcs	.+8      	; 0x48ee <__udivmodsi4_ep>
    48e6:	a2 1b       	sub	r26, r18
    48e8:	b3 0b       	sbc	r27, r19
    48ea:	e4 0b       	sbc	r30, r20
    48ec:	f5 0b       	sbc	r31, r21

000048ee <__udivmodsi4_ep>:
    48ee:	66 1f       	adc	r22, r22
    48f0:	77 1f       	adc	r23, r23
    48f2:	88 1f       	adc	r24, r24
    48f4:	99 1f       	adc	r25, r25
    48f6:	1a 94       	dec	r1
    48f8:	69 f7       	brne	.-38     	; 0x48d4 <__udivmodsi4_loop>
    48fa:	60 95       	com	r22
    48fc:	70 95       	com	r23
    48fe:	80 95       	com	r24
    4900:	90 95       	com	r25
    4902:	9b 01       	movw	r18, r22
    4904:	ac 01       	movw	r20, r24
    4906:	bd 01       	movw	r22, r26
    4908:	cf 01       	movw	r24, r30
    490a:	08 95       	ret

0000490c <__divmodsi4>:
    490c:	97 fb       	bst	r25, 7
    490e:	09 2e       	mov	r0, r25
    4910:	05 26       	eor	r0, r21
    4912:	0e d0       	rcall	.+28     	; 0x4930 <__divmodsi4_neg1>
    4914:	57 fd       	sbrc	r21, 7
    4916:	04 d0       	rcall	.+8      	; 0x4920 <__divmodsi4_neg2>
    4918:	d7 df       	rcall	.-82     	; 0x48c8 <__udivmodsi4>
    491a:	0a d0       	rcall	.+20     	; 0x4930 <__divmodsi4_neg1>
    491c:	00 1c       	adc	r0, r0
    491e:	38 f4       	brcc	.+14     	; 0x492e <__divmodsi4_exit>

00004920 <__divmodsi4_neg2>:
    4920:	50 95       	com	r21
    4922:	40 95       	com	r20
    4924:	30 95       	com	r19
    4926:	21 95       	neg	r18
    4928:	3f 4f       	sbci	r19, 0xFF	; 255
    492a:	4f 4f       	sbci	r20, 0xFF	; 255
    492c:	5f 4f       	sbci	r21, 0xFF	; 255

0000492e <__divmodsi4_exit>:
    492e:	08 95       	ret

00004930 <__divmodsi4_neg1>:
    4930:	f6 f7       	brtc	.-4      	; 0x492e <__divmodsi4_exit>
    4932:	90 95       	com	r25
    4934:	80 95       	com	r24
    4936:	70 95       	com	r23
    4938:	61 95       	neg	r22
    493a:	7f 4f       	sbci	r23, 0xFF	; 255
    493c:	8f 4f       	sbci	r24, 0xFF	; 255
    493e:	9f 4f       	sbci	r25, 0xFF	; 255
    4940:	08 95       	ret

00004942 <__prologue_saves__>:
    4942:	2f 92       	push	r2
    4944:	3f 92       	push	r3
    4946:	4f 92       	push	r4
    4948:	5f 92       	push	r5
    494a:	6f 92       	push	r6
    494c:	7f 92       	push	r7
    494e:	8f 92       	push	r8
    4950:	9f 92       	push	r9
    4952:	af 92       	push	r10
    4954:	bf 92       	push	r11
    4956:	cf 92       	push	r12
    4958:	df 92       	push	r13
    495a:	ef 92       	push	r14
    495c:	ff 92       	push	r15
    495e:	0f 93       	push	r16
    4960:	1f 93       	push	r17
    4962:	cf 93       	push	r28
    4964:	df 93       	push	r29
    4966:	cd b7       	in	r28, 0x3d	; 61
    4968:	de b7       	in	r29, 0x3e	; 62
    496a:	ca 1b       	sub	r28, r26
    496c:	db 0b       	sbc	r29, r27
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	f8 94       	cli
    4972:	de bf       	out	0x3e, r29	; 62
    4974:	0f be       	out	0x3f, r0	; 63
    4976:	cd bf       	out	0x3d, r28	; 61
    4978:	09 94       	ijmp

0000497a <__epilogue_restores__>:
    497a:	2a 88       	ldd	r2, Y+18	; 0x12
    497c:	39 88       	ldd	r3, Y+17	; 0x11
    497e:	48 88       	ldd	r4, Y+16	; 0x10
    4980:	5f 84       	ldd	r5, Y+15	; 0x0f
    4982:	6e 84       	ldd	r6, Y+14	; 0x0e
    4984:	7d 84       	ldd	r7, Y+13	; 0x0d
    4986:	8c 84       	ldd	r8, Y+12	; 0x0c
    4988:	9b 84       	ldd	r9, Y+11	; 0x0b
    498a:	aa 84       	ldd	r10, Y+10	; 0x0a
    498c:	b9 84       	ldd	r11, Y+9	; 0x09
    498e:	c8 84       	ldd	r12, Y+8	; 0x08
    4990:	df 80       	ldd	r13, Y+7	; 0x07
    4992:	ee 80       	ldd	r14, Y+6	; 0x06
    4994:	fd 80       	ldd	r15, Y+5	; 0x05
    4996:	0c 81       	ldd	r16, Y+4	; 0x04
    4998:	1b 81       	ldd	r17, Y+3	; 0x03
    499a:	aa 81       	ldd	r26, Y+2	; 0x02
    499c:	b9 81       	ldd	r27, Y+1	; 0x01
    499e:	ce 0f       	add	r28, r30
    49a0:	d1 1d       	adc	r29, r1
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	f8 94       	cli
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	cd bf       	out	0x3d, r28	; 61
    49ac:	ed 01       	movw	r28, r26
    49ae:	08 95       	ret

000049b0 <_exit>:
    49b0:	f8 94       	cli

000049b2 <__stop_program>:
    49b2:	ff cf       	rjmp	.-2      	; 0x49b2 <__stop_program>
